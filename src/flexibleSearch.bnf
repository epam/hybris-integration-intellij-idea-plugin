/*
 * This file is part of "hybris integration" plugin for Intellij IDEA.
 * Copyright (C) 2014-2016 Alexander Bartash <AlexanderBartash@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

//
// FlexibleSearch BNF Grammar
//
{
  parserClass="com.intellij.idea.plugin.hybris.flexibleSearch.FlexibleSearchParser"
  parserUtilClass="com.intellij.idea.plugin.hybris.flexibleSearch.utils.FlexibleSearchParserUtils"
  
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="FlexibleSearch"
  psiImplClassSuffix="Impl"
  psiPackage="com.intellij.idea.plugin.hybris.flexibleSearch.psi"
  psiImplPackage="com.intellij.idea.plugin.hybris.flexibleSearch.psi.impl"

  elementTypeHolderClass="com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes"
  elementTypeClass="com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchElementType"
  tokenTypeClass="com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTokenType"
 
  tokens = [
        PERCENT                         = '%'
        QUOTE                           = "'"
        ASTERISK                        = "*"
        PLUS_SIGN                       = "+"
        COMMA                           = ","
        MINUS_SIGN                      = "-"
        DOT                             = "."
        COLON                           = ":"
        SEMICOLON                       = ';'
        QUESTION_MARK                   = '?'
        EXCLAMATION_MARK                = "!"
        UNDERSCORE                      = "_"

        LEFT_BRACKET                    = "["
        RIGHT_BRACKET                   = "]"
        LEFT_PAREN                      = '('
        RIGHT_PAREN                     = ')'
        LEFT_BRACE                      = "regexp:(\{)"
        RIGHT_BRACE                     = "regexp:(\})"
        RIGHT_DOUBLE_BRACE              = "regexp:(}})"
        LEFT_DOUBLE_BRACE               = "regexp:(\{\{)"
        
        EQUALS_OPERATOR                 = 'regexp:(=)'
        NOT_EQUALS_OPERATOR             = '<>'
        GREATER_THAN_OPERATOR           = '>'
        GREATER_THAN_OR_EQUALS_OPERATOR = "regexp:(>=)"
        LESS_THAN_OPERATOR              = "<"
        LESS_THAN_OR_EQUALS_OPERATOR    = "regexp:(<=)"


        SPACE                           = 'regexp:\s+'
        IDENTIFIER                      = 'regexp:\p{Alpha}\w*'
        PARAMETER_IDENTIFIER            = 'regexp:([:jletter:] [:jletterdigit:]*)'
        COLUMN_REFERENCE_IDENTIFIER     = 'regexp:([:jletter:] [:jletterdigit:]*)'
        TABLE_NAME_IDENTIFIER           = 'regexp:([:jletter:] [:jletterdigit:]*)'
        STRING                          = "regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\\"|\\\'|\\)*\")"
        NUMBER                          = 'regexp:[:jdigit:]*'
  ]
}

flexibleSearchFile ::= ( statement )? ( ';' ( statement )? )*

private statement ::= !<<eof>> (query_specification empty_statement?)* empty_statement?
{recoverWhile = expressionRecoverWhile }
 
private expressionRecoverWhile ::= !(SEMICOLON | <<eof>> )

private empty_statement ::= (SEMICOLON | <<eof>>)

// Specify a table derived from the result of a <table expression>.

query_specification ::= SELECT [ set_quantifier ] select_list table_expression (SEMICOLON | <<eof>>)?
{pin = 1 recoverWhile= querySpecificationRecoverWhile}
private querySpecificationRecoverWhile ::= !( SEMICOLON | query_specification | RIGHT_DOUBLE_BRACE)

select_list ::= ASTERISK | select_sublist [ ( COMMA select_sublist )* ]
{pin=2 recoverWhile=select_list_recover}
private select_list_recover ::= !(FROM)

select_sublist ::= derived_column | (aggregate_function [COMMA aggregate_function*])

derived_column ::= value_expression [ AS  correlation_name ]

set_quantifier ::= (DISTINCT | ALL)

aggregate_function ::=
		COUNT LEFT_PAREN ASTERISK RIGHT_PAREN 
	|	general_set_function 

general_set_function ::= set_function_type LEFT_PAREN [ set_quantifier ] value_expression RIGHT_PAREN [ [ AS ] correlation_name ]

set_function_type ::= computational_operation

private computational_operation ::=
		AVG | MAX | MIN | SUM
	|	EVERY | ANY | SOME
	|	COUNT

table_expression ::= from_clause 
		 where_clause? 
		 order_by_clause? 
		 group_by_clause?

order_by_clause ::= ORDER BY sort_specification_list
{pin = 1 recoverWhile = orderByClauseRecoverWhile}

private orderByClauseRecoverWhile ::= !( SEMICOLON | query_specification | RIGHT_DOUBLE_BRACE)

sort_specification_list ::= sort_specification [ { COMMA sort_specification }* ]

sort_specification ::= sort_key [ ordering_specification ] [ null_ordering ]

sort_key ::= value_expression

ordering_specification ::= ASC | DESC

null_ordering ::= NULLS FIRST | NULLS LAST


//Specify a table derived from one or more tables. <from clause>

//<from clause> ::= FROM <table reference list>
from_clause ::= FROM LEFT_PAREN? (LEFT_BRACE table_reference_list RIGHT_BRACE | subquery ) RIGHT_PAREN?
{pin = 1 recoverWhile=from_clause_recover}
private from_clause_recover ::= !(WHERE | SELECT | FROM | SEMICOLON )

table_reference_list ::=  table_reference [ ( COMMA? table_reference )* ] 
{pin=1}

table_reference ::= table_primary [joined_table*]
{pin=1}

table_primary ::= table_name [ [ AS ] correlation_name ]
{pin=1 /*recoverWhile=table_primary_recover*/}
private table_primary_recover ::= !(JOIN)

table_name ::= TABLE_NAME_IDENTIFIER [ EXCLAMATION_MARK ]
{
    pin=1 
    mixin = "com.intellij.idea.plugin.hybris.flexibleSearch.psi.impl.TypeNameMixin"
    recoverWhile = table_name_recover
}
private table_name_recover ::= !(RIGHT_BRACE | AS | JOIN | ON | SPACE | " ")

correlation_name ::= IDENTIFIER

// 7.7 <joined table> (p312)
// Specify a table derived from a Cartesian product, inner or outer join, or union join.

joined_table ::=  [ join_type ] JOIN table_reference join_specification 
{pin = 2}

join_specification ::= join_condition 
{pin = 1}

join_condition ::= ON search_condition
{pin = 1 recoverWhile = join_condition_recover}
private join_condition_recover ::= !( RIGHT_BRACE | LEFT | JOIN )

join_type ::= LEFT |


table_subquery ::= subquery

subquery ::= 
LEFT_PAREN? LEFT_DOUBLE_BRACE query_specification RIGHT_DOUBLE_BRACE [(UNION ALL? subquery)*]  RIGHT_PAREN? [ [ AS ] correlation_name ]
{pin=2}

where_clause ::= WHERE search_condition
{pin=1 recoverWhile=where_clause_recover}
private where_clause_recover ::= !('{{' | <<eof>> | SELECT | ORDER | LEFT_PAREN | SEMICOLON | RIGHT_DOUBLE_BRACE )

search_condition ::= boolean_value_expression

// boolean_value_expression 
boolean_value_expression ::= boolean_term

boolean_term ::= boolean_factor [([AND|OR] boolean_term)*]
{pin = 1/* recoverWhile= boolean_term_recover*/}
private boolean_term_recover ::= !(JOIN)

boolean_factor ::= [ NOT ] boolean_test

boolean_test ::= boolean_primary  [ IS [ NOT ] truth_value ]

truth_value ::= TRUE | FALSE 

boolean_primary ::= boolean_predicand | predicate 

/*
boolean_predicand ::= parenthesized_boolean_value_expression

parenthesized_boolean_value_expression ::= LEFT_PAREN boolean_value_expression LEFT_PAREN

nonparenthesized_value_expression_primary ::= id
*/

boolean_predicand ::= parenthesized_boolean_value_expression | nonparenthesized_value_expression_primary

private parenthesized_boolean_value_expression ::= LEFT_PAREN boolean_value_expression RIGHT_PAREN
{pin = 1 }

private nonparenthesized_value_expression_primary ::= column_reference
//Predicates
//Specify a condition that can be evaluated to give a boolean value.

predicate ::= comparison_predicate
	|	between_predicate
	|	like_predicate
	|	null_predicate
	|	exists_predicate
	|   in_predicate

null_predicate ::= row_value_predicand IS [ NOT ] NULL

exists_predicate ::= EXISTS table_subquery

in_predicate ::= row_value_predicand IN (table_subquery | LEFT_PAREN? row_value_predicand RIGHT_PAREN?) 

//Specify a comparison of two row values. <comparison predicate>
private comparison_predicate ::= row_value_predicand? comp_op row_value_predicand
{pin=2}
comp_op ::=
		EQUALS_OPERATOR
	|	GREATER_THAN_OPERATOR
	|	NOT_EQUALS_OPERATOR
	|	LESS_THAN_OPERATOR
	|	LESS_THAN_OR_EQUALS_OPERATOR
	|	GREATER_THAN_OR_EQUALS_OPERATOR


// Specify a range comparison. <between predicate>
between_predicate ::= row_value_predicand [ NOT ] BETWEEN row_value_predicand AND row_value_predicand

row_value_predicand ::= value_expression | common_value_expression (','common_value_expression)* 

common_value_expression ::= string_value_expression | NUMBER

like_predicate ::= character_like_predicate

character_like_predicate ::= row_value_predicand [ NOT ] LIKE (character_pattern | value_expression)

character_pattern ::=  STRING | string_value_function

string_value_expression ::=  general_literal

general_literal ::= character_string_literal

character_string_literal ::= STRING 

string_value_function ::= character_value_function 

character_value_function ::= character_substring_function

character_substring_function ::=
        CONCAT LEFT_PAREN string_value_expression COMMA  (character_substring_function | string_value_expression) RIGHT_PAREN

value_expression ::=  NUMBER 
                    | parameter_reference
                    | column_reference_value

private column_reference_value ::= LEFT_BRACE? column_reference column_localization? RIGHT_BRACE?
{pin = 2 /*recoverWhile=column_reference_value_recover*/}

column_localization ::= LEFT_BRACKET IDENTIFIER RIGHT_BRACKET

private identifier_chain ::= (IDENTIFIER | TABLE_NAME_IDENTIFIER | COLUMN_REFERENCE_IDENTIFIER) [ ( (DOT|COLON) (IDENTIFIER | COLUMN_REFERENCE_IDENTIFIER) )* ]

parameter_reference ::= QUESTION_MARK PARAMETER_IDENTIFIER 
{pin = 1}
column_reference ::= identifier_chain
{
    pin = 1 
    mixin = "com.intellij.idea.plugin.hybris.flexibleSearch.psi.impl.ColumnReferenceMixin"
    recoverWhile = column_reference_recover
}
private column_reference_recover ::= !(<<eof>> | IDENTIFIER | LINE_TERMINATOR | RIGHT_BRACE | FROM | LEFT_BRACKET | SEMICOLON | WHITE_SPACE | AND | ORDER | IS | OR | COMMA | RIGHT_PAREN | IN | RIGHT_DOUBLE_BRACE | comp_op)

group_by_clause ::= GROUP BY [ set_quantifier ] grouping_element_list

grouping_element_list ::= grouping_element [ { COMMA grouping_element }* ]

grouping_element ::= ordinary_grouping_set

ordinary_grouping_set ::= grouping_column_reference | LEFT_PAREN grouping_column_reference_list RIGHT_PAREN

grouping_column_reference ::= value_expression

grouping_column_reference_list ::= grouping_column_reference [ { COMMA grouping_column_reference }* ]
