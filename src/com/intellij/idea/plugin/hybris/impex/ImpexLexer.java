// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Impex.flex

/*
 * This file is part of "hybris integration" plugin for Intellij IDEA.
 * Copyright (C) 2014-2016 Alexander Bartash <AlexanderBartash@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

package com.intellij.idea.plugin.hybris.impex;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.idea.plugin.hybris.impex.psi.ImpexTypes;
import com.intellij.psi.TokenType;
import com.intellij.psi.CustomHighlighterTokenType;


class ImpexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_MACRO_VALUE = 2;
  public static final int MACRO_DECLARATION = 4;
  public static final int HEADER_TYPE = 6;
  public static final int HEADER_LINE = 8;
  public static final int FIELD_VALUE = 10;
  public static final int BEAN_SHELL = 12;
  public static final int MODYFIERS_BLOCK = 14;
  public static final int WAITING_ATTR_OR_PARAM_VALUE = 16;
  public static final int HEADER_PARAMETERS = 18;
  public static final int MACRO_USAGE = 20;
  public static final int MACRO_CONFIG_USAGE = 22;
  public static final int WAITING_MACRO_CONFIG_USAGE = 24;
  public static final int USER_RIGHTS = 26;
  public static final int USER_RIGHTS_HEADER_LINE = 28;
  public static final int USER_RIGHTS_VALUE_LINE = 30;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10,  9,  9, 11, 11, 12, 12, 13, 13, 14, 14
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\0\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\0\1\15\1\16\1\17\1\20\1\21\12\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\0\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\2\42\1\43\1\44\1\45\1\46\1\47\1\42\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\42\1\56\1\42"+
    "\1\57\1\0\1\60\1\0\1\61\1\0\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\2\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\42\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\42\1\56\1\42\1\0"+
    "\1\62\10\0\1\3\252\0\2\63\115\0\1\64\u01a8\0"+
    "\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\10\0\1\2\1\3\2\4\1\2\1\5"+
    "\1\2\1\6\1\7\3\6\1\2\4\10\1\11\1\12"+
    "\1\10\1\13\1\10\1\14\10\10\1\15\1\16\1\10"+
    "\1\17\1\20\2\2\1\21\1\22\1\23\1\24\1\2"+
    "\1\25\1\26\4\27\1\30\2\27\1\14\1\31\1\32"+
    "\4\27\1\33\1\1\1\3\1\1\1\2\1\34\1\35"+
    "\1\36\1\37\5\40\1\41\1\14\2\40\1\2\2\42"+
    "\2\43\2\44\10\2\1\45\1\46\1\47\1\50\1\0"+
    "\1\51\1\5\1\52\4\53\1\0\3\6\1\0\2\54"+
    "\1\0\1\55\1\14\2\10\1\0\1\56\5\10\1\0"+
    "\2\53\1\57\1\0\1\60\1\0\1\61\2\0\2\27"+
    "\1\0\1\1\1\51\2\53\1\40\1\55\3\40\2\62"+
    "\14\0\1\63\3\53\1\0\1\6\1\0\2\6\2\54"+
    "\1\55\1\0\1\14\1\0\2\10\1\0\3\10\2\53"+
    "\2\0\1\14\2\27\1\1\2\53\1\55\1\40\1\14"+
    "\2\40\2\62\12\0\1\64\3\53\1\0\1\6\1\0"+
    "\2\6\1\54\2\0\1\10\1\0\1\10\1\65\1\10"+
    "\1\53\1\66\1\65\1\53\1\65\1\62\10\0\3\53"+
    "\1\0\1\6\1\0\2\6\1\54\1\0\1\65\1\10"+
    "\1\0\2\10\2\53\1\62\6\0\1\53\1\0\1\53"+
    "\1\0\2\67\1\70\1\71\2\0\2\72\1\73\1\74"+
    "\1\0\1\40\2\0\1\64\4\0\1\53\1\0\1\6"+
    "\3\0\1\10\2\0\1\40\6\0\1\53\1\0\1\6"+
    "\2\0\1\75\1\10\2\0\1\40\5\0\3\53\1\0"+
    "\1\6\1\0\1\10\5\0\2\53\1\0\1\6\1\0"+
    "\1\10\5\0\2\53\1\0\1\6\1\0\1\10\4\0"+
    "\2\53\1\0\1\6\1\0\1\10\4\0\1\53\1\0"+
    "\2\76\2\77\2\0\1\53\2\0\1\53\1\0\1\100"+
    "\1\53\1\0\2\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[392];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b"+
    "\0\u0350\0\u031b\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u031b"+
    "\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u031b\0\u03ba\0\u0562\0\u0597"+
    "\0\u031b\0\u031b\0\u05cc\0\u031b\0\u0601\0\u0636\0\u066b\0\u06a0"+
    "\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de\0\u031b\0\u031b"+
    "\0\u0813\0\u031b\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u031b\0\u031b"+
    "\0\u031b\0\u06a0\0\u031b\0\u031b\0\u031b\0\u03ba\0\u087d\0\u05cc"+
    "\0\u031b\0\u091c\0\u0951\0\u0986\0\u031b\0\u031b\0\u066b\0\u09bb"+
    "\0\u09f0\0\u0a25\0\u031b\0\u0a5a\0\u0a8f\0\u0ac4\0\u0597\0\u031b"+
    "\0\u0af9\0\u031b\0\u031b\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02"+
    "\0\u031b\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u031b\0\u0d0b\0\u031b"+
    "\0\u0d40\0\u031b\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e"+
    "\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u031b\0\u0f87\0\u0f87\0\u03ba"+
    "\0\u0fbc\0\u0ff1\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa"+
    "\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2"+
    "\0\u12d7\0\u130c\0\u1341\0\u1376\0\u06a0\0\u13ab\0\u13e0\0\u1415"+
    "\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u08b2\0\u1553\0\u031b"+
    "\0\u1588\0\u031b\0\u15bd\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6"+
    "\0\u16fb\0\u1730\0\u1765\0\u179a\0\u17cf\0\u1804\0\u1839\0\u186e"+
    "\0\u18a3\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac\0\u19e1\0\u1a16"+
    "\0\u1a4b\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54\0\u031b\0\u1b89"+
    "\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31"+
    "\0\u1d66\0\u031b\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4"+
    "\0\u1ed9\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\u0951\0\u15f2"+
    "\0\u2017\0\u204c\0\u2081\0\u20b6\0\u20eb\0\u0b2e\0\u2120\0\u1804"+
    "\0\u2155\0\u218a\0\u21bf\0\u21f4\0\u2229\0\u225e\0\u2293\0\u22c8"+
    "\0\u22fd\0\u2332\0\u2367\0\u239c\0\u23d1\0\u2406\0\u031b\0\u243b"+
    "\0\u2470\0\u24a5\0\u24da\0\u250f\0\u2544\0\u2579\0\u25ae\0\u25e3"+
    "\0\u2618\0\u264d\0\u2682\0\u26b7\0\u26ec\0\u06d5\0\u2721\0\u2756"+
    "\0\u1fe2\0\u09bb\0\u278b\0\u0b2e\0\u27c0\0\u27f5\0\u282a\0\u285f"+
    "\0\u2894\0\u28c9\0\u28fe\0\u2933\0\u2968\0\u299d\0\u29d2\0\u2a07"+
    "\0\u2a3c\0\u2a71\0\u2aa6\0\u2adb\0\u2b10\0\u2b45\0\u2b7a\0\u031b"+
    "\0\u2baf\0\u2be4\0\u2c19\0\u2c4e\0\u2c83\0\u2cb8\0\u2ced\0\u2d22"+
    "\0\u2d57\0\u2d8c\0\u2dc1\0\u2df6\0\u2e2b\0\u2e60\0\u2e95\0\u2eca"+
    "\0\u2eff\0\u2f34\0\u2f69\0\u0459\0\u0459\0\u2f9e\0\u2fd3\0\u3008"+
    "\0\u303d\0\u06d5\0\u06d5\0\u3072\0\u30a7\0\u30dc\0\u3111\0\u3146"+
    "\0\u317b\0\u31b0\0\u31e5\0\u321a\0\u324f\0\u3284\0\u32b9\0\u32ee"+
    "\0\u3323\0\u3358\0\u338d\0\u33c2\0\u33f7\0\u342c\0\u3461\0\u3496"+
    "\0\u34cb\0\u3500\0\u3535\0\u356a\0\u359f\0\u35d4\0\u3609\0\u363e"+
    "\0\u1d31\0\u031b\0\u3673\0\u36a8\0\u1f78\0\u20b6\0\u21bf\0\u36dd"+
    "\0\u3712\0\u3747\0\u377c\0\u37b1\0\u37e6\0\u381b\0\u3850\0\u3885"+
    "\0\u38ba\0\u38ef\0\u3924\0\u3959\0\u398e\0\u39c3\0\u39f8\0\u3a2d"+
    "\0\u3a62\0\u3a97\0\u3acc\0\u3b01\0\u3b36\0\u3b6b\0\u3ba0\0\u3bd5"+
    "\0\u3c0a\0\u3c3f\0\u3c74\0\u3ca9\0\u3cde\0\u3d13\0\u3d48\0\u3d7d"+
    "\0\u3db2\0\u3de7\0\u3e1c\0\u3e51\0\u3e86\0\u3ebb\0\u3ef0\0\u3f25"+
    "\0\u3f5a\0\u3f8f\0\u3fc4\0\u3ff9\0\u402e\0\u4063\0\u4098\0\u40cd"+
    "\0\u0459\0\u031b\0\u06d5\0\u031b\0\u4102\0\u4137\0\u416c\0\u41a1"+
    "\0\u41d6\0\u420b\0\u4240\0\u031b\0\u4275\0\u42aa\0\u105b\0\u031b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[392];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\20\1\21\1\22\1\0\1\23\1\24\1\25\1\26"+
    "\7\20\1\27\2\20\1\27\1\20\1\30\4\20\10\27"+
    "\1\31\6\27\1\32\2\27\1\33\3\27\2\20\1\27"+
    "\1\20\1\34\1\20\1\35\1\21\1\22\1\35\1\23"+
    "\1\36\1\35\1\37\2\35\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\2\35\1\46\2\35\1\47\2\35\1\50"+
    "\5\51\1\52\2\51\1\53\6\51\1\54\1\51\1\55"+
    "\1\56\3\51\1\57\1\60\1\51\1\35\1\61\1\35"+
    "\1\20\1\21\1\22\1\0\1\23\21\20\1\62\37\20"+
    "\1\21\1\22\1\0\1\23\12\20\1\63\2\20\1\63"+
    "\6\20\26\63\2\20\1\63\4\20\1\21\1\22\1\0"+
    "\1\23\2\20\1\64\1\20\1\65\1\20\1\41\1\42"+
    "\1\20\1\44\1\66\1\67\1\20\1\66\1\20\1\70"+
    "\1\20\1\71\1\20\1\72\26\66\1\73\1\60\1\66"+
    "\1\74\2\20\1\75\1\21\1\22\1\75\1\23\1\76"+
    "\1\75\1\77\5\75\1\100\1\101\1\102\1\75\1\103"+
    "\1\104\1\105\1\106\1\107\3\75\5\110\1\111\13\110"+
    "\1\112\4\110\2\75\1\110\1\113\2\75\1\114\1\115"+
    "\1\22\1\114\1\23\1\116\57\114\1\20\1\21\1\22"+
    "\1\0\1\23\1\24\1\20\1\64\2\20\1\117\3\20"+
    "\1\120\2\121\1\20\1\121\3\20\1\71\2\20\26\121"+
    "\1\20\1\122\1\121\1\123\2\20\1\124\1\21\1\22"+
    "\1\124\1\23\1\125\1\124\1\126\2\124\1\127\2\124"+
    "\1\130\1\131\1\130\2\124\1\132\13\124\1\133\13\124"+
    "\1\134\5\124\1\122\4\124\1\20\1\21\3\0\61\20"+
    "\1\21\1\22\1\0\1\23\2\20\1\135\55\20\1\136"+
    "\1\21\1\22\1\0\1\23\2\136\1\137\55\136\1\20"+
    "\1\21\1\140\1\0\1\141\61\20\1\21\1\142\1\0"+
    "\1\143\2\20\1\144\14\20\1\70\6\20\1\145\1\146"+
    "\7\20\1\147\2\20\1\150\1\151\1\20\1\152\1\153"+
    "\12\20\1\21\1\142\1\0\1\143\1\20\1\154\1\144"+
    "\5\20\1\155\1\44\1\156\1\67\1\20\1\157\1\20"+
    "\1\106\4\20\26\157\2\20\1\157\3\20\66\0\1\21"+
    "\65\0\1\22\62\0\5\160\1\161\57\160\2\162\1\0"+
    "\1\162\1\0\3\162\1\163\54\162\13\0\2\164\2\0"+
    "\1\165\1\164\1\0\1\165\6\0\2\165\1\166\15\165"+
    "\1\167\5\165\2\0\1\165\2\0\1\170\17\0\1\27"+
    "\2\0\1\27\6\0\26\27\2\0\1\27\22\0\1\27"+
    "\2\0\1\27\6\0\14\27\1\171\11\27\2\0\1\27"+
    "\22\0\1\27\2\0\1\27\6\0\4\27\1\172\21\27"+
    "\2\0\1\27\22\0\1\27\2\0\1\27\6\0\16\27"+
    "\1\173\7\27\2\0\1\27\50\0\1\174\36\0\1\175"+
    "\2\0\1\175\6\0\2\175\1\176\23\175\2\0\1\175"+
    "\3\0\2\177\1\0\1\177\1\0\5\177\1\200\52\177"+
    "\22\0\1\201\61\0\1\51\1\202\1\0\1\46\6\0"+
    "\26\51\2\0\1\51\22\0\1\51\1\203\1\0\1\46"+
    "\6\0\26\51\2\0\1\51\44\0\1\204\21\0\1\204"+
    "\20\0\1\205\2\0\1\205\6\0\26\205\2\0\1\205"+
    "\22\0\1\51\1\202\1\0\1\51\6\0\26\51\2\0"+
    "\1\51\22\0\1\51\1\202\1\0\1\51\6\0\1\206"+
    "\25\51\2\0\1\51\22\0\1\51\1\202\1\0\1\51"+
    "\6\0\14\51\1\207\11\51\2\0\1\51\22\0\1\51"+
    "\1\202\1\0\1\51\6\0\4\51\1\210\21\51\2\0"+
    "\1\51\22\0\1\51\1\202\1\0\1\51\6\0\17\51"+
    "\1\211\6\51\2\0\1\51\22\0\1\51\1\202\1\0"+
    "\1\51\6\0\16\51\1\212\7\51\2\0\1\51\50\0"+
    "\1\213\36\0\1\63\2\0\1\63\6\0\26\63\2\0"+
    "\1\63\22\0\1\214\2\0\1\214\6\0\2\214\1\215"+
    "\23\214\2\0\1\214\22\0\1\216\2\0\1\216\6\0"+
    "\26\216\2\0\1\216\4\0\1\217\11\0\1\220\3\0"+
    "\1\66\1\221\1\0\1\66\6\0\26\66\2\0\1\66"+
    "\22\0\1\110\2\0\1\104\4\0\1\222\1\0\26\110"+
    "\2\0\1\110\22\0\1\223\2\0\1\223\6\0\26\223"+
    "\2\0\1\223\22\0\1\110\1\224\1\0\1\104\6\0"+
    "\26\110\2\0\1\110\22\0\1\110\2\0\1\110\6\0"+
    "\26\110\2\0\1\110\22\0\1\110\2\0\1\110\6\0"+
    "\1\225\25\110\2\0\1\110\22\0\1\110\2\0\1\110"+
    "\6\0\17\110\1\226\6\110\2\0\1\110\3\0\2\114"+
    "\1\0\1\114\1\0\61\114\1\115\1\0\1\114\1\0"+
    "\60\114\2\116\1\227\1\116\1\227\1\230\57\116\17\0"+
    "\2\121\1\0\1\121\6\0\26\121\2\0\1\121\3\0"+
    "\1\124\2\0\1\124\1\0\11\124\1\0\41\124\1\0"+
    "\4\124\1\125\2\160\1\125\1\160\1\231\10\125\1\160"+
    "\41\125\1\160\4\125\1\124\2\0\1\124\1\0\11\124"+
    "\1\0\1\232\2\124\1\232\6\124\2\232\1\233\23\232"+
    "\1\124\1\0\1\232\3\124\1\234\1\177\1\0\1\234"+
    "\1\0\5\234\1\235\3\234\1\177\41\234\1\177\4\234"+
    "\1\124\2\0\1\124\1\0\11\124\1\0\3\124\1\132"+
    "\35\124\1\0\5\124\2\0\1\124\1\0\11\124\1\0"+
    "\1\124\1\236\1\124\1\132\35\124\1\0\5\124\2\0"+
    "\1\124\1\0\11\124\1\0\12\124\1\237\26\124\1\0"+
    "\5\124\2\0\1\124\1\0\11\124\1\0\31\124\1\240"+
    "\7\124\1\0\4\124\17\0\1\241\2\0\1\241\6\0"+
    "\2\241\1\242\23\241\2\0\1\241\36\0\1\243\33\0"+
    "\1\140\64\0\1\142\117\0\1\244\67\0\1\245\7\0"+
    "\1\246\51\0\1\247\64\0\1\250\60\0\1\251\70\0"+
    "\1\252\60\0\1\253\24\0\1\254\47\0\1\255\21\0"+
    "\1\255\1\0\2\154\1\0\1\154\1\0\60\154\17\0"+
    "\1\157\2\0\1\157\6\0\26\157\2\0\1\157\10\0"+
    "\1\160\57\0\2\162\1\0\1\162\1\0\60\162\13\0"+
    "\2\164\2\0\2\164\1\0\1\164\6\0\26\164\2\0"+
    "\1\164\4\0\1\256\11\0\2\164\2\0\1\165\1\164"+
    "\1\0\1\165\3\0\1\257\2\0\2\165\1\260\23\165"+
    "\2\0\1\165\4\0\1\256\11\0\2\164\2\0\1\165"+
    "\1\164\1\0\1\165\3\0\1\257\2\0\2\165\1\260"+
    "\12\165\1\261\10\165\2\0\1\165\4\0\1\256\11\0"+
    "\2\164\2\0\1\165\1\164\1\0\1\165\3\0\1\257"+
    "\2\0\2\165\1\260\16\165\1\262\4\165\2\0\1\165"+
    "\55\0\1\263\31\0\1\27\2\0\1\27\6\0\20\27"+
    "\1\264\5\27\2\0\1\27\2\0\1\265\17\0\1\27"+
    "\2\0\1\27\6\0\13\27\1\266\12\27\2\0\1\27"+
    "\22\0\1\27\2\0\1\27\6\0\3\27\1\267\22\27"+
    "\2\0\1\27\54\0\1\265\12\0\1\265\17\0\1\175"+
    "\1\270\1\0\1\175\6\0\26\175\2\0\1\175\22\0"+
    "\1\175\1\270\1\0\1\175\6\0\15\175\1\271\10\175"+
    "\2\0\1\175\3\0\2\177\1\0\1\177\1\0\5\177"+
    "\1\272\52\177\12\0\1\273\72\0\1\224\1\0\1\201"+
    "\61\0\1\51\2\0\1\51\6\0\26\51\2\0\1\51"+
    "\22\0\1\51\2\0\1\274\6\0\26\51\2\0\1\51"+
    "\42\0\1\275\44\0\1\51\1\202\1\0\1\51\6\0"+
    "\12\51\1\276\13\51\2\0\1\51\22\0\1\51\1\202"+
    "\1\0\1\51\6\0\20\51\1\277\5\51\2\0\1\51"+
    "\2\0\1\300\17\0\1\51\1\202\1\0\1\51\6\0"+
    "\13\51\1\301\12\51\2\0\1\51\22\0\1\51\1\202"+
    "\1\0\1\51\6\0\22\51\1\302\3\51\2\0\1\51"+
    "\22\0\1\51\1\202\1\0\1\51\6\0\3\51\1\303"+
    "\22\51\2\0\1\51\54\0\1\300\12\0\1\300\17\0"+
    "\1\214\1\304\1\0\1\214\6\0\26\214\2\0\1\214"+
    "\22\0\1\214\1\304\1\0\1\214\6\0\15\214\1\305"+
    "\10\214\2\0\1\214\4\0\1\217\11\0\1\220\70\0"+
    "\1\66\2\0\1\66\6\0\26\66\2\0\1\66\22\0"+
    "\1\223\1\306\1\307\1\223\6\0\26\223\2\0\1\223"+
    "\25\0\1\310\61\0\1\110\2\0\1\110\6\0\12\110"+
    "\1\311\13\110\2\0\1\110\22\0\1\110\2\0\1\110"+
    "\6\0\22\110\1\312\3\110\2\0\1\110\3\0\5\227"+
    "\1\313\57\227\2\114\1\0\1\114\1\0\1\116\57\114"+
    "\1\124\2\0\1\124\1\0\1\125\10\124\1\0\41\124"+
    "\1\0\5\124\2\0\1\124\1\0\11\124\1\0\1\232"+
    "\1\314\1\124\1\232\6\124\26\232\1\124\1\0\1\232"+
    "\4\124\2\0\1\124\1\0\11\124\1\0\1\232\1\314"+
    "\1\124\1\232\6\124\15\232\1\315\10\232\1\124\1\0"+
    "\1\232\3\124\1\234\1\177\1\0\1\234\1\0\5\234"+
    "\1\316\3\234\1\177\41\234\1\177\4\234\1\124\2\0"+
    "\1\124\1\0\5\124\1\317\3\124\1\0\41\124\1\0"+
    "\5\124\2\0\1\124\1\0\11\124\1\0\3\124\1\320"+
    "\35\124\1\0\5\124\2\0\1\124\1\0\11\124\1\0"+
    "\24\124\1\321\14\124\1\0\5\124\2\0\1\124\1\0"+
    "\11\124\1\0\34\124\1\322\4\124\1\0\4\124\17\0"+
    "\1\241\1\323\1\0\1\241\6\0\26\241\2\0\1\241"+
    "\22\0\1\241\1\323\1\0\1\241\6\0\15\241\1\324"+
    "\10\241\2\0\1\241\51\0\1\325\63\0\1\326\50\0"+
    "\1\327\70\0\1\330\72\0\1\331\65\0\1\332\71\0"+
    "\1\333\12\0\1\333\31\0\1\255\12\0\1\334\70\0"+
    "\1\335\63\0\1\336\51\0\1\337\31\0\1\256\24\0"+
    "\1\257\37\0\1\256\11\0\2\164\2\0\1\165\1\164"+
    "\1\0\1\165\3\0\1\257\2\0\2\165\1\260\12\165"+
    "\1\340\10\165\2\0\1\165\4\0\1\256\11\0\2\164"+
    "\2\0\1\165\1\164\1\0\1\165\3\0\1\257\2\0"+
    "\2\165\1\260\11\165\1\341\11\165\2\0\1\165\4\0"+
    "\1\256\11\0\2\164\2\0\1\165\1\164\1\0\1\165"+
    "\3\0\1\257\2\0\1\342\1\165\1\260\23\165\2\0"+
    "\1\165\34\0\1\343\52\0\1\27\2\0\1\27\6\0"+
    "\4\27\1\344\21\27\2\0\1\27\40\0\1\345\46\0"+
    "\1\27\2\0\1\27\6\0\15\27\1\346\10\27\2\0"+
    "\1\27\22\0\1\27\2\0\1\27\6\0\1\347\25\27"+
    "\2\0\1\27\22\0\1\175\2\0\1\175\6\0\26\175"+
    "\2\0\1\175\22\0\1\175\1\270\1\0\1\175\6\0"+
    "\14\175\1\350\11\175\2\0\1\175\15\0\1\272\71\0"+
    "\1\51\1\202\1\0\1\274\6\0\26\51\2\0\1\51"+
    "\50\0\1\351\36\0\1\51\1\202\1\0\1\51\6\0"+
    "\20\51\1\302\5\51\2\0\1\51\2\0\1\352\17\0"+
    "\1\51\1\202\1\0\1\51\6\0\4\51\1\353\21\51"+
    "\2\0\1\51\40\0\1\354\46\0\1\51\1\202\1\0"+
    "\1\51\6\0\15\51\1\355\10\51\2\0\1\51\22\0"+
    "\1\51\1\202\1\0\1\51\6\0\4\51\1\356\21\51"+
    "\2\0\1\51\22\0\1\51\1\202\1\0\1\51\6\0"+
    "\1\357\25\51\2\0\1\51\22\0\1\214\2\0\1\214"+
    "\6\0\26\214\2\0\1\214\22\0\1\214\1\304\1\0"+
    "\1\214\6\0\14\214\1\360\11\214\2\0\1\214\22\0"+
    "\1\361\2\0\1\361\6\0\26\361\2\0\1\361\22\0"+
    "\1\110\2\0\1\110\6\0\20\110\1\312\5\110\2\0"+
    "\1\110\2\0\1\352\17\0\1\110\2\0\1\110\6\0"+
    "\4\110\1\362\21\110\2\0\1\110\10\0\1\227\57\0"+
    "\1\124\2\0\1\124\1\0\11\124\1\0\1\232\2\124"+
    "\1\232\6\124\26\232\1\124\1\0\1\232\4\124\2\0"+
    "\1\124\1\0\11\124\1\0\1\232\1\314\1\124\1\232"+
    "\6\124\14\232\1\363\11\232\1\124\1\0\1\232\4\124"+
    "\2\0\1\124\1\0\5\124\1\316\3\124\1\0\41\124"+
    "\1\0\5\124\2\0\1\124\1\0\11\124\1\0\32\124"+
    "\1\322\6\124\1\0\3\124\1\322\1\124\2\0\1\124"+
    "\1\0\11\124\1\0\16\124\1\364\22\124\1\0\4\124"+
    "\17\0\1\241\2\0\1\241\6\0\26\241\2\0\1\241"+
    "\22\0\1\241\1\323\1\0\1\241\6\0\14\241\1\365"+
    "\11\241\2\0\1\241\50\0\1\366\53\0\1\367\75\0"+
    "\1\370\50\0\1\371\70\0\1\371\61\0\1\372\103\0"+
    "\1\373\12\0\1\373\46\0\1\374\55\0\1\375\62\0"+
    "\1\337\30\0\1\256\11\0\2\164\2\0\1\165\1\164"+
    "\1\0\1\165\3\0\1\257\2\0\2\165\1\260\11\165"+
    "\1\376\11\165\2\0\1\165\4\0\1\256\11\0\2\164"+
    "\2\0\1\165\1\164\1\0\1\165\3\0\1\257\2\0"+
    "\2\165\1\260\2\165\1\377\20\165\2\0\1\165\4\0"+
    "\1\256\11\0\2\164\2\0\1\165\1\164\1\0\1\165"+
    "\3\0\1\257\2\0\2\165\1\260\14\165\1\u0100\6\165"+
    "\2\0\1\165\53\0\1\u0101\33\0\1\27\2\0\1\27"+
    "\6\0\17\27\1\u0102\6\27\2\0\1\27\53\0\1\u0103"+
    "\33\0\1\27\2\0\1\27\6\0\23\27\1\u0104\2\27"+
    "\2\0\1\27\22\0\1\27\2\0\1\27\6\0\21\27"+
    "\1\u0105\4\27\2\0\1\27\22\0\1\175\1\270\1\0"+
    "\1\175\6\0\5\175\1\u0106\20\175\2\0\1\175\51\0"+
    "\1\u0107\53\0\1\u0108\46\0\1\51\1\202\1\0\1\51"+
    "\6\0\17\51\1\u0109\6\51\2\0\1\51\53\0\1\u010a"+
    "\33\0\1\51\1\202\1\0\1\51\6\0\23\51\1\u010b"+
    "\2\51\2\0\1\51\22\0\1\51\1\202\1\0\1\51"+
    "\6\0\21\51\1\u010c\4\51\2\0\1\51\22\0\1\214"+
    "\1\304\1\0\1\214\6\0\5\214\1\u010d\20\214\2\0"+
    "\1\214\3\0\1\124\2\0\1\124\1\0\11\124\1\0"+
    "\1\232\1\314\1\124\1\232\6\124\5\232\1\u010e\20\232"+
    "\1\124\1\0\1\232\3\124\17\0\1\241\1\323\1\0"+
    "\1\241\6\0\5\241\1\u010f\20\241\2\0\1\241\41\0"+
    "\1\u0110\107\0\1\u0111\42\0\1\u0112\77\0\1\336\47\0"+
    "\1\u0113\104\0\1\u0114\63\0\1\336\45\0\1\u0115\30\0"+
    "\1\256\11\0\2\164\2\0\1\165\1\164\1\0\1\165"+
    "\3\0\1\257\2\0\2\165\1\260\2\165\1\u0116\20\165"+
    "\2\0\1\165\4\0\1\256\11\0\2\164\2\0\1\165"+
    "\1\164\1\0\1\165\3\0\1\257\2\0\2\165\1\260"+
    "\23\165\2\0\1\165\1\0\1\u0117\2\0\1\256\11\0"+
    "\2\164\2\0\1\165\1\164\1\0\1\165\3\0\1\257"+
    "\2\0\2\165\1\260\16\165\1\u0118\4\165\2\0\1\165"+
    "\55\0\1\u0119\31\0\1\27\2\0\1\27\6\0\21\27"+
    "\1\u011a\4\27\2\0\1\27\55\0\1\u011b\31\0\1\27"+
    "\2\0\1\27\6\0\4\27\1\u011c\21\27\2\0\1\27"+
    "\22\0\1\27\2\0\1\27\6\0\4\27\1\u011d\21\27"+
    "\2\0\1\27\22\0\1\175\1\270\1\0\1\175\6\0"+
    "\26\175\2\0\1\175\1\0\1\u011e\51\0\1\u011f\33\0"+
    "\1\51\1\202\1\0\1\51\6\0\21\51\1\u0120\4\51"+
    "\2\0\1\51\55\0\1\u0121\31\0\1\51\1\202\1\0"+
    "\1\51\6\0\4\51\1\u0122\21\51\2\0\1\51\22\0"+
    "\1\51\1\202\1\0\1\51\6\0\4\51\1\u0123\21\51"+
    "\2\0\1\51\22\0\1\214\1\304\1\0\1\214\6\0"+
    "\26\214\2\0\1\214\1\0\1\u0124\1\0\1\124\2\0"+
    "\1\124\1\0\11\124\1\0\1\232\1\314\1\124\1\232"+
    "\6\124\26\232\1\124\1\0\1\232\1\124\1\u0125\1\124"+
    "\17\0\1\241\1\323\1\0\1\241\6\0\26\241\2\0"+
    "\1\241\1\0\1\u0126\42\0\1\u0126\21\0\1\u0126\54\0"+
    "\1\u0127\46\0\1\u0128\77\0\1\u0129\62\0\1\u012a\70\0"+
    "\1\337\13\0\1\256\11\0\2\164\2\0\1\165\1\164"+
    "\1\0\1\165\3\0\1\257\2\0\2\165\1\260\23\165"+
    "\2\0\1\165\1\0\1\u012b\40\0\1\u012c\26\0\1\256"+
    "\11\0\2\164\2\0\1\165\1\164\1\0\1\165\3\0"+
    "\1\257\2\0\2\165\1\260\23\165\2\0\1\u012d\64\0"+
    "\1\u012e\22\0\1\27\2\0\1\27\6\0\26\27\2\0"+
    "\1\u012f\64\0\1\u0130\42\0\1\u0131\62\0\1\u0132\46\0"+
    "\1\51\1\202\1\0\1\51\6\0\26\51\2\0\1\u0133"+
    "\64\0\1\u0134\42\0\1\u0135\25\0\1\124\2\0\1\124"+
    "\1\0\11\124\1\0\20\124\1\u0136\20\124\1\0\4\124"+
    "\37\0\1\u0137\76\0\1\u0138\12\0\1\u0138\61\0\1\u0139"+
    "\51\0\1\u013a\66\0\1\255\53\0\1\u013b\44\0\1\u013c"+
    "\46\0\1\256\11\0\2\164\2\0\1\165\1\164\1\0"+
    "\1\165\3\0\1\257\2\0\2\165\1\260\17\165\1\u013d"+
    "\3\165\2\0\1\165\56\0\1\u013e\30\0\1\27\2\0"+
    "\1\27\6\0\22\27\1\u013f\3\27\2\0\1\27\56\0"+
    "\1\u0140\30\0\1\u0141\74\0\1\u0142\54\0\1\51\1\202"+
    "\1\0\1\51\6\0\22\51\1\u0143\3\51\2\0\1\51"+
    "\56\0\1\u0144\30\0\1\u0145\45\0\1\124\2\0\1\124"+
    "\1\0\11\124\1\0\1\u0146\40\124\1\0\4\124\17\0"+
    "\1\u0147\102\0\1\u0148\76\0\1\u0149\53\0\1\u014a\45\0"+
    "\1\u014b\46\0\1\256\15\0\1\u014c\2\0\1\u014c\3\0"+
    "\1\257\2\0\2\u014c\1\u014d\23\u014c\2\0\1\u014c\4\0"+
    "\1\256\11\0\2\164\2\0\1\165\1\164\1\0\1\165"+
    "\3\0\1\257\2\0\2\165\1\260\15\165\1\u014e\5\165"+
    "\2\0\1\165\2\0\1\u014f\51\0\1\u014f\12\0\1\u014f"+
    "\17\0\1\27\2\0\1\27\6\0\16\27\1\u0150\7\27"+
    "\2\0\1\27\52\0\1\u0151\34\0\1\51\1\202\1\0"+
    "\1\51\6\0\16\51\1\u0152\7\51\2\0\1\51\52\0"+
    "\1\u0153\65\0\1\u0154\51\0\1\u0155\66\0\1\u0156\26\0"+
    "\1\256\15\0\1\u014b\2\0\1\u014b\3\0\1\257\2\0"+
    "\2\u014b\1\u0157\23\u014b\2\0\1\u014b\4\0\1\256\15\0"+
    "\1\u014c\1\304\1\0\1\u014c\3\0\1\257\2\0\2\u014c"+
    "\1\u014d\23\u014c\2\0\1\u014c\4\0\1\256\15\0\1\u014c"+
    "\1\304\1\0\1\u014c\3\0\1\257\2\0\2\u014c\1\u014d"+
    "\12\u014c\1\u0158\10\u014c\2\0\1\u014c\4\0\1\256\11\0"+
    "\2\164\2\0\1\165\1\164\1\0\1\165\3\0\1\257"+
    "\2\0\2\165\1\260\1\165\1\u0159\21\165\2\0\1\165"+
    "\40\0\1\u015a\46\0\1\27\2\0\1\27\6\0\3\27"+
    "\1\u015b\22\27\2\0\1\27\37\0\1\u015c\47\0\1\51"+
    "\1\202\1\0\1\51\6\0\3\51\1\u015d\22\51\2\0"+
    "\1\51\37\0\1\u015e\100\0\1\u015f\64\0\1\u0160\64\0"+
    "\1\u0161\15\0\1\256\15\0\1\u014b\2\0\1\u014b\3\0"+
    "\1\257\2\0\2\u014b\1\u0157\12\u014b\1\u0162\10\u014b\2\0"+
    "\1\u014b\4\0\1\256\15\0\1\u014c\1\304\1\0\1\u014c"+
    "\3\0\1\257\2\0\2\u014c\1\u014d\11\u014c\1\u0163\11\u014c"+
    "\2\0\1\u014c\4\0\1\256\11\0\2\164\2\0\1\165"+
    "\1\164\1\0\1\165\3\0\1\257\2\0\2\165\1\260"+
    "\14\165\1\u0164\6\165\2\0\1\165\53\0\1\u0165\33\0"+
    "\1\27\2\0\1\27\6\0\1\u0166\25\27\2\0\1\27"+
    "\34\0\1\u0167\52\0\1\51\1\202\1\0\1\51\6\0"+
    "\1\u0168\25\51\2\0\1\51\34\0\1\u0169\74\0\1\u016a"+
    "\21\0\1\u016a\45\0\1\337\66\0\1\u016b\17\0\1\256"+
    "\15\0\1\u014b\2\0\1\u014b\3\0\1\257\2\0\2\u014b"+
    "\1\u0157\11\u014b\1\u016c\11\u014b\2\0\1\u014b\4\0\1\256"+
    "\15\0\1\u014c\1\304\1\0\1\u014c\3\0\1\257\2\0"+
    "\2\u014c\1\u014d\2\u014c\1\u016d\20\u014c\2\0\1\u014c\4\0"+
    "\1\256\11\0\2\164\2\0\1\165\1\164\1\0\1\165"+
    "\3\0\1\257\2\0\2\165\1\260\14\165\1\u016e\6\165"+
    "\2\0\1\165\53\0\1\u016f\33\0\1\27\2\0\1\27"+
    "\6\0\21\27\1\u0170\4\27\2\0\1\27\55\0\1\u0171"+
    "\31\0\1\51\1\202\1\0\1\51\6\0\21\51\1\u0172"+
    "\4\51\2\0\1\51\55\0\1\u0173\51\0\1\u0174\100\0"+
    "\1\u0175\12\0\1\256\15\0\1\u014b\2\0\1\u014b\3\0"+
    "\1\257\2\0\2\u014b\1\u0157\2\u014b\1\u0176\20\u014b\2\0"+
    "\1\u014b\4\0\1\256\15\0\1\u014c\1\304\1\0\1\u014c"+
    "\3\0\1\257\2\0\2\u014c\1\u014d\23\u014c\2\0\1\u014c"+
    "\1\0\1\u012b\2\0\1\256\11\0\2\164\2\0\1\165"+
    "\1\164\1\0\1\165\3\0\1\257\2\0\2\165\1\260"+
    "\5\165\1\u0177\15\165\2\0\1\165\1\0\1\u0178\42\0"+
    "\1\u0178\21\0\1\u0178\20\0\1\27\2\0\1\27\6\0"+
    "\4\27\1\u0179\21\27\2\0\1\27\40\0\1\u017a\46\0"+
    "\1\51\1\202\1\0\1\51\6\0\4\51\1\u017b\21\51"+
    "\2\0\1\51\40\0\1\u017c\67\0\1\u017d\73\0\1\u017e"+
    "\16\0\1\256\15\0\1\u014b\2\0\1\u014b\3\0\1\257"+
    "\2\0\2\u014b\1\u0157\23\u014b\2\0\1\u014b\1\0\1\u012b"+
    "\2\0\1\256\11\0\2\164\2\0\1\165\1\164\1\0"+
    "\1\165\3\0\1\257\2\0\2\165\1\260\3\165\1\u017f"+
    "\17\165\2\0\1\165\42\0\1\u0180\77\0\1\u0181\63\0"+
    "\1\337\12\0\1\337\1\0\1\256\11\0\2\164\2\0"+
    "\1\165\1\164\1\0\1\165\3\0\1\257\2\0\2\165"+
    "\1\260\4\165\1\u0182\16\165\2\0\1\165\43\0\1\u0183"+
    "\75\0\1\u0184\12\0\1\u0184\1\0\1\256\11\0\2\164"+
    "\2\0\1\165\1\164\1\0\1\165\3\0\1\257\2\0"+
    "\2\165\1\260\16\165\1\u0185\4\165\2\0\1\165\55\0"+
    "\1\u0186\13\0\1\256\11\0\2\164\2\0\1\165\1\164"+
    "\1\0\1\165\3\0\1\257\2\0\2\165\1\260\15\165"+
    "\1\u0187\5\165\2\0\1\165\2\0\1\u0188\51\0\1\u0188"+
    "\12\0\1\u0188";

  private static int [] zzUnpacktrans() {
    int [] result = new int[17119];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\1\10\0\1\11\1\1\1\11\5\1\1\11"+
    "\4\1\1\11\3\1\2\11\1\1\1\11\12\1\2\11"+
    "\1\1\1\11\4\1\3\11\1\1\3\11\3\1\1\11"+
    "\3\1\2\11\4\1\1\11\4\1\1\11\1\1\2\11"+
    "\5\1\1\11\4\1\1\11\1\1\1\11\1\1\1\11"+
    "\12\1\1\11\2\1\1\0\7\1\1\0\3\1\1\0"+
    "\2\1\1\0\4\1\1\0\6\1\1\0\3\1\1\0"+
    "\1\11\1\0\1\11\2\0\2\1\1\0\13\1\14\0"+
    "\1\11\3\1\1\0\1\1\1\0\4\1\1\11\1\0"+
    "\1\1\1\0\2\1\1\0\5\1\2\0\15\1\12\0"+
    "\1\11\3\1\1\0\1\1\1\0\3\1\2\0\1\1"+
    "\1\0\11\1\10\0\3\1\1\0\1\1\1\0\3\1"+
    "\1\0\1\11\1\1\1\0\5\1\6\0\1\1\1\0"+
    "\1\1\1\0\4\1\2\0\4\1\1\0\1\1\2\0"+
    "\1\1\4\0\1\1\1\0\1\1\3\0\1\1\2\0"+
    "\1\1\6\0\1\1\1\0\1\1\2\0\1\11\1\1"+
    "\2\0\1\1\5\0\3\1\1\0\1\1\1\0\1\1"+
    "\5\0\2\1\1\0\1\1\1\0\1\1\5\0\2\1"+
    "\1\0\1\1\1\0\1\1\4\0\2\1\1\0\1\1"+
    "\1\0\1\1\4\0\1\1\1\0\1\1\1\11\1\1"+
    "\1\11\2\0\1\1\2\0\1\1\1\0\1\11\1\1"+
    "\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[392];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ImpexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ImpexTypes.BEAN_SHELL_BODY;
            }
          // fall through
          case 66: break;
          case 2:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 67: break;
          case 3:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 68: break;
          case 4:
            { yybegin(YYINITIAL); return ImpexTypes.CRLF;
            }
          // fall through
          case 69: break;
          case 5:
            { yybegin(YYINITIAL); return ImpexTypes.LINE_COMMENT;
            }
          // fall through
          case 70: break;
          case 6:
            { yybegin(FIELD_VALUE); return ImpexTypes.VALUE_SUBTYPE;
            }
          // fall through
          case 71: break;
          case 7:
            { yybegin(FIELD_VALUE); return ImpexTypes.FIELD_VALUE_SEPARATOR;
            }
          // fall through
          case 72: break;
          case 8:
            { return ImpexTypes.MACRO_VALUE;
            }
          // fall through
          case 73: break;
          case 9:
            { return ImpexTypes.LEFT_ROUND_BRACKET;
            }
          // fall through
          case 74: break;
          case 10:
            { return ImpexTypes.RIGHT_ROUND_BRACKET;
            }
          // fall through
          case 75: break;
          case 11:
            { return ImpexTypes.COMMA;
            }
          // fall through
          case 76: break;
          case 12:
            { return ImpexTypes.DIGIT;
            }
          // fall through
          case 77: break;
          case 13:
            { return ImpexTypes.LEFT_SQUARE_BRACKET;
            }
          // fall through
          case 78: break;
          case 14:
            { return ImpexTypes.RIGHT_SQUARE_BRACKET;
            }
          // fall through
          case 79: break;
          case 15:
            { yybegin(WAITING_MACRO_VALUE); return ImpexTypes.ASSIGN_VALUE;
            }
          // fall through
          case 80: break;
          case 16:
            { yybegin(HEADER_LINE); return ImpexTypes.HEADER_TYPE;
            }
          // fall through
          case 81: break;
          case 17:
            { return ImpexTypes.HEADER_PARAMETER_NAME;
            }
          // fall through
          case 82: break;
          case 18:
            { return ImpexTypes.DOT;
            }
          // fall through
          case 83: break;
          case 19:
            { return ImpexTypes.PARAMETERS_SEPARATOR;
            }
          // fall through
          case 84: break;
          case 20:
            { yybegin(WAITING_ATTR_OR_PARAM_VALUE); return ImpexTypes.ASSIGN_VALUE;
            }
          // fall through
          case 85: break;
          case 21:
            { yybegin(MODYFIERS_BLOCK); return ImpexTypes.LEFT_SQUARE_BRACKET;
            }
          // fall through
          case 86: break;
          case 22:
            { return ImpexTypes.ALTERNATIVE_PATTERN;
            }
          // fall through
          case 87: break;
          case 23:
            { return ImpexTypes.FIELD_VALUE;
            }
          // fall through
          case 88: break;
          case 24:
            { return ImpexTypes.FIELD_LIST_ITEM_SEPARATOR;
            }
          // fall through
          case 89: break;
          case 25:
            { return ImpexTypes.DEFAULT_PATH_DELIMITER;
            }
          // fall through
          case 90: break;
          case 26:
            { return ImpexTypes.FIELD_VALUE_SEPARATOR;
            }
          // fall through
          case 91: break;
          case 27:
            { return ImpexTypes.ALTERNATIVE_MAP_DELIMITER;
            }
          // fall through
          case 92: break;
          case 28:
            { return ImpexTypes.ATTRIBUTE_SEPARATOR;
            }
          // fall through
          case 93: break;
          case 29:
            { return ImpexTypes.ATTRIBUTE_NAME;
            }
          // fall through
          case 94: break;
          case 30:
            { yybegin(HEADER_LINE); return ImpexTypes.RIGHT_SQUARE_BRACKET;
            }
          // fall through
          case 95: break;
          case 31:
            { yybegin(MODYFIERS_BLOCK); return ImpexTypes.ALTERNATIVE_MAP_DELIMITER;
            }
          // fall through
          case 96: break;
          case 32:
            { return ImpexTypes.ATTRIBUTE_VALUE;
            }
          // fall through
          case 97: break;
          case 33:
            { yybegin(MODYFIERS_BLOCK); return ImpexTypes.ATTRIBUTE_SEPARATOR;
            }
          // fall through
          case 98: break;
          case 34:
            { yypushback(yylength()); yybegin(MACRO_USAGE);
            }
          // fall through
          case 99: break;
          case 35:
            { yybegin(USER_RIGHTS_HEADER_LINE); return ImpexTypes.CRLF;
            }
          // fall through
          case 100: break;
          case 36:
            { yybegin(USER_RIGHTS_VALUE_LINE); return ImpexTypes.CRLF;
            }
          // fall through
          case 101: break;
          case 37:
            { return ImpexTypes.LINE_COMMENT;
            }
          // fall through
          case 102: break;
          case 38:
            { return ImpexTypes.PERMISSION_ALLOWED;
            }
          // fall through
          case 103: break;
          case 39:
            { return ImpexTypes.PERMISSION_DENIED;
            }
          // fall through
          case 104: break;
          case 40:
            { return ImpexTypes.USER_RIGHTS_VALUE;
            }
          // fall through
          case 105: break;
          case 41:
            { return ImpexTypes.DOUBLE_STRING;
            }
          // fall through
          case 106: break;
          case 42:
            { yybegin(BEAN_SHELL); return ImpexTypes.BEAN_SHELL_MARKER;
            }
          // fall through
          case 107: break;
          case 43:
            { return ImpexTypes.MACRO_USAGE;
            }
          // fall through
          case 108: break;
          case 44:
            { yypushback(yylength()); yybegin(WAITING_MACRO_CONFIG_USAGE);
            }
          // fall through
          case 109: break;
          case 45:
            { return ImpexTypes.SINGLE_STRING;
            }
          // fall through
          case 110: break;
          case 46:
            { return ImpexTypes.HEADER_SPECIAL_PARAMETER_NAME;
            }
          // fall through
          case 111: break;
          case 47:
            { return ImpexTypes.DOCUMENT_ID;
            }
          // fall through
          case 112: break;
          case 48:
            { yybegin(HEADER_LINE);
                                                              yypushback(1);
                                                              return ImpexTypes.FUNCTION;
            }
          // fall through
          case 113: break;
          case 49:
            { return ImpexTypes.DEFAULT_KEY_VALUE_DELIMITER;
            }
          // fall through
          case 114: break;
          case 50:
            { yybegin(WAITING_MACRO_VALUE); return ImpexTypes.MACRO_USAGE;
            }
          // fall through
          case 115: break;
          case 51:
            { yybegin(MACRO_DECLARATION);
                                                              /* Push back '='. */
                                                              yypushback(1);
                                                              /* Push back spaces. */
                                                              yypushback(yylength() - yytext().toString().trim().length());
                                                              return ImpexTypes.MACRO_NAME_DECLARATION;
            }
          // fall through
          case 116: break;
          case 52:
            { return ImpexTypes.USER_RIGHTS_HEADER_PARAMETER_NAME;
            }
          // fall through
          case 117: break;
          case 53:
            { return ImpexTypes.BOOLEAN;
            }
          // fall through
          case 118: break;
          case 54:
            { return ImpexTypes.FIELD_VALUE_URL;
            }
          // fall through
          case 119: break;
          case 55:
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_INSERT;
            }
          // fall through
          case 120: break;
          case 56:
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_REMOVE;
            }
          // fall through
          case 121: break;
          case 57:
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_UPDATE;
            }
          // fall through
          case 122: break;
          case 58:
            { return ImpexTypes.HEADER_MODE_INSERT;
            }
          // fall through
          case 123: break;
          case 59:
            { return ImpexTypes.HEADER_MODE_REMOVE;
            }
          // fall through
          case 124: break;
          case 60:
            { return ImpexTypes.HEADER_MODE_UPDATE;
            }
          // fall through
          case 125: break;
          case 61:
            { return ImpexTypes.FIELD_VALUE_IGNORE;
            }
          // fall through
          case 126: break;
          case 62:
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_INSERT_UPDATE;
            }
          // fall through
          case 127: break;
          case 63:
            { return ImpexTypes.HEADER_MODE_INSERT_UPDATE;
            }
          // fall through
          case 128: break;
          case 64:
            { yybegin(YYINITIAL); return ImpexTypes.END_USERRIGHTS;
            }
          // fall through
          case 129: break;
          case 65:
            { yybegin(USER_RIGHTS); return ImpexTypes.START_USERRIGHTS;
            }
          // fall through
          case 130: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
