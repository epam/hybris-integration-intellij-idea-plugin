// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Impex.flex

/*
 * This file is part of "hybris integration" plugin for Intellij IDEA.
 * Copyright (C) 2014-2016 Alexander Bartash <AlexanderBartash@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

package com.intellij.idea.plugin.hybris.impex;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.idea.plugin.hybris.impex.psi.ImpexTypes;
import com.intellij.psi.TokenType;
import com.intellij.psi.CustomHighlighterTokenType;


class ImpexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_MACRO_VALUE = 2;
  public static final int MACRO_DECLARATION = 4;
  public static final int HEADER_TYPE = 6;
  public static final int HEADER_LINE = 8;
  public static final int FIELD_VALUE = 10;
  public static final int BEAN_SHELL = 12;
  public static final int MODIFIERS_BLOCK = 14;
  public static final int WAITING_ATTR_OR_PARAM_VALUE = 16;
  public static final int HEADER_PARAMETERS = 18;
  public static final int MACRO_USAGE = 20;
  public static final int MACRO_CONFIG_USAGE = 22;
  public static final int WAITING_MACRO_CONFIG_USAGE = 24;
  public static final int USER_RIGHTS_START = 26;
  public static final int USER_RIGHTS_END = 28;
  public static final int USER_RIGHTS_HEADER_LINE = 30;
  public static final int USER_RIGHTS_WAIT_FOR_VALUE_LINE = 32;
  public static final int USER_RIGHTS_VALUE_LINE = 34;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10,  9,  9, 11, 11, 12, 12, 13, 13, 14, 14, 
    15, 15, 16, 16
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\2\u2000\1\u2100\7\u2000\1\u2200\1\u2300\1\u2400"+
    "\1\u2000\1\u2500\1\u2600\2\u2000\31\u1100\1\u2700\121\u1100\1\u2800"+
    "\4\u1100\1\u2900\1\u1100\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00"+
    "\1\u2f00\53\u1100\1\u3000\10\u3100\31\u2000\1\u1100\1\u3200\1\u3300"+
    "\1\u1100\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u1100\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u2000\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u2000"+
    "\1\u5000\1\u5100\1\u5200\1\u2000\3\u1100\1\u5300\1\u5400\1\u5500"+
    "\12\u2000\4\u1100\1\u5600\17\u2000\2\u1100\1\u5700\41\u2000\2\u1100"+
    "\1\u5800\1\u5900\2\u2000\1\u5a00\1\u5b00\27\u1100\1\u5c00\2\u1100"+
    "\1\u5d00\45\u2000\1\u1100\1\u5e00\1\u5f00\11\u2000\1\u6000\24\u2000"+
    "\1\u6100\1\u6200\1\u2000\1\u6300\1\u6400\1\u6500\1\u6600\2\u2000"+
    "\1\u6700\5\u2000\1\u6800\1\u6900\1\u6a00\5\u2000\1\u6b00\1\u6c00"+
    "\4\u2000\1\u6d00\2\u2000\1\u6e00\16\u2000\246\u1100\1\u6f00\20\u1100"+
    "\1\u7000\1\u7100\25\u1100\1\u7200\34\u1100\1\u7300\14\u2000\2\u1100"+
    "\1\u7400\u0b06\u2000\1\u2800\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\0\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\2\23\1\26\1\27\3\23\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\57\1\66\1\67\1\70"+
    "\1\71\1\72\1\0\1\73\1\0\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\57\1\66\1\67\1\0"+
    "\1\74\10\0\1\3\32\0\1\75\11\0\1\76\12\0"+
    "\1\76\4\0\1\76\5\0\27\76\1\0\37\76\1\0"+
    "\70\76\2\77\115\76\1\100\u0142\76\4\0\14\76\16\0"+
    "\5\76\7\0\1\76\1\0\1\76\21\0\165\76\1\0"+
    "\2\76\2\0\4\76\1\0\1\76\6\0\1\76\1\0"+
    "\3\76\1\0\1\76\1\0\24\76\1\0\123\76\1\0"+
    "\213\76\1\0\255\76\1\0\46\76\2\0\1\76\6\0"+
    "\51\76\10\0\55\76\1\0\1\76\1\0\2\76\1\0"+
    "\2\76\1\0\1\76\10\0\33\76\4\0\4\76\35\0"+
    "\13\76\5\0\112\76\4\0\146\76\1\0\10\76\2\0"+
    "\12\76\1\0\23\76\2\0\1\76\20\0\73\76\2\0"+
    "\145\76\16\0\66\76\4\0\1\76\2\0\1\76\2\0"+
    "\56\76\22\0\34\76\4\0\13\76\65\0\25\76\1\0"+
    "\10\76\25\0\17\76\1\0\201\76\2\0\12\76\1\0"+
    "\23\76\1\0\10\76\2\0\2\76\2\0\26\76\1\0"+
    "\7\76\1\0\1\76\3\0\4\76\2\0\11\76\2\0"+
    "\2\76\2\0\4\76\10\0\1\76\4\0\2\76\1\0"+
    "\5\76\2\0\14\76\12\0\1\76\1\0\1\76\2\0"+
    "\3\76\1\0\6\76\4\0\2\76\2\0\26\76\1\0"+
    "\7\76\1\0\2\76\1\0\2\76\1\0\2\76\2\0"+
    "\1\76\1\0\5\76\4\0\2\76\2\0\3\76\3\0"+
    "\1\76\7\0\4\76\1\0\1\76\7\0\20\76\13\0"+
    "\3\76\1\0\11\76\1\0\3\76\1\0\26\76\1\0"+
    "\7\76\1\0\2\76\1\0\5\76\2\0\12\76\1\0"+
    "\3\76\1\0\3\76\2\0\1\76\17\0\4\76\2\0"+
    "\12\76\11\0\7\76\1\0\3\76\1\0\10\76\2\0"+
    "\2\76\2\0\26\76\1\0\7\76\1\0\2\76\1\0"+
    "\5\76\2\0\11\76\2\0\2\76\2\0\3\76\10\0"+
    "\2\76\4\0\2\76\1\0\5\76\2\0\12\76\1\0"+
    "\1\76\20\0\2\76\1\0\6\76\3\0\3\76\1\0"+
    "\4\76\3\0\2\76\1\0\1\76\1\0\2\76\3\0"+
    "\2\76\3\0\3\76\3\0\14\76\4\0\5\76\3\0"+
    "\3\76\1\0\4\76\2\0\1\76\6\0\1\76\16\0"+
    "\12\76\20\0\15\76\1\0\3\76\1\0\27\76\1\0"+
    "\20\76\3\0\10\76\1\0\3\76\1\0\4\76\7\0"+
    "\2\76\1\0\3\76\5\0\4\76\2\0\12\76\20\0"+
    "\4\76\1\0\10\76\1\0\3\76\1\0\27\76\1\0"+
    "\12\76\1\0\5\76\2\0\11\76\1\0\3\76\1\0"+
    "\4\76\7\0\2\76\7\0\1\76\1\0\4\76\2\0"+
    "\12\76\1\0\2\76\15\0\4\76\1\0\10\76\1\0"+
    "\3\76\1\0\63\76\1\0\3\76\1\0\5\76\5\0"+
    "\4\76\7\0\5\76\2\0\12\76\12\0\6\76\2\0"+
    "\2\76\1\0\22\76\3\0\30\76\1\0\11\76\1\0"+
    "\1\76\2\0\7\76\3\0\1\76\4\0\6\76\1\0"+
    "\1\76\1\0\10\76\6\0\12\76\2\0\2\76\15\0"+
    "\72\76\5\0\17\76\1\0\12\76\47\0\2\76\1\0"+
    "\1\76\1\0\5\76\1\0\30\76\1\0\1\76\1\0"+
    "\27\76\2\0\5\76\1\0\1\76\1\0\6\76\2\0"+
    "\12\76\2\0\4\76\40\0\1\76\27\0\2\76\6\0"+
    "\12\76\13\0\1\76\1\0\1\76\1\0\1\76\4\0"+
    "\12\76\1\0\44\76\4\0\24\76\1\0\22\76\1\0"+
    "\44\76\11\0\1\76\71\0\112\76\6\0\116\76\2\0"+
    "\46\76\1\0\1\76\5\0\1\76\2\0\53\76\1\0"+
    "\u014d\76\1\0\4\76\2\0\7\76\1\0\1\76\1\0"+
    "\4\76\2\0\51\76\1\0\4\76\2\0\41\76\1\0"+
    "\4\76\2\0\7\76\1\0\1\76\1\0\4\76\2\0"+
    "\17\76\1\0\71\76\1\0\4\76\2\0\103\76\2\0"+
    "\3\76\40\0\20\76\20\0\126\76\2\0\6\76\3\0"+
    "\u016c\76\2\0\21\76\1\75\32\76\5\0\113\76\3\0"+
    "\13\76\7\0\15\76\1\0\7\76\13\0\25\76\13\0"+
    "\24\76\14\0\15\76\1\0\3\76\1\0\2\76\14\0"+
    "\124\76\3\0\1\76\4\0\2\76\2\0\12\76\41\0"+
    "\3\76\2\0\12\76\6\0\131\76\7\0\53\76\5\0"+
    "\106\76\12\0\37\76\1\0\14\76\4\0\14\76\12\0"+
    "\50\76\2\0\5\76\13\0\54\76\4\0\32\76\6\0"+
    "\12\76\46\0\34\76\4\0\77\76\1\0\35\76\2\0"+
    "\13\76\6\0\12\76\15\0\1\76\10\0\17\76\101\0"+
    "\114\76\4\0\12\76\21\0\11\76\14\0\164\76\14\0"+
    "\70\76\10\0\12\76\3\0\61\76\2\0\11\76\7\0"+
    "\53\76\2\0\3\76\20\0\3\76\1\0\47\76\5\0"+
    "\372\76\1\0\33\76\2\0\6\76\2\0\46\76\2\0"+
    "\6\76\2\0\10\76\1\0\1\76\1\0\1\76\1\0"+
    "\1\76\1\0\37\76\2\0\65\76\1\0\7\76\1\0"+
    "\1\76\3\0\3\76\1\0\7\76\3\0\4\76\2\0"+
    "\6\76\4\0\15\76\5\0\3\76\1\0\7\76\3\0"+
    "\13\75\35\0\2\3\5\0\1\75\17\0\2\76\23\0"+
    "\1\76\12\0\1\75\21\0\1\76\15\0\1\76\20\0"+
    "\15\76\63\0\41\76\21\0\1\76\4\0\1\76\2\0"+
    "\12\76\1\0\1\76\3\0\5\76\6\0\1\76\1\0"+
    "\1\76\1\0\1\76\1\0\1\101\3\76\1\0\13\76"+
    "\2\0\4\76\5\0\5\76\4\0\1\76\21\0\51\76"+
    "\u022d\0\64\76\26\0\57\76\1\0\57\76\1\0\205\76"+
    "\6\0\11\76\14\0\46\76\1\0\1\76\5\0\1\76"+
    "\2\0\70\76\7\0\1\76\17\0\30\76\11\0\7\76"+
    "\1\0\7\76\1\0\7\76\1\0\7\76\1\0\7\76"+
    "\1\0\7\76\1\0\7\76\1\0\7\76\1\0\40\76"+
    "\57\0\1\76\320\0\1\75\4\0\3\76\31\0\17\76"+
    "\1\0\5\76\2\0\5\76\4\0\126\76\2\0\2\76"+
    "\2\0\3\76\1\0\132\76\1\0\4\76\5\0\53\76"+
    "\1\0\136\76\21\0\33\76\65\0\306\76\112\0\360\76"+
    "\20\0\215\76\103\0\56\76\2\0\15\76\3\0\34\76"+
    "\24\0\63\76\1\0\12\76\1\0\163\76\45\0\11\76"+
    "\2\0\147\76\2\0\65\76\2\0\5\76\60\0\61\76"+
    "\30\0\64\76\14\0\106\76\12\0\12\76\6\0\30\76"+
    "\3\0\1\76\1\0\61\76\2\0\44\76\14\0\35\76"+
    "\3\0\101\76\16\0\13\76\6\0\37\76\1\0\67\76"+
    "\11\0\16\76\2\0\12\76\6\0\27\76\3\0\111\76"+
    "\30\0\3\76\2\0\20\76\2\0\5\76\12\0\6\76"+
    "\2\0\6\76\2\0\6\76\11\0\7\76\1\0\7\76"+
    "\1\0\53\76\1\0\14\76\10\0\173\76\1\0\2\76"+
    "\2\0\12\76\6\0\244\76\14\0\27\76\4\0\61\76"+
    "\4\0\u0100\102\156\76\2\0\152\76\46\0\7\76\14\0"+
    "\5\76\5\0\14\76\1\0\15\76\1\0\5\76\1\0"+
    "\1\76\1\0\2\76\1\0\2\76\1\0\154\76\41\0"+
    "\153\76\22\0\100\76\2\0\66\76\50\0\14\76\4\0"+
    "\20\76\20\0\20\76\3\0\2\76\30\0\3\76\40\0"+
    "\5\76\1\0\207\76\23\0\12\76\7\0\32\76\4\0"+
    "\1\76\1\0\32\76\13\0\131\76\3\0\6\76\2\0"+
    "\6\76\2\0\6\76\2\0\3\76\43\0\14\76\1\0"+
    "\32\76\1\0\23\76\1\0\2\76\1\0\17\76\2\0"+
    "\16\76\42\0\173\76\105\0\65\76\210\0\1\76\202\0"+
    "\35\76\3\0\61\76\17\0\1\76\37\0\40\76\15\0"+
    "\36\76\5\0\53\76\5\0\36\76\2\0\44\76\4\0"+
    "\10\76\1\0\5\76\52\0\236\76\2\0\12\76\6\0"+
    "\44\76\4\0\44\76\4\0\50\76\10\0\64\76\234\0"+
    "\67\76\11\0\26\76\12\0\10\76\230\0\6\76\2\0"+
    "\1\76\1\0\54\76\1\0\2\76\3\0\1\76\2\0"+
    "\27\76\12\0\27\76\11\0\37\76\101\0\23\76\1\0"+
    "\2\76\12\0\26\76\12\0\32\76\106\0\70\76\6\0"+
    "\2\76\100\0\4\76\1\0\2\76\5\0\10\76\1\0"+
    "\3\76\1\0\35\76\2\0\3\76\4\0\1\76\40\0"+
    "\35\76\3\0\35\76\43\0\10\76\1\0\36\76\31\0"+
    "\66\76\12\0\26\76\12\0\23\76\15\0\22\76\156\0"+
    "\111\76\67\0\63\76\15\0\63\76\15\0\50\76\10\0"+
    "\12\76\306\0\35\76\12\0\1\76\10\0\41\76\217\0"+
    "\27\76\11\0\107\76\37\0\12\76\17\0\74\76\25\0"+
    "\31\76\7\0\12\76\6\0\65\76\1\0\12\76\4\0"+
    "\3\76\11\0\44\76\2\0\1\76\11\0\105\76\4\0"+
    "\4\76\3\0\13\76\1\0\1\76\43\0\22\76\1\0"+
    "\45\76\6\0\1\76\101\0\7\76\1\0\1\76\1\0"+
    "\4\76\1\0\17\76\1\0\12\76\7\0\73\76\5\0"+
    "\12\76\6\0\4\76\1\0\10\76\2\0\2\76\2\0"+
    "\26\76\1\0\7\76\1\0\2\76\1\0\5\76\1\0"+
    "\12\76\2\0\2\76\2\0\3\76\2\0\1\76\6\0"+
    "\1\76\5\0\7\76\2\0\7\76\3\0\5\76\213\0"+
    "\113\76\5\0\12\76\4\0\2\76\40\0\106\76\1\0"+
    "\1\76\10\0\12\76\246\0\66\76\2\0\11\76\27\0"+
    "\6\76\42\0\101\76\3\0\1\76\13\0\12\76\46\0"+
    "\71\76\7\0\12\76\66\0\33\76\2\0\17\76\4\0"+
    "\12\76\306\0\73\76\145\0\112\76\25\0\1\76\240\0"+
    "\10\76\2\0\56\76\2\0\10\76\1\0\2\76\33\0"+
    "\77\76\10\0\1\76\10\0\112\76\3\0\1\76\42\0"+
    "\71\76\7\0\11\76\1\0\55\76\1\0\11\76\17\0"+
    "\12\76\30\0\36\76\2\0\26\76\1\0\16\76\111\0"+
    "\7\76\1\0\2\76\1\0\54\76\3\0\1\76\1\0"+
    "\2\76\1\0\11\76\10\0\12\76\6\0\6\76\1\0"+
    "\2\76\1\0\45\76\1\0\2\76\1\0\6\76\7\0"+
    "\12\76\u0136\0\27\76\11\0\232\76\146\0\157\76\21\0"+
    "\304\76\274\0\57\76\321\0\107\76\271\0\71\76\7\0"+
    "\37\76\1\0\12\76\146\0\36\76\2\0\5\76\13\0"+
    "\67\76\11\0\4\76\14\0\12\76\11\0\25\76\5\0"+
    "\23\76\260\0\100\76\200\0\113\76\4\0\71\76\7\0"+
    "\21\76\100\0\2\76\1\0\1\76\34\0\370\76\10\0"+
    "\363\76\15\0\37\76\61\0\3\76\21\0\4\76\10\0"+
    "\u018c\76\4\0\153\76\5\0\15\76\3\0\11\76\7\0"+
    "\12\76\3\0\2\76\306\0\5\76\3\0\6\76\10\0"+
    "\10\76\2\0\7\76\36\0\4\76\224\0\3\76\273\0"+
    "\125\76\1\0\107\76\1\0\2\76\2\0\1\76\2\0"+
    "\2\76\2\0\4\76\1\0\14\76\1\0\1\76\1\0"+
    "\7\76\1\0\101\76\1\0\4\76\2\0\10\76\1\0"+
    "\7\76\1\0\34\76\1\0\4\76\1\0\5\76\1\0"+
    "\1\76\3\0\7\76\1\0\u0154\76\2\0\31\76\1\0"+
    "\31\76\1\0\37\76\1\0\31\76\1\0\37\76\1\0"+
    "\31\76\1\0\37\76\1\0\31\76\1\0\37\76\1\0"+
    "\31\76\1\0\10\76\2\0\151\76\4\0\62\76\10\0"+
    "\1\76\16\0\1\76\26\0\5\76\1\0\17\76\120\0"+
    "\7\76\1\0\21\76\2\0\7\76\1\0\2\76\1\0"+
    "\5\76\325\0\55\76\3\0\16\76\2\0\12\76\4\0"+
    "\1\76\u0171\0\72\76\6\0\305\76\13\0\7\76\51\0"+
    "\114\76\4\0\12\76\246\0\4\76\1\0\33\76\1\0"+
    "\2\76\1\0\1\76\2\0\1\76\1\0\12\76\1\0"+
    "\4\76\1\0\1\76\1\0\1\76\6\0\1\76\4\0"+
    "\1\76\1\0\1\76\1\0\1\76\1\0\3\76\1\0"+
    "\2\76\1\0\1\76\2\0\1\76\1\0\1\76\1\0"+
    "\1\76\1\0\1\76\1\0\1\76\1\0\2\76\1\0"+
    "\1\76\2\0\4\76\1\0\7\76\1\0\4\76\1\0"+
    "\4\76\1\0\1\76\1\0\12\76\1\0\21\76\5\0"+
    "\3\76\1\0\5\76\1\0\21\76\164\0\32\76\6\0"+
    "\32\76\6\0\32\76\166\0\327\76\51\0\65\76\13\0"+
    "\336\76\2\0\u0182\76\16\0\u0131\76\37\0\36\76\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29952];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\12\0\1\2\1\3\2\4\1\2\1\5"+
    "\1\2\1\6\1\7\3\6\1\2\4\10\1\11\1\12"+
    "\1\13\1\14\1\13\1\15\1\10\1\16\5\10\1\13"+
    "\4\10\1\13\1\17\1\10\1\20\1\10\1\21\1\22"+
    "\2\2\1\23\1\24\1\25\1\26\1\2\1\27\1\2"+
    "\1\30\5\31\1\32\1\13\1\31\1\15\1\33\1\34"+
    "\6\31\1\13\4\31\1\13\2\31\1\35\1\31\1\1"+
    "\1\3\1\1\1\2\1\36\1\37\1\40\1\41\4\42"+
    "\1\13\1\43\1\15\2\42\1\13\2\42\1\13\1\2"+
    "\2\44\2\45\2\46\1\5\1\2\1\47\1\50\4\47"+
    "\2\51\1\2\1\52\1\53\1\0\1\54\1\55\1\0"+
    "\4\56\1\0\3\6\1\0\2\57\1\0\1\60\1\15"+
    "\2\10\2\0\1\61\7\10\1\0\2\56\1\62\1\0"+
    "\1\63\1\0\2\64\2\0\1\65\1\66\2\0\2\31"+
    "\1\0\1\31\1\13\10\31\3\0\1\1\1\54\2\56"+
    "\1\42\1\60\5\42\2\67\2\0\5\47\2\0\1\70"+
    "\1\0\2\56\1\0\1\6\1\0\2\6\2\57\1\60"+
    "\1\0\1\15\2\0\2\10\1\0\1\10\1\0\4\10"+
    "\2\56\1\71\1\0\1\72\1\0\1\15\2\31\1\0"+
    "\5\31\1\0\5\31\2\0\1\1\2\56\1\60\1\42"+
    "\1\15\4\42\2\67\2\0\2\47\1\0\2\47\2\73"+
    "\1\0\2\56\1\0\1\6\1\0\2\6\1\57\2\0"+
    "\1\10\1\0\1\10\1\0\1\13\2\10\1\56\1\74"+
    "\1\0\2\31\1\0\1\31\1\75\1\31\1\0\1\31"+
    "\1\0\1\31\1\76\1\0\1\56\1\42\1\67\2\0"+
    "\2\47\1\0\1\47\1\77\1\0\2\56\1\0\1\6"+
    "\1\0\2\6\1\57\2\0\1\10\1\0\1\10\1\0"+
    "\2\10\1\56\1\0\1\31\1\100\1\0\1\31\2\0"+
    "\2\31\2\0\1\56\1\42\1\67\2\0\2\47\1\0"+
    "\1\47\2\0\1\56\1\0\2\101\1\102\1\103\2\0"+
    "\1\104\2\105\1\106\1\107\3\0\1\31\1\0\1\42"+
    "\2\0\2\47\1\0\1\110\2\0\1\56\1\0\1\6"+
    "\3\0\1\10\4\0\1\42\2\0\2\47\3\0\1\56"+
    "\1\0\1\6\2\0\1\111\1\10\2\0\1\112\1\0"+
    "\1\42\2\0\1\47\2\113\1\0\2\56\1\0\1\6"+
    "\1\0\1\10\1\0\1\114\1\0\1\47\1\0\1\56"+
    "\1\0\1\6\1\0\1\10\2\0\1\47\1\0\1\56"+
    "\1\0\1\6\1\0\1\10\2\0\1\47\1\0\1\56"+
    "\1\0\1\6\1\0\1\10\2\0\1\47\1\0\1\56"+
    "\1\0\2\115\2\116\1\0\1\47\1\0\1\56\2\0"+
    "\2\117\1\0\1\56\1\0\1\120\1\121\1\56\1\0"+
    "\2\122";

  private static int [] zzUnpackAction() {
    int [] result = new int[497];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u0473\0\u04f9\0\u053c\0\u057f\0\u05c2"+
    "\0\u0605\0\u0473\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0473\0\u053c"+
    "\0\u0754\0\u0797\0\u0473\0\u0473\0\u07da\0\u0473\0\u081d\0\u0860"+
    "\0\u08a3\0\u0473\0\u08e6\0\u0929\0\u096c\0\u09af\0\u09f2\0\u0a35"+
    "\0\u0a78\0\u0abb\0\u0afe\0\u0b41\0\u0929\0\u0473\0\u0b84\0\u0473"+
    "\0\u0bc7\0\u0473\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\u0473\0\u0473"+
    "\0\u0473\0\u08e6\0\u0473\0\u0d16\0\u0473\0\u0473\0\u053c\0\u0c4d"+
    "\0\u0d59\0\u0d9c\0\u0473\0\u0ddf\0\u0e22\0\u0e65\0\u0473\0\u0473"+
    "\0\u08a3\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u103a"+
    "\0\u107d\0\u10c0\0\u1103\0\u0ea8\0\u1146\0\u0d16\0\u0473\0\u1189"+
    "\0\u11cc\0\u120f\0\u1252\0\u0797\0\u0473\0\u1295\0\u0473\0\u0473"+
    "\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u0473\0\u1427\0\u146a"+
    "\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u12d8\0\u15b9\0\u0473\0\u15fc"+
    "\0\u0473\0\u163f\0\u0473\0\u1682\0\u16c5\0\u1708\0\u174b\0\u0473"+
    "\0\u178e\0\u17d1\0\u1814\0\u1857\0\u0473\0\u189a\0\u18dd\0\u0473"+
    "\0\u0ea8\0\u053c\0\u1920\0\u16c5\0\u1963\0\u19a6\0\u19e9\0\u1a2c"+
    "\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44"+
    "\0\u1c87\0\u1cca\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6\0\u1e19\0\u08e6"+
    "\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68\0\u1fab\0\u1fee\0\u2031"+
    "\0\u2074\0\u20b7\0\u0c90\0\u20fa\0\u0473\0\u213d\0\u0473\0\u2180"+
    "\0\u21c3\0\u2206\0\u0473\0\u0473\0\u2249\0\u228c\0\u22cf\0\u2312"+
    "\0\u2355\0\u2398\0\u23db\0\u241e\0\u2461\0\u24a4\0\u24e7\0\u252a"+
    "\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u2679\0\u26bc\0\u26ff\0\u2742"+
    "\0\u2785\0\u27c8\0\u280b\0\u284e\0\u2891\0\u28d4\0\u2917\0\u295a"+
    "\0\u299d\0\u29e0\0\u2a23\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f\0\u2b72"+
    "\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e\0\u0473\0\u2cc1\0\u2d04\0\u2d47"+
    "\0\u2d8a\0\u2dcd\0\u2e10\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c\0\u0473"+
    "\0\u2f5f\0\u2fa2\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\u30f1\0\u3134"+
    "\0\u3177\0\u31ba\0\u31fd\0\u3240\0\u3283\0\u32c6\0\u3309\0\u0473"+
    "\0\u334c\0\u0473\0\u338f\0\u228c\0\u33d2\0\u3415\0\u3458\0\u349b"+
    "\0\u34de\0\u3521\0\u3564\0\u35a7\0\u35ea\0\u362d\0\u3670\0\u36b3"+
    "\0\u36f6\0\u3739\0\u377c\0\u37bf\0\u3802\0\u3845\0\u3888\0\u12d8"+
    "\0\u38cb\0\u2891\0\u390e\0\u3951\0\u3994\0\u39d7\0\u3a1a\0\u3a5d"+
    "\0\u3aa0\0\u3ae3\0\u3b26\0\u3b69\0\u3bac\0\u3bef\0\u3c32\0\u174b"+
    "\0\u0473\0\u3c75\0\u3cb8\0\u3cfb\0\u3d3e\0\u3d81\0\u3dc4\0\u3e07"+
    "\0\u3e4a\0\u3e8d\0\u3ed0\0\u3f13\0\u3f56\0\u3f99\0\u3fdc\0\u401f"+
    "\0\u0473\0\u4062\0\u40a5\0\u40e8\0\u0473\0\u412b\0\u416e\0\u41b1"+
    "\0\u41f4\0\u4237\0\u0473\0\u427a\0\u42bd\0\u4300\0\u4343\0\u4386"+
    "\0\u0473\0\u43c9\0\u440c\0\u444f\0\u4492\0\u44d5\0\u4518\0\u455b"+
    "\0\u459e\0\u45e1\0\u4624\0\u174b\0\u4667\0\u46aa\0\u46ed\0\u4730"+
    "\0\u4773\0\u47b6\0\u47f9\0\u483c\0\u487f\0\u48c2\0\u4905\0\u4948"+
    "\0\u498b\0\u49ce\0\u4a11\0\u4a54\0\u4a97\0\u4ada\0\u4b1d\0\u4b60"+
    "\0\u0473\0\u4ba3\0\u4be6\0\u4c29\0\u0d9c\0\u4c6c\0\u4caf\0\u4cf2"+
    "\0\u4d35\0\u4d78\0\u4dbb\0\u4dfe\0\u4e41\0\u4e84\0\u4ec7\0\u4f0a"+
    "\0\u4f4d\0\u4f90\0\u4fd3\0\u5016\0\u5059\0\u509c\0\u50df\0\u5122"+
    "\0\u0605\0\u0605\0\u5165\0\u51a8\0\u0473\0\u51eb\0\u522e\0\u0929"+
    "\0\u0929\0\u5271\0\u52b4\0\u52f7\0\u533a\0\u537d\0\u53c0\0\u5403"+
    "\0\u5446\0\u5489\0\u54cc\0\u550f\0\u174b\0\u5552\0\u5595\0\u55d8"+
    "\0\u561b\0\u565e\0\u56a1\0\u56e4\0\u5727\0\u576a\0\u57ad\0\u57f0"+
    "\0\u5833\0\u5876\0\u58b9\0\u58fc\0\u593f\0\u5982\0\u59c5\0\u5a08"+
    "\0\u5a4b\0\u5a8e\0\u5ad1\0\u5b14\0\u5b57\0\u5b9a\0\u2ed9\0\u0473"+
    "\0\u5bdd\0\u5c20\0\u32c6\0\u0473\0\u5c63\0\u3845\0\u3a1a\0\u5ca6"+
    "\0\u5ce9\0\u174b\0\u0473\0\u5d2c\0\u5d6f\0\u5db2\0\u5df5\0\u5e38"+
    "\0\u5e7b\0\u5ebe\0\u5f01\0\u0473\0\u5f44\0\u5f87\0\u5fca\0\u600d"+
    "\0\u6050\0\u6093\0\u60d6\0\u6119\0\u615c\0\u619f\0\u61e2\0\u6225"+
    "\0\u6268\0\u62ab\0\u62ee\0\u6331\0\u6374\0\u63b7\0\u63fa\0\u643d"+
    "\0\u6480\0\u64c3\0\u6506\0\u6549\0\u658c\0\u65cf\0\u6612\0\u6655"+
    "\0\u6698\0\u66db\0\u671e\0\u6761\0\u0605\0\u0473\0\u0929\0\u0473"+
    "\0\u67a4\0\u67e7\0\u682a\0\u686d\0\u68b0\0\u68f3\0\u174b\0\u0473"+
    "\0\u6936\0\u6979\0\u69bc\0\u0473\0\u0473\0\u69ff\0\u6a42\0\u19e9"+
    "\0\u1963";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[497];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\22\1\23\1\24\1\0\1\25\1\26\1\27\1\30"+
    "\10\22\1\31\2\22\5\31\1\22\1\32\5\22\10\31"+
    "\1\33\10\31\1\34\2\31\1\35\4\31\3\22\1\31"+
    "\3\22\1\36\2\22\1\0\1\37\1\23\1\24\1\37"+
    "\1\25\1\40\1\37\1\41\2\37\1\42\1\43\1\44"+
    "\1\37\1\45\1\46\1\47\2\37\5\50\2\37\1\51"+
    "\1\52\2\37\1\53\5\54\1\55\2\54\1\56\1\57"+
    "\3\54\1\60\3\54\1\61\1\54\1\62\1\63\1\54"+
    "\1\64\1\65\1\54\1\66\1\67\1\70\1\54\3\37"+
    "\1\71\3\37\1\22\1\23\1\24\1\0\1\25\26\22"+
    "\1\72\46\22\1\0\1\22\1\23\1\24\1\0\1\25"+
    "\13\22\1\73\2\22\5\73\7\22\31\73\3\22\1\73"+
    "\6\22\1\0\1\22\1\23\1\24\1\0\1\25\2\22"+
    "\1\74\1\22\1\75\1\22\1\43\1\44\2\22\1\46"+
    "\1\76\1\77\1\22\5\76\1\22\1\100\1\22\1\101"+
    "\2\22\1\102\31\76\1\103\1\104\1\70\1\76\1\105"+
    "\5\22\1\0\1\106\1\23\1\24\1\106\1\25\1\107"+
    "\1\106\1\110\3\106\1\111\1\106\1\112\1\45\1\113"+
    "\1\114\1\106\1\115\5\116\1\117\1\120\1\121\4\106"+
    "\5\122\1\123\1\122\1\124\1\122\1\125\2\122\1\126"+
    "\1\127\1\122\1\130\2\122\1\131\1\132\2\122\1\133"+
    "\1\134\1\135\1\106\1\136\1\106\1\122\1\137\3\106"+
    "\1\140\2\106\1\141\1\142\1\24\1\141\1\25\1\143"+
    "\75\141\1\22\1\23\1\24\1\0\1\25\1\26\1\22"+
    "\1\74\2\22\1\144\4\22\1\145\2\146\1\22\5\146"+
    "\3\22\1\101\3\22\31\146\2\22\1\147\1\146\1\150"+
    "\5\22\1\0\1\151\1\23\1\24\1\151\1\25\1\152"+
    "\1\151\1\153\2\151\1\154\3\151\1\155\1\156\1\155"+
    "\2\151\5\157\14\151\1\160\3\151\1\161\3\151\1\162"+
    "\5\151\1\163\2\151\1\164\1\165\3\151\1\147\10\151"+
    "\1\22\1\23\3\0\75\22\1\0\1\22\1\23\1\24"+
    "\1\0\1\25\2\22\1\166\72\22\1\0\1\167\1\23"+
    "\1\24\1\0\1\25\2\167\1\170\72\167\1\0\1\22"+
    "\1\23\1\171\1\0\1\172\24\22\1\100\50\22\1\0"+
    "\1\22\1\23\1\24\1\0\1\25\24\22\1\100\50\22"+
    "\1\0\1\22\1\23\1\173\1\0\1\174\1\22\1\175"+
    "\1\176\10\22\1\177\2\22\5\177\1\22\1\200\5\22"+
    "\14\177\1\201\2\177\1\202\3\177\1\203\1\204\4\177"+
    "\3\22\1\177\6\22\1\0\1\22\1\23\1\205\1\0"+
    "\1\206\2\22\1\176\10\22\1\177\2\22\5\177\1\22"+
    "\1\100\5\22\14\177\1\201\2\177\1\202\3\177\1\203"+
    "\1\204\4\177\3\22\1\177\6\22\1\0\1\22\1\23"+
    "\1\205\1\0\1\206\1\22\1\175\1\207\6\22\1\210"+
    "\1\46\1\211\1\77\1\22\5\122\1\22\1\120\5\22"+
    "\31\122\3\22\1\122\6\22\105\0\1\23\103\0\1\24"+
    "\100\0\5\212\1\213\75\212\2\175\1\0\1\175\1\0"+
    "\3\175\1\214\72\175\1\0\1\215\11\0\2\216\3\0"+
    "\1\217\1\216\1\0\5\217\7\0\2\217\1\220\17\217"+
    "\1\221\6\217\3\0\1\217\2\0\2\215\1\222\1\215"+
    "\21\0\1\31\2\0\5\31\7\0\31\31\3\0\1\31"+
    "\27\0\1\31\2\0\5\31\7\0\15\31\1\223\13\31"+
    "\3\0\1\31\27\0\1\31\2\0\5\31\7\0\4\31"+
    "\1\224\24\31\3\0\1\31\27\0\1\31\2\0\5\31"+
    "\7\0\17\31\1\225\11\31\3\0\1\31\63\0\1\226"+
    "\46\0\1\227\2\0\5\227\7\0\2\227\1\230\26\227"+
    "\3\0\1\227\7\0\2\231\1\0\1\231\1\0\5\231"+
    "\1\232\70\231\23\0\5\233\73\0\1\54\1\234\1\0"+
    "\5\50\7\0\31\54\3\0\1\54\27\0\1\54\1\235"+
    "\1\0\5\50\7\0\31\54\3\0\1\54\56\0\1\236"+
    "\4\0\1\237\22\0\1\236\23\0\1\240\2\0\5\240"+
    "\7\0\31\240\3\0\1\240\27\0\1\54\1\234\1\0"+
    "\5\54\7\0\31\54\3\0\1\54\27\0\1\54\1\234"+
    "\1\0\5\54\7\0\1\241\30\54\3\0\1\54\27\0"+
    "\1\54\1\234\1\0\5\54\7\0\15\54\1\242\13\54"+
    "\3\0\1\54\27\0\1\54\1\234\1\0\5\54\7\0"+
    "\1\65\30\54\3\0\1\54\27\0\1\54\1\234\1\0"+
    "\5\54\7\0\4\54\1\243\24\54\3\0\1\54\27\0"+
    "\1\54\1\234\1\0\5\54\7\0\4\54\1\244\24\54"+
    "\3\0\1\54\27\0\1\54\1\234\1\0\5\54\7\0"+
    "\21\54\1\245\7\54\3\0\1\54\27\0\1\54\1\234"+
    "\1\0\5\54\7\0\17\54\1\246\11\54\3\0\1\54"+
    "\27\0\1\54\1\234\1\0\5\54\7\0\1\247\30\54"+
    "\3\0\1\54\10\0\4\67\64\0\1\67\3\0\1\67"+
    "\61\0\1\250\46\0\1\73\2\0\5\73\7\0\31\73"+
    "\3\0\1\73\27\0\1\251\2\0\5\251\7\0\2\251"+
    "\1\252\26\251\3\0\1\251\27\0\1\253\2\0\5\253"+
    "\7\0\31\253\3\0\1\253\10\0\1\254\11\0\1\255"+
    "\4\0\1\76\1\256\1\0\5\76\6\0\1\256\31\76"+
    "\3\0\1\76\11\0\1\257\1\0\1\260\114\0\1\261"+
    "\1\0\1\262\112\0\1\263\72\0\1\122\2\0\5\116"+
    "\4\0\1\264\2\0\31\122\3\0\1\122\62\0\1\265"+
    "\47\0\1\122\1\266\1\0\5\116\7\0\31\122\3\0"+
    "\1\122\27\0\1\122\2\0\5\122\7\0\31\122\3\0"+
    "\1\122\27\0\1\122\2\0\5\122\7\0\1\267\7\122"+
    "\1\270\20\122\3\0\1\122\3\0\1\271\23\0\1\122"+
    "\2\0\5\122\7\0\23\122\1\272\5\122\3\0\1\122"+
    "\27\0\1\122\2\0\5\122\7\0\1\273\30\122\3\0"+
    "\1\122\27\0\1\122\2\0\5\122\7\0\3\122\1\274"+
    "\25\122\3\0\1\122\27\0\1\122\2\0\5\122\7\0"+
    "\4\122\1\275\24\122\3\0\1\122\27\0\1\122\2\0"+
    "\5\122\7\0\1\122\1\276\11\122\1\277\15\122\3\0"+
    "\1\122\27\0\1\122\2\0\5\122\7\0\7\122\1\300"+
    "\21\122\3\0\1\122\27\0\1\122\2\0\5\122\7\0"+
    "\21\122\1\301\7\122\3\0\1\122\27\0\1\122\2\0"+
    "\5\122\7\0\1\302\30\122\3\0\1\122\27\0\1\122"+
    "\2\0\5\122\7\0\10\122\1\303\20\122\3\0\1\122"+
    "\3\0\1\304\51\0\1\305\34\0\2\141\1\0\1\141"+
    "\1\0\77\141\1\142\1\0\1\141\1\0\76\141\2\143"+
    "\1\306\1\143\1\306\1\307\75\143\20\0\2\146\1\0"+
    "\5\146\7\0\31\146\3\0\1\146\7\0\1\151\2\0"+
    "\1\151\1\0\12\151\1\0\52\151\1\0\10\151\1\152"+
    "\2\212\1\152\1\212\1\310\11\152\1\212\52\152\1\212"+
    "\10\152\1\151\2\0\1\151\1\0\12\151\1\0\1\311"+
    "\2\151\5\311\7\151\2\311\1\312\26\311\2\151\1\0"+
    "\1\311\7\151\1\313\1\231\1\0\1\313\1\0\5\313"+
    "\1\314\4\313\1\231\52\313\1\231\10\313\1\151\2\0"+
    "\1\151\1\0\12\151\1\0\3\151\5\157\42\151\1\0"+
    "\11\151\2\0\1\151\1\0\12\151\1\0\1\151\1\315"+
    "\1\151\5\157\42\151\1\0\11\151\2\0\1\151\1\0"+
    "\12\151\1\0\17\151\1\316\32\151\1\0\11\151\2\0"+
    "\1\151\1\0\12\151\1\0\17\151\1\165\32\151\1\0"+
    "\11\151\2\0\1\151\1\0\12\151\1\0\23\151\1\317"+
    "\26\151\1\0\11\151\2\0\1\151\1\0\12\151\1\0"+
    "\40\151\1\320\11\151\1\0\11\151\2\0\1\151\1\0"+
    "\12\151\1\0\17\151\1\321\32\151\1\0\10\151\20\0"+
    "\1\322\2\0\5\322\7\0\2\322\1\323\26\322\3\0"+
    "\1\322\50\0\1\324\43\0\1\171\102\0\1\173\100\0"+
    "\2\175\1\0\1\175\1\0\76\175\43\0\1\325\57\0"+
    "\1\177\2\0\5\177\7\0\31\177\3\0\1\177\27\0"+
    "\1\177\2\0\5\177\7\0\4\177\1\326\24\177\3\0"+
    "\1\177\27\0\1\177\2\0\5\177\7\0\1\327\30\177"+
    "\3\0\1\177\27\0\1\177\2\0\5\177\7\0\1\330"+
    "\26\177\1\331\1\177\3\0\1\177\27\0\1\177\2\0"+
    "\5\177\7\0\10\177\1\332\20\177\3\0\1\177\3\0"+
    "\1\333\5\0\1\205\143\0\1\334\44\0\1\212\76\0"+
    "\1\215\16\0\1\215\2\0\5\215\3\0\1\335\3\0"+
    "\31\215\1\0\1\336\1\0\1\215\2\0\4\215\14\0"+
    "\2\216\3\0\2\216\1\0\5\216\7\0\31\216\3\0"+
    "\1\216\10\0\1\215\11\0\2\216\3\0\1\217\1\216"+
    "\1\0\5\217\3\0\1\335\3\0\31\217\1\0\1\336"+
    "\1\0\1\217\2\0\4\215\2\0\1\215\11\0\2\216"+
    "\3\0\1\217\1\216\1\0\5\217\3\0\1\335\3\0"+
    "\16\217\1\337\12\217\1\0\1\336\1\0\1\217\2\0"+
    "\4\215\2\0\1\215\11\0\2\216\3\0\1\217\1\216"+
    "\1\0\5\217\3\0\1\335\3\0\23\217\1\340\5\217"+
    "\1\0\1\336\1\0\1\217\2\0\4\215\2\0\1\215"+
    "\16\0\1\215\2\0\5\215\3\0\1\335\3\0\23\215"+
    "\1\341\5\215\1\0\1\336\1\0\1\215\2\0\4\215"+
    "\21\0\1\31\2\0\5\31\7\0\22\31\1\342\6\31"+
    "\3\0\1\31\4\0\1\343\22\0\1\31\2\0\5\31"+
    "\7\0\14\31\1\344\14\31\3\0\1\31\27\0\1\31"+
    "\2\0\5\31\7\0\3\31\1\345\25\31\3\0\1\31"+
    "\70\0\1\343\16\0\1\343\22\0\1\227\1\346\1\0"+
    "\5\227\7\0\31\227\3\0\1\227\27\0\1\227\1\346"+
    "\1\0\5\227\7\0\16\227\1\347\12\227\3\0\1\227"+
    "\7\0\2\231\1\0\1\231\1\0\5\231\1\350\70\231"+
    "\12\0\1\351\111\0\1\266\1\0\5\233\73\0\1\54"+
    "\2\0\5\54\7\0\31\54\3\0\1\54\27\0\1\54"+
    "\2\0\5\352\7\0\31\54\3\0\1\54\54\0\1\353"+
    "\120\0\1\354\37\0\1\54\1\234\1\0\5\54\7\0"+
    "\13\54\1\355\15\54\3\0\1\54\27\0\1\54\1\234"+
    "\1\0\5\54\7\0\22\54\1\356\6\54\3\0\1\54"+
    "\4\0\1\357\22\0\1\54\1\234\1\0\5\54\7\0"+
    "\10\54\1\360\20\54\3\0\1\54\3\0\1\361\23\0"+
    "\1\54\1\234\1\0\5\54\7\0\14\54\1\362\14\54"+
    "\3\0\1\54\27\0\1\54\1\234\1\0\5\54\7\0"+
    "\24\54\1\363\4\54\3\0\1\54\27\0\1\54\1\234"+
    "\1\0\5\54\7\0\3\54\1\364\25\54\3\0\1\54"+
    "\27\0\1\54\1\234\1\0\5\54\7\0\7\54\1\365"+
    "\21\54\3\0\1\54\70\0\1\357\16\0\1\357\22\0"+
    "\1\251\1\366\1\0\5\251\7\0\31\251\3\0\1\251"+
    "\27\0\1\251\1\366\1\0\5\251\7\0\16\251\1\367"+
    "\12\251\3\0\1\251\10\0\1\254\11\0\1\255\107\0"+
    "\1\76\2\0\5\76\7\0\31\76\3\0\1\76\11\0"+
    "\1\257\114\0\1\370\20\0\1\371\61\0\1\372\131\0"+
    "\1\373\62\0\5\374\73\0\1\122\2\0\5\122\7\0"+
    "\13\122\1\375\15\122\3\0\1\122\27\0\1\122\2\0"+
    "\5\122\7\0\13\122\1\376\15\122\3\0\1\122\61\0"+
    "\1\377\50\0\1\122\2\0\5\122\7\0\23\122\1\u0100"+
    "\5\122\3\0\1\122\27\0\1\122\2\0\5\122\7\0"+
    "\21\122\1\u0101\7\122\3\0\1\122\27\0\1\122\2\0"+
    "\3\122\1\u0102\1\122\7\0\31\122\3\0\1\122\27\0"+
    "\1\122\2\0\5\122\7\0\10\122\1\u0103\20\122\3\0"+
    "\1\122\3\0\1\361\23\0\1\122\2\0\5\122\7\0"+
    "\12\122\1\u0104\16\122\3\0\1\122\5\0\1\u0105\21\0"+
    "\1\122\2\0\5\122\7\0\1\u0106\30\122\3\0\1\122"+
    "\27\0\1\122\2\0\5\122\7\0\1\u0107\30\122\3\0"+
    "\1\122\27\0\1\122\2\0\5\122\7\0\24\122\1\u0108"+
    "\4\122\3\0\1\122\27\0\1\122\2\0\5\122\7\0"+
    "\7\122\1\u0109\21\122\3\0\1\122\27\0\1\122\2\0"+
    "\5\122\7\0\17\122\1\u010a\11\122\3\0\1\122\65\0"+
    "\1\u010b\63\0\1\u010c\43\0\5\306\1\u010d\75\306\2\141"+
    "\1\0\1\141\1\0\1\143\75\141\1\151\2\0\1\151"+
    "\1\0\1\152\11\151\1\0\52\151\1\0\11\151\2\0"+
    "\1\151\1\0\12\151\1\0\1\311\1\u010e\1\151\5\311"+
    "\7\151\31\311\2\151\1\0\1\311\10\151\2\0\1\151"+
    "\1\0\12\151\1\0\1\311\1\u010e\1\151\5\311\7\151"+
    "\16\311\1\u010f\12\311\2\151\1\0\1\311\7\151\1\313"+
    "\1\231\1\0\1\313\1\0\5\313\1\u0110\4\313\1\231"+
    "\52\313\1\231\10\313\1\151\2\0\1\151\1\0\5\151"+
    "\1\u0111\4\151\1\0\52\151\1\0\11\151\2\0\1\151"+
    "\1\0\12\151\1\0\3\151\5\u0112\42\151\1\0\11\151"+
    "\2\0\1\151\1\0\12\151\1\0\32\151\1\u0113\17\151"+
    "\1\0\11\151\2\0\1\151\1\0\12\151\1\0\27\151"+
    "\1\u0114\22\151\1\0\4\151\1\u0114\4\151\2\0\1\151"+
    "\1\0\12\151\1\0\43\151\1\u0115\6\151\1\0\11\151"+
    "\2\0\1\151\1\0\12\151\1\0\26\151\1\u0116\23\151"+
    "\1\0\10\151\20\0\1\322\1\u0117\1\0\5\322\7\0"+
    "\31\322\3\0\1\322\27\0\1\322\1\u0117\1\0\5\322"+
    "\7\0\16\322\1\u0118\12\322\3\0\1\322\64\0\1\u0119"+
    "\101\0\1\u011a\46\0\1\177\2\0\5\177\7\0\14\177"+
    "\1\u011b\14\177\3\0\1\177\27\0\1\177\2\0\5\177"+
    "\7\0\22\177\1\u011c\6\177\3\0\1\177\4\0\1\u011d"+
    "\22\0\1\177\2\0\5\177\7\0\21\177\1\u011e\7\177"+
    "\3\0\1\177\27\0\1\177\2\0\5\177\7\0\17\177"+
    "\1\u011f\11\177\3\0\1\177\27\0\1\177\2\0\5\177"+
    "\7\0\3\177\1\u0120\25\177\3\0\1\177\51\0\1\u0121"+
    "\114\0\1\u0122\27\0\4\336\13\0\1\215\2\0\5\215"+
    "\3\0\1\335\3\0\31\215\1\0\1\336\1\0\1\215"+
    "\1\0\1\336\4\215\2\0\1\215\11\0\2\216\3\0"+
    "\1\217\1\216\1\0\5\217\3\0\1\335\3\0\15\217"+
    "\1\u0123\13\217\1\0\1\336\1\0\1\217\2\0\4\215"+
    "\2\0\1\215\11\0\2\216\3\0\1\217\1\216\1\0"+
    "\5\217\3\0\1\335\3\0\1\u0124\30\217\1\0\1\336"+
    "\1\0\1\217\2\0\4\215\2\0\1\215\16\0\1\215"+
    "\2\0\5\215\3\0\1\335\3\0\1\u0125\30\215\1\0"+
    "\1\336\1\0\1\215\2\0\4\215\21\0\1\31\2\0"+
    "\5\31\7\0\4\31\1\u0126\24\31\3\0\1\31\52\0"+
    "\1\u0127\57\0\1\31\2\0\5\31\7\0\16\31\1\u0128"+
    "\12\31\3\0\1\31\27\0\1\31\2\0\5\31\7\0"+
    "\1\u0129\30\31\3\0\1\31\27\0\1\227\2\0\5\227"+
    "\7\0\31\227\3\0\1\227\27\0\1\227\1\346\1\0"+
    "\5\227\7\0\15\227\1\u012a\13\227\3\0\1\227\21\0"+
    "\1\350\110\0\1\54\1\234\1\0\5\352\7\0\31\54"+
    "\3\0\1\54\63\0\1\u012b\100\0\1\u012c\50\0\1\54"+
    "\1\234\1\0\5\54\7\0\22\54\1\u012d\6\54\3\0"+
    "\1\54\4\0\1\u012e\22\0\1\54\1\234\1\0\5\54"+
    "\7\0\4\54\1\u012f\24\54\3\0\1\54\52\0\1\u0130"+
    "\57\0\1\54\1\234\1\0\5\54\7\0\15\54\1\65"+
    "\13\54\3\0\1\54\63\0\1\u0131\46\0\1\54\1\234"+
    "\1\0\5\54\7\0\16\54\1\u0132\12\54\3\0\1\54"+
    "\27\0\1\54\1\234\1\0\5\54\7\0\4\54\1\65"+
    "\24\54\3\0\1\54\27\0\1\54\1\234\1\0\5\54"+
    "\7\0\1\u0133\30\54\3\0\1\54\27\0\1\54\1\234"+
    "\1\0\5\54\7\0\21\54\1\65\7\54\3\0\1\54"+
    "\27\0\1\251\2\0\5\251\7\0\31\251\3\0\1\251"+
    "\27\0\1\251\1\366\1\0\5\251\7\0\15\251\1\u0134"+
    "\13\251\3\0\1\251\23\0\1\u0135\130\0\1\u0136\60\0"+
    "\1\122\2\0\5\122\7\0\22\122\1\u0137\6\122\3\0"+
    "\1\122\4\0\1\u012e\22\0\1\122\2\0\5\122\7\0"+
    "\4\122\1\u0138\24\122\3\0\1\122\52\0\1\u0139\57\0"+
    "\1\122\2\0\5\122\7\0\17\122\1\u013a\11\122\3\0"+
    "\1\122\27\0\1\122\2\0\5\122\1\u013b\6\0\31\122"+
    "\3\0\1\122\27\0\1\122\2\0\5\122\1\263\6\0"+
    "\31\122\3\0\1\122\27\0\1\122\2\0\5\122\7\0"+
    "\15\122\1\134\13\122\3\0\1\122\27\0\1\122\2\0"+
    "\5\122\7\0\3\122\1\u013c\25\122\3\0\1\122\51\0"+
    "\1\u013d\60\0\1\122\2\0\5\122\7\0\10\122\1\u013e"+
    "\20\122\3\0\1\122\3\0\1\u013f\23\0\1\u0140\2\0"+
    "\5\122\7\0\31\122\3\0\1\122\27\0\1\122\2\0"+
    "\5\122\7\0\4\122\1\134\24\122\3\0\1\122\27\0"+
    "\1\122\2\0\5\122\7\0\21\122\1\134\7\122\3\0"+
    "\1\122\27\0\1\122\2\0\5\122\1\u0141\6\0\31\122"+
    "\3\0\1\122\37\0\1\u0141\72\0\1\u0142\67\0\1\306"+
    "\75\0\1\151\2\0\1\151\1\0\12\151\1\0\1\311"+
    "\2\151\5\311\7\151\31\311\2\151\1\0\1\311\10\151"+
    "\2\0\1\151\1\0\12\151\1\0\1\311\1\u010e\1\151"+
    "\5\311\7\151\15\311\1\u0143\13\311\2\151\1\0\1\311"+
    "\10\151\2\0\1\151\1\0\5\151\1\u0110\4\151\1\0"+
    "\52\151\1\0\11\151\2\0\1\151\1\0\12\151\1\0"+
    "\41\151\1\u0144\10\151\1\0\5\151\1\u0144\3\151\2\0"+
    "\1\151\1\0\12\151\1\0\34\151\1\165\15\151\1\0"+
    "\11\151\2\0\1\151\1\0\12\151\1\0\23\151\1\165"+
    "\26\151\1\0\11\151\2\0\1\151\1\0\12\151\1\0"+
    "\40\151\1\165\11\151\1\0\10\151\20\0\1\322\2\0"+
    "\5\322\7\0\31\322\3\0\1\322\27\0\1\322\1\u0117"+
    "\1\0\5\322\7\0\15\322\1\u0145\13\322\3\0\1\322"+
    "\63\0\1\u0146\70\0\1\u0147\60\0\1\177\2\0\5\177"+
    "\7\0\1\177\1\u0148\27\177\3\0\1\177\27\0\1\177"+
    "\2\0\5\177\7\0\22\177\1\u0149\6\177\3\0\1\177"+
    "\4\0\1\u014a\63\0\1\u014a\16\0\1\u014a\22\0\1\177"+
    "\2\0\5\177\7\0\6\177\1\u014b\22\177\3\0\1\177"+
    "\27\0\1\177\2\0\5\177\7\0\4\177\1\u014c\24\177"+
    "\3\0\1\177\51\0\1\u014d\41\0\1\215\11\0\2\216"+
    "\3\0\1\217\1\216\1\0\5\217\3\0\1\335\3\0"+
    "\5\217\1\u014e\23\217\1\0\1\336\1\0\1\217\2\0"+
    "\4\215\2\0\1\215\11\0\2\216\3\0\1\217\1\216"+
    "\1\0\5\217\3\0\1\335\3\0\21\217\1\u014f\7\217"+
    "\1\0\1\336\1\0\1\217\2\0\4\215\2\0\1\215"+
    "\16\0\1\215\2\0\5\215\3\0\1\335\3\0\21\215"+
    "\1\u0150\7\215\1\0\1\336\1\0\1\215\2\0\4\215"+
    "\21\0\1\31\2\0\5\31\7\0\21\31\1\u0151\7\31"+
    "\3\0\1\31\67\0\1\u0152\42\0\1\31\2\0\5\31"+
    "\7\0\25\31\1\u0153\3\31\3\0\1\31\27\0\1\31"+
    "\2\0\5\31\7\0\23\31\1\u0154\5\31\3\0\1\31"+
    "\27\0\1\227\1\346\1\0\5\227\7\0\5\227\1\u0155"+
    "\23\227\3\0\1\227\64\0\1\u0156\77\0\1\u0157\50\0"+
    "\1\54\1\234\1\0\5\54\7\0\2\54\1\u0158\1\54"+
    "\1\65\24\54\3\0\1\54\50\0\1\u0159\1\0\1\u0131"+
    "\57\0\1\54\1\234\1\0\5\54\7\0\21\54\1\u015a"+
    "\7\54\3\0\1\54\67\0\1\u015b\42\0\1\54\1\234"+
    "\1\0\5\54\7\0\25\54\1\u015c\3\54\3\0\1\54"+
    "\27\0\1\54\1\234\1\0\5\54\7\0\23\54\1\u015d"+
    "\5\54\3\0\1\54\27\0\1\251\1\366\1\0\5\251"+
    "\7\0\5\251\1\u015e\23\251\3\0\1\251\56\0\1\u015f"+
    "\27\0\1\u015f\23\0\1\122\2\0\5\122\7\0\2\122"+
    "\1\u0160\1\122\1\134\24\122\3\0\1\122\27\0\1\122"+
    "\2\0\5\122\1\u0161\6\0\31\122\3\0\1\122\37\0"+
    "\1\u0161\72\0\1\122\2\0\5\122\1\u0162\6\0\31\122"+
    "\3\0\1\122\27\0\1\122\2\0\5\122\7\0\5\122"+
    "\1\u0163\23\122\3\0\1\122\53\0\1\u0164\56\0\1\122"+
    "\2\0\5\122\7\0\15\122\1\u0102\13\122\3\0\1\122"+
    "\63\0\1\u0165\46\0\1\122\2\0\2\122\1\u0166\1\u0167"+
    "\1\122\7\0\31\122\3\0\1\122\34\0\1\u0168\1\u0169"+
    "\54\0\1\151\2\0\1\151\1\0\12\151\1\0\1\311"+
    "\1\u010e\1\151\5\311\7\151\5\311\1\u016a\23\311\2\151"+
    "\1\0\1\311\10\151\2\0\1\151\1\0\12\151\1\0"+
    "\21\151\1\u016b\1\151\1\165\26\151\1\0\10\151\20\0"+
    "\1\322\1\u0117\1\0\5\322\7\0\5\322\1\u016c\23\322"+
    "\3\0\1\322\53\0\1\u016d\131\0\1\u016e\27\0\1\177"+
    "\2\0\5\177\7\0\4\177\1\u016f\24\177\3\0\1\177"+
    "\27\0\1\177\2\0\5\177\7\0\26\177\1\u0170\2\177"+
    "\3\0\1\177\74\0\1\u0171\35\0\1\177\2\0\5\177"+
    "\7\0\4\177\1\u0172\24\177\3\0\1\177\102\0\1\u0173"+
    "\10\0\1\215\11\0\2\216\3\0\1\217\1\216\1\0"+
    "\5\217\3\0\1\335\3\0\31\217\1\0\1\336\1\0"+
    "\1\217\2\0\1\215\1\u0174\2\215\2\0\1\215\11\0"+
    "\2\216\3\0\1\217\1\216\1\0\5\217\3\0\1\335"+
    "\3\0\23\217\1\u0175\5\217\1\0\1\336\1\0\1\217"+
    "\2\0\4\215\2\0\1\215\16\0\1\215\2\0\5\215"+
    "\3\0\1\335\3\0\23\215\1\u0176\5\215\1\0\1\336"+
    "\1\0\1\215\2\0\4\215\21\0\1\31\2\0\5\31"+
    "\7\0\23\31\1\u0177\5\31\3\0\1\31\71\0\1\u0178"+
    "\40\0\1\31\2\0\5\31\7\0\4\31\1\u0179\24\31"+
    "\3\0\1\31\27\0\1\31\2\0\5\31\7\0\4\31"+
    "\1\u017a\24\31\3\0\1\31\27\0\1\227\1\346\1\0"+
    "\5\227\7\0\31\227\3\0\1\227\3\0\1\u017b\63\0"+
    "\1\u017c\56\0\1\u017d\66\0\1\54\1\234\1\0\5\54"+
    "\7\0\7\54\1\65\21\54\3\0\1\54\55\0\1\u0131"+
    "\54\0\1\54\1\234\1\0\5\54\7\0\23\54\1\u017e"+
    "\5\54\3\0\1\54\71\0\1\u017f\40\0\1\54\1\234"+
    "\1\0\5\54\7\0\4\54\1\u0180\24\54\3\0\1\54"+
    "\27\0\1\54\1\234\1\0\5\54\7\0\4\54\1\u0181"+
    "\24\54\3\0\1\54\27\0\1\251\1\366\1\0\5\251"+
    "\7\0\31\251\3\0\1\251\3\0\1\u0182\42\0\1\u0183"+
    "\63\0\1\122\2\0\5\122\7\0\7\122\1\134\21\122"+
    "\3\0\1\122\55\0\1\u0184\54\0\1\122\2\0\2\122"+
    "\1\u0102\2\122\7\0\31\122\3\0\1\122\34\0\1\u0165"+
    "\75\0\1\122\2\0\3\122\1\u0185\1\122\7\0\31\122"+
    "\3\0\1\122\27\0\1\122\2\0\1\122\1\u0163\3\122"+
    "\7\0\31\122\3\0\1\122\35\0\1\u0186\100\0\1\u0164"+
    "\56\0\1\151\2\0\1\151\1\0\12\151\1\0\1\311"+
    "\1\u010e\1\151\5\311\7\151\31\311\2\151\1\0\1\311"+
    "\3\151\1\u0187\4\151\2\0\1\151\1\0\12\151\1\0"+
    "\26\151\1\165\23\151\1\0\10\151\20\0\1\322\1\u0117"+
    "\1\0\5\322\7\0\31\322\3\0\1\322\3\0\1\u0188"+
    "\52\0\1\u0188\27\0\1\u0188\66\0\1\u0189\37\0\1\177"+
    "\2\0\5\177\7\0\21\177\1\u018a\7\177\3\0\1\177"+
    "\27\0\1\177\2\0\5\177\7\0\16\177\1\u018b\12\177"+
    "\3\0\1\177\64\0\1\u018c\45\0\1\177\2\0\5\177"+
    "\7\0\23\177\1\u018d\5\177\3\0\1\177\72\0\1\u018e"+
    "\20\0\1\215\16\0\1\215\2\0\5\215\3\0\1\335"+
    "\3\0\6\215\1\u018f\22\215\1\0\1\336\1\0\1\215"+
    "\2\0\4\215\2\0\1\215\11\0\2\216\3\0\1\217"+
    "\1\216\1\0\5\217\3\0\1\335\3\0\31\217\1\0"+
    "\1\336\1\0\1\u0190\2\0\4\215\2\0\1\215\16\0"+
    "\1\215\2\0\5\215\3\0\1\335\3\0\31\215\1\0"+
    "\1\336\1\0\1\u0191\2\0\4\215\21\0\1\31\2\0"+
    "\5\31\7\0\31\31\3\0\1\u0192\102\0\1\u0193\54\0"+
    "\1\u0194\100\0\1\u0195\57\0\1\54\1\234\1\0\5\54"+
    "\7\0\31\54\3\0\1\u0196\102\0\1\u0197\54\0\1\u0198"+
    "\116\0\1\u0199\16\0\1\u0199\64\0\1\u019a\40\0\1\122"+
    "\2\0\4\122\1\u0102\7\0\31\122\3\0\1\122\36\0"+
    "\1\u0165\53\0\1\151\2\0\1\151\1\0\12\151\1\0"+
    "\25\151\1\u019b\24\151\1\0\10\151\45\0\1\u019c\116\0"+
    "\1\u019d\16\0\1\u019d\22\0\1\177\2\0\5\177\7\0"+
    "\16\177\1\u019e\12\177\3\0\1\177\27\0\1\177\2\0"+
    "\5\177\7\0\21\177\1\u019f\7\177\3\0\1\177\67\0"+
    "\1\u01a0\103\0\1\u01a1\16\0\1\u01a1\3\0\1\215\16\0"+
    "\1\u01a2\2\0\5\215\3\0\1\335\3\0\31\215\1\0"+
    "\1\336\1\0\1\215\2\0\4\215\2\0\1\215\11\0"+
    "\2\216\3\0\1\217\1\216\1\0\5\217\3\0\1\335"+
    "\3\0\24\217\1\u01a3\4\217\1\0\1\336\1\0\1\217"+
    "\2\0\4\215\2\0\1\215\16\0\1\215\2\0\5\215"+
    "\3\0\1\335\3\0\24\215\1\u01a4\4\215\1\0\1\336"+
    "\1\0\1\215\2\0\4\215\21\0\1\31\2\0\5\31"+
    "\7\0\24\31\1\u01a5\4\31\3\0\1\31\72\0\1\u01a6"+
    "\37\0\1\u01a7\116\0\1\u01a8\66\0\1\54\1\234\1\0"+
    "\5\54\7\0\24\54\1\u01a9\4\54\3\0\1\54\72\0"+
    "\1\u01aa\37\0\1\u01ab\104\0\1\u01ac\142\0\1\u01ad\20\0"+
    "\1\151\2\0\1\151\1\0\12\151\1\0\1\u01ae\51\151"+
    "\1\0\10\151\20\0\1\u01af\125\0\1\u01b0\57\0\1\177"+
    "\2\0\5\177\7\0\5\177\1\u01b1\23\177\3\0\1\177"+
    "\27\0\1\177\2\0\5\177\7\0\3\177\1\u01b2\25\177"+
    "\3\0\1\177\51\0\1\u01b3\103\0\1\u01b4\40\0\1\215"+
    "\16\0\1\u01b5\2\0\5\u01b5\3\0\1\335\3\0\31\u01b5"+
    "\1\0\1\336\1\0\1\u01b5\2\0\4\215\2\0\1\215"+
    "\11\0\2\216\3\0\1\217\1\216\1\0\5\217\3\0"+
    "\1\335\3\0\22\217\1\u01b6\6\217\1\0\1\336\1\0"+
    "\1\217\2\0\2\215\1\u01b7\1\215\2\0\1\215\16\0"+
    "\1\215\2\0\5\215\3\0\1\335\3\0\22\215\1\u01b7"+
    "\6\215\1\0\1\336\1\0\1\215\2\0\2\215\1\u01b7"+
    "\1\215\21\0\1\31\2\0\5\31\7\0\17\31\1\u01b8"+
    "\11\31\3\0\1\31\65\0\1\u01b9\44\0\1\54\1\234"+
    "\1\0\5\54\7\0\17\54\1\u01ba\11\54\3\0\1\54"+
    "\65\0\1\u01bb\102\0\1\u01bc\104\0\1\u01bd\42\0\1\177"+
    "\2\0\5\177\7\0\6\177\1\u01be\22\177\3\0\1\177"+
    "\67\0\1\u01bf\23\0\1\215\16\0\1\u01b5\1\366\1\0"+
    "\5\u01b5\3\0\1\335\3\0\31\u01b5\1\0\1\336\1\0"+
    "\1\u01b5\2\0\4\215\2\0\1\215\11\0\2\216\3\0"+
    "\1\217\1\216\1\0\5\217\3\0\1\335\3\0\4\217"+
    "\1\u01c0\24\217\1\0\1\336\1\0\1\217\2\0\4\215"+
    "\2\0\1\215\16\0\1\215\2\0\5\215\3\0\1\335"+
    "\3\0\4\215\1\u01c1\24\215\1\0\1\336\1\0\1\215"+
    "\2\0\4\215\21\0\1\31\2\0\5\31\7\0\3\31"+
    "\1\u01c2\25\31\3\0\1\31\51\0\1\u01c3\60\0\1\54"+
    "\1\234\1\0\5\54\7\0\3\54\1\u01c4\25\54\3\0"+
    "\1\54\51\0\1\u01c5\120\0\1\u01c6\42\0\1\177\2\0"+
    "\5\177\7\0\21\177\1\u01c7\7\177\3\0\1\177\67\0"+
    "\1\u01c8\23\0\1\215\11\0\2\216\3\0\1\217\1\216"+
    "\1\0\5\217\3\0\1\335\3\0\21\217\1\u01c9\7\217"+
    "\1\0\1\336\1\0\1\217\2\0\4\215\2\0\1\215"+
    "\16\0\1\215\2\0\5\215\3\0\1\335\3\0\21\215"+
    "\1\u01ca\7\215\1\0\1\336\1\0\1\215\2\0\4\215"+
    "\21\0\1\31\2\0\5\31\7\0\1\u01cb\30\31\3\0"+
    "\1\31\46\0\1\u01cc\63\0\1\54\1\234\1\0\5\54"+
    "\7\0\1\u01cd\30\54\3\0\1\54\46\0\1\u01ce\112\0"+
    "\1\u01cf\27\0\1\u01cf\23\0\1\177\2\0\5\177\7\0"+
    "\16\177\1\u01d0\12\177\3\0\1\177\56\0\1\u01d1\27\0"+
    "\1\u01d1\4\0\1\215\11\0\2\216\3\0\1\217\1\216"+
    "\1\0\5\217\3\0\1\335\3\0\21\217\1\u01d2\7\217"+
    "\1\0\1\336\1\0\1\217\2\0\4\215\2\0\1\215"+
    "\16\0\1\215\2\0\5\215\3\0\1\335\3\0\21\215"+
    "\1\u01d3\7\215\1\0\1\336\1\0\1\215\2\0\4\215"+
    "\21\0\1\31\2\0\5\31\7\0\23\31\1\u01d4\5\31"+
    "\3\0\1\31\71\0\1\u01d5\40\0\1\54\1\234\1\0"+
    "\5\54\7\0\23\54\1\u01d6\5\54\3\0\1\54\71\0"+
    "\1\u01d7\65\0\1\u01d8\55\0\1\177\2\0\5\177\7\0"+
    "\24\177\1\u01d9\4\177\3\0\1\177\54\0\1\u01da\36\0"+
    "\1\215\11\0\2\216\3\0\1\217\1\216\1\0\5\217"+
    "\3\0\1\335\3\0\10\217\1\u01db\20\217\1\0\1\336"+
    "\1\0\1\217\2\0\1\215\1\u01dc\2\215\2\0\1\215"+
    "\16\0\1\215\2\0\5\215\3\0\1\335\3\0\10\215"+
    "\1\u01dc\20\215\1\0\1\336\1\0\1\215\2\0\1\215"+
    "\1\u01dc\2\215\21\0\1\31\2\0\5\31\7\0\4\31"+
    "\1\u01dd\24\31\3\0\1\31\52\0\1\u01de\57\0\1\54"+
    "\1\234\1\0\5\54\7\0\4\54\1\u01df\24\54\3\0"+
    "\1\54\52\0\1\u01e0\105\0\1\u01e1\54\0\1\177\2\0"+
    "\5\177\7\0\17\177\1\u01e2\11\177\3\0\1\177\55\0"+
    "\1\u01e3\35\0\1\215\11\0\2\216\3\0\1\217\1\216"+
    "\1\0\5\217\3\0\1\335\3\0\6\217\1\u01e4\22\217"+
    "\1\0\1\336\1\0\1\217\2\0\4\215\2\0\1\215"+
    "\16\0\1\215\2\0\5\215\3\0\1\335\3\0\6\215"+
    "\1\u01e5\22\215\1\0\1\336\1\0\1\215\2\0\4\215"+
    "\63\0\1\u01e6\40\0\1\177\2\0\5\177\7\0\22\177"+
    "\1\u01e7\6\177\3\0\1\177\4\0\1\u01e8\64\0\1\u01e9"+
    "\21\0\1\215\11\0\2\216\3\0\1\217\1\216\1\0"+
    "\5\217\3\0\1\335\3\0\7\217\1\u01ea\21\217\1\0"+
    "\1\336\1\0\1\217\2\0\4\215\2\0\1\215\16\0"+
    "\1\215\2\0\5\215\3\0\1\335\3\0\7\215\1\u01eb"+
    "\21\215\1\0\1\336\1\0\1\215\2\0\4\215\62\0"+
    "\1\u01ec\16\0\1\u01ec\63\0\1\u01ed\16\0\1\u01ed\3\0"+
    "\1\215\11\0\2\216\3\0\1\217\1\216\1\0\5\217"+
    "\3\0\1\335\3\0\23\217\1\u01ee\5\217\1\0\1\336"+
    "\1\0\1\217\2\0\4\215\2\0\1\215\16\0\1\215"+
    "\2\0\5\215\3\0\1\335\3\0\23\215\1\u01ef\5\215"+
    "\1\0\1\336\1\0\1\215\2\0\4\215\2\0\1\215"+
    "\11\0\2\216\3\0\1\217\1\216\1\0\5\217\3\0"+
    "\1\335\3\0\22\217\1\u01f0\6\217\1\0\1\336\1\0"+
    "\1\217\2\0\2\215\1\u01f1\1\215\2\0\1\215\16\0"+
    "\1\215\2\0\5\215\3\0\1\335\3\0\22\215\1\u01f1"+
    "\6\215\1\0\1\336\1\0\1\215\2\0\2\215\1\u01f1"+
    "\1\215\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[27269];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\1\12\0\1\11\1\1\1\11\5\1\1\11"+
    "\4\1\1\11\3\1\2\11\1\1\1\11\3\1\1\11"+
    "\13\1\1\11\1\1\1\11\1\1\1\11\4\1\3\11"+
    "\1\1\1\11\1\1\2\11\4\1\1\11\3\1\2\11"+
    "\16\1\1\11\5\1\1\11\1\1\2\11\5\1\1\11"+
    "\10\1\1\11\1\1\1\11\1\1\1\11\4\1\1\11"+
    "\4\1\1\11\2\1\1\11\1\1\1\0\2\1\1\0"+
    "\4\1\1\0\3\1\1\0\2\1\1\0\4\1\2\0"+
    "\10\1\1\0\3\1\1\0\1\11\1\0\1\11\1\1"+
    "\2\0\2\11\2\0\2\1\1\0\12\1\3\0\15\1"+
    "\2\0\5\1\2\0\1\11\1\0\2\1\1\0\1\1"+
    "\1\0\4\1\1\11\1\0\1\1\2\0\2\1\1\0"+
    "\1\1\1\0\6\1\1\11\1\0\1\11\1\0\3\1"+
    "\1\0\5\1\1\0\5\1\2\0\14\1\2\0\2\1"+
    "\1\0\3\1\1\11\1\0\2\1\1\0\1\1\1\0"+
    "\3\1\2\0\1\1\1\0\1\1\1\0\1\11\3\1"+
    "\1\11\1\0\2\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\0\3\1\2\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\1\1\1\0\3\1"+
    "\2\0\1\1\1\0\1\1\1\0\3\1\1\0\1\1"+
    "\1\11\1\0\1\1\2\0\2\1\2\0\3\1\2\0"+
    "\2\1\1\0\1\1\2\0\1\1\1\0\4\1\2\0"+
    "\1\11\4\1\3\0\1\1\1\0\1\1\2\0\2\1"+
    "\1\0\1\1\2\0\1\1\1\0\1\1\3\0\1\1"+
    "\4\0\1\1\2\0\2\1\3\0\1\1\1\0\1\1"+
    "\2\0\1\11\1\1\2\0\1\11\1\0\1\1\2\0"+
    "\2\1\1\11\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\11\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\2\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\2\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\2\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\11\1\0\1\1\1\0\1\1\2\0"+
    "\1\1\1\11\1\0\1\1\1\0\2\11\1\1\1\0"+
    "\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[497];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ImpexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ImpexTypes.BEAN_SHELL_BODY;
            }
          // fall through
          case 83: break;
          case 2:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 84: break;
          case 3:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 85: break;
          case 4:
            { yybegin(YYINITIAL); return ImpexTypes.CRLF;
            }
          // fall through
          case 86: break;
          case 5:
            { return ImpexTypes.LINE_COMMENT;
            }
          // fall through
          case 87: break;
          case 6:
            { yybegin(FIELD_VALUE); return ImpexTypes.VALUE_SUBTYPE;
            }
          // fall through
          case 88: break;
          case 7:
            { yybegin(FIELD_VALUE); return ImpexTypes.FIELD_VALUE_SEPARATOR;
            }
          // fall through
          case 89: break;
          case 8:
            { return ImpexTypes.MACRO_VALUE;
            }
          // fall through
          case 90: break;
          case 9:
            { return ImpexTypes.LEFT_ROUND_BRACKET;
            }
          // fall through
          case 91: break;
          case 10:
            { return ImpexTypes.RIGHT_ROUND_BRACKET;
            }
          // fall through
          case 92: break;
          case 11:
            { return ImpexTypes.BOOLEAN;
            }
          // fall through
          case 93: break;
          case 12:
            { return ImpexTypes.COMMA;
            }
          // fall through
          case 94: break;
          case 13:
            { return ImpexTypes.DIGIT;
            }
          // fall through
          case 95: break;
          case 14:
            { return ImpexTypes.ASSIGN_VALUE;
            }
          // fall through
          case 96: break;
          case 15:
            { return ImpexTypes.LEFT_SQUARE_BRACKET;
            }
          // fall through
          case 97: break;
          case 16:
            { return ImpexTypes.RIGHT_SQUARE_BRACKET;
            }
          // fall through
          case 98: break;
          case 17:
            { yybegin(WAITING_MACRO_VALUE); return ImpexTypes.ASSIGN_VALUE;
            }
          // fall through
          case 99: break;
          case 18:
            { yybegin(HEADER_LINE); return ImpexTypes.HEADER_TYPE;
            }
          // fall through
          case 100: break;
          case 19:
            { return ImpexTypes.HEADER_PARAMETER_NAME;
            }
          // fall through
          case 101: break;
          case 20:
            { return ImpexTypes.DOT;
            }
          // fall through
          case 102: break;
          case 21:
            { return ImpexTypes.PARAMETERS_SEPARATOR;
            }
          // fall through
          case 103: break;
          case 22:
            { yybegin(WAITING_ATTR_OR_PARAM_VALUE); return ImpexTypes.ASSIGN_VALUE;
            }
          // fall through
          case 104: break;
          case 23:
            { yybegin(MODIFIERS_BLOCK); return ImpexTypes.LEFT_SQUARE_BRACKET;
            }
          // fall through
          case 105: break;
          case 24:
            { return ImpexTypes.ALTERNATIVE_PATTERN;
            }
          // fall through
          case 106: break;
          case 25:
            { return ImpexTypes.FIELD_VALUE;
            }
          // fall through
          case 107: break;
          case 26:
            { return ImpexTypes.FIELD_LIST_ITEM_SEPARATOR;
            }
          // fall through
          case 108: break;
          case 27:
            { return ImpexTypes.DEFAULT_PATH_DELIMITER;
            }
          // fall through
          case 109: break;
          case 28:
            { return ImpexTypes.FIELD_VALUE_SEPARATOR;
            }
          // fall through
          case 110: break;
          case 29:
            { return ImpexTypes.ALTERNATIVE_MAP_DELIMITER;
            }
          // fall through
          case 111: break;
          case 30:
            { return ImpexTypes.ATTRIBUTE_SEPARATOR;
            }
          // fall through
          case 112: break;
          case 31:
            { return ImpexTypes.ATTRIBUTE_NAME;
            }
          // fall through
          case 113: break;
          case 32:
            { yybegin(HEADER_LINE); return ImpexTypes.RIGHT_SQUARE_BRACKET;
            }
          // fall through
          case 114: break;
          case 33:
            { yybegin(MODIFIERS_BLOCK); return ImpexTypes.ALTERNATIVE_MAP_DELIMITER;
            }
          // fall through
          case 115: break;
          case 34:
            { return ImpexTypes.ATTRIBUTE_VALUE;
            }
          // fall through
          case 116: break;
          case 35:
            { yybegin(MODIFIERS_BLOCK); return ImpexTypes.ATTRIBUTE_SEPARATOR;
            }
          // fall through
          case 117: break;
          case 36:
            { yypushback(yylength()); yybegin(MACRO_USAGE);
            }
          // fall through
          case 118: break;
          case 37:
            { yybegin(USER_RIGHTS_HEADER_LINE); return ImpexTypes.CRLF;
            }
          // fall through
          case 119: break;
          case 38:
            { return ImpexTypes.CRLF;
            }
          // fall through
          case 120: break;
          case 39:
            { return ImpexTypes.PERMISSION;
            }
          // fall through
          case 121: break;
          case 40:
            { yybegin(USER_RIGHTS_WAIT_FOR_VALUE_LINE); return ImpexTypes.PARAMETERS_SEPARATOR;
            }
          // fall through
          case 122: break;
          case 41:
            { yybegin(USER_RIGHTS_VALUE_LINE); return ImpexTypes.CRLF;
            }
          // fall through
          case 123: break;
          case 42:
            { return ImpexTypes.PERMISSION_ALLOWED;
            }
          // fall through
          case 124: break;
          case 43:
            { return ImpexTypes.PERMISSION_DENIED;
            }
          // fall through
          case 125: break;
          case 44:
            { return ImpexTypes.DOUBLE_STRING;
            }
          // fall through
          case 126: break;
          case 45:
            { yybegin(BEAN_SHELL); return ImpexTypes.BEAN_SHELL_MARKER;
            }
          // fall through
          case 127: break;
          case 46:
            { return ImpexTypes.MACRO_USAGE;
            }
          // fall through
          case 128: break;
          case 47:
            { yypushback(yylength()); yybegin(WAITING_MACRO_CONFIG_USAGE);
            }
          // fall through
          case 129: break;
          case 48:
            { return ImpexTypes.SINGLE_STRING;
            }
          // fall through
          case 130: break;
          case 49:
            { return ImpexTypes.HEADER_SPECIAL_PARAMETER_NAME;
            }
          // fall through
          case 131: break;
          case 50:
            { return ImpexTypes.DOCUMENT_ID;
            }
          // fall through
          case 132: break;
          case 51:
            { yybegin(HEADER_LINE);
                                                              yypushback(1);
                                                              return ImpexTypes.FUNCTION;
            }
          // fall through
          case 133: break;
          case 52:
            { return ImpexTypes.MULTILINE_SEPARATOR;
            }
          // fall through
          case 134: break;
          case 53:
            { return ImpexTypes.FIELD_VALUE_PASSWORD_ENCODING_PREFIX;
            }
          // fall through
          case 135: break;
          case 54:
            { return ImpexTypes.DEFAULT_KEY_VALUE_DELIMITER;
            }
          // fall through
          case 136: break;
          case 55:
            { yybegin(WAITING_MACRO_VALUE); return ImpexTypes.MACRO_USAGE;
            }
          // fall through
          case 137: break;
          case 56:
            { yybegin(MACRO_DECLARATION);
                                                              /* Push back '='. */
                                                              yypushback(1);
                                                              /* Push back spaces. */
                                                              yypushback(yylength() - yytext().toString().trim().length());
                                                              return ImpexTypes.MACRO_NAME_DECLARATION;
            }
          // fall through
          case 138: break;
          case 57:
            { return ImpexTypes.COLLECTION_APPEND_PREFIX;
            }
          // fall through
          case 139: break;
          case 58:
            { return ImpexTypes.COLLECTION_REMOVE_PREFIX;
            }
          // fall through
          case 140: break;
          case 59:
            { return ImpexTypes.UID;
            }
          // fall through
          case 141: break;
          case 60:
            { return ImpexTypes.COLLECTION_MERGE_PREFIX;
            }
          // fall through
          case 142: break;
          case 61:
            { return ImpexTypes.FIELD_VALUE_JAR_PREFIX;
            }
          // fall through
          case 143: break;
          case 62:
            { return ImpexTypes.FIELD_VALUE_ZIP_PREFIX;
            }
          // fall through
          case 144: break;
          case 63:
            { return ImpexTypes.TYPE;
            }
          // fall through
          case 145: break;
          case 64:
            { return ImpexTypes.FIELD_VALUE_FILE_PREFIX;
            }
          // fall through
          case 146: break;
          case 65:
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_INSERT;
            }
          // fall through
          case 147: break;
          case 66:
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_REMOVE;
            }
          // fall through
          case 148: break;
          case 67:
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_UPDATE;
            }
          // fall through
          case 149: break;
          case 68:
            { return ImpexTypes.FIELD_VALUE_NULL;
            }
          // fall through
          case 150: break;
          case 69:
            { return ImpexTypes.HEADER_MODE_INSERT;
            }
          // fall through
          case 151: break;
          case 70:
            { return ImpexTypes.HEADER_MODE_REMOVE;
            }
          // fall through
          case 152: break;
          case 71:
            { return ImpexTypes.HEADER_MODE_UPDATE;
            }
          // fall through
          case 153: break;
          case 72:
            { return ImpexTypes.TARGET;
            }
          // fall through
          case 154: break;
          case 73:
            { return ImpexTypes.FIELD_VALUE_IGNORE;
            }
          // fall through
          case 155: break;
          case 74:
            { return ImpexTypes.FIELD_VALUE_EXPLODED_JAR_PREFIX;
            }
          // fall through
          case 156: break;
          case 75:
            { return ImpexTypes.PASSWORD;
            }
          // fall through
          case 157: break;
          case 76:
            { yypushback(4);
                                                                return ImpexTypes.FIELD_VALUE_HTTP_PREFIX;
            }
          // fall through
          case 158: break;
          case 77:
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_INSERT_UPDATE;
            }
          // fall through
          case 159: break;
          case 78:
            { return ImpexTypes.HEADER_MODE_INSERT_UPDATE;
            }
          // fall through
          case 160: break;
          case 79:
            { return ImpexTypes.MEMBEROFGROUPS;
            }
          // fall through
          case 161: break;
          case 80:
            { yybegin(YYINITIAL); return ImpexTypes.END_USERRIGHTS;
            }
          // fall through
          case 162: break;
          case 81:
            { yybegin(USER_RIGHTS_END); return ImpexTypes.END_USERRIGHTS;
            }
          // fall through
          case 163: break;
          case 82:
            { yybegin(USER_RIGHTS_START); return ImpexTypes.START_USERRIGHTS;
            }
          // fall through
          case 164: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
