// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Impex.flex

/*
 * This file is part of "hybris integration" plugin for Intellij IDEA.
 * Copyright (C) 2014-2016 Alexander Bartash <AlexanderBartash@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

package com.intellij.idea.plugin.hybris.impex;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.idea.plugin.hybris.impex.psi.ImpexTypes;
import com.intellij.psi.TokenType;
import com.intellij.psi.CustomHighlighterTokenType;


class ImpexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_MACRO_VALUE = 2;
  public static final int MACRO_DECLARATION = 4;
  public static final int HEADER_TYPE = 6;
  public static final int HEADER_LINE = 8;
  public static final int FIELD_VALUE = 10;
  public static final int BEAN_SHELL = 12;
  public static final int MODIFIERS_BLOCK = 14;
  public static final int WAITING_ATTR_OR_PARAM_VALUE = 16;
  public static final int HEADER_PARAMETERS = 18;
  public static final int MACRO_USAGE = 20;
  public static final int MACRO_CONFIG_USAGE = 22;
  public static final int WAITING_MACRO_CONFIG_USAGE = 24;
  public static final int USER_RIGHTS_START = 26;
  public static final int USER_RIGHTS_END = 28;
  public static final int USER_RIGHTS_HEADER_LINE = 30;
  public static final int USER_RIGHTS_WAIT_FOR_VALUE_LINE = 32;
  public static final int USER_RIGHTS_VALUE_LINE = 34;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10,  9,  9, 11, 11, 12, 12, 13, 13, 14, 14, 
    15, 15, 16, 16
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\2\u2000\1\u2100\7\u2000\1\u2200\1\u2300\1\u2400"+
    "\1\u2000\1\u2500\1\u2600\2\u2000\31\u1100\1\u2700\121\u1100\1\u2800"+
    "\4\u1100\1\u2900\1\u1100\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00"+
    "\1\u2f00\53\u1100\1\u3000\10\u3100\31\u2000\1\u1100\1\u3200\1\u3300"+
    "\1\u1100\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u1100\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u2000\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u2000"+
    "\1\u5000\1\u5100\1\u5200\1\u2000\3\u1100\1\u5300\1\u5400\1\u5500"+
    "\12\u2000\4\u1100\1\u5600\17\u2000\2\u1100\1\u5700\41\u2000\2\u1100"+
    "\1\u5800\1\u5900\2\u2000\1\u5a00\1\u5b00\27\u1100\1\u5c00\2\u1100"+
    "\1\u5d00\45\u2000\1\u1100\1\u5e00\1\u5f00\11\u2000\1\u6000\24\u2000"+
    "\1\u6100\1\u6200\1\u2000\1\u6300\1\u6400\1\u6500\1\u6600\2\u2000"+
    "\1\u6700\5\u2000\1\u6800\1\u6900\1\u6a00\5\u2000\1\u6b00\1\u6c00"+
    "\4\u2000\1\u6d00\2\u2000\1\u6e00\16\u2000\246\u1100\1\u6f00\20\u1100"+
    "\1\u7000\1\u7100\25\u1100\1\u7200\34\u1100\1\u7300\14\u2000\2\u1100"+
    "\1\u7400\u0b06\u2000\1\u2800\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\0\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\0\1\15\1\16\1\17\1\20\1\21\12\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\44"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\44\1\60"+
    "\1\61\1\62\1\63\1\64\1\0\1\65\1\0\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\44"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\44\1\60"+
    "\1\61\1\0\1\66\10\0\1\3\32\0\1\67\11\0"+
    "\1\70\12\0\1\70\4\0\1\70\5\0\27\70\1\0"+
    "\37\70\1\0\70\70\2\71\115\70\1\72\u0142\70\4\0"+
    "\14\70\16\0\5\70\7\0\1\70\1\0\1\70\21\0"+
    "\165\70\1\0\2\70\2\0\4\70\1\0\1\70\6\0"+
    "\1\70\1\0\3\70\1\0\1\70\1\0\24\70\1\0"+
    "\123\70\1\0\213\70\1\0\255\70\1\0\46\70\2\0"+
    "\1\70\6\0\51\70\10\0\55\70\1\0\1\70\1\0"+
    "\2\70\1\0\2\70\1\0\1\70\10\0\33\70\4\0"+
    "\4\70\35\0\13\70\5\0\112\70\4\0\146\70\1\0"+
    "\10\70\2\0\12\70\1\0\23\70\2\0\1\70\20\0"+
    "\73\70\2\0\145\70\16\0\66\70\4\0\1\70\2\0"+
    "\1\70\2\0\56\70\22\0\34\70\4\0\13\70\65\0"+
    "\25\70\1\0\10\70\25\0\17\70\1\0\201\70\2\0"+
    "\12\70\1\0\23\70\1\0\10\70\2\0\2\70\2\0"+
    "\26\70\1\0\7\70\1\0\1\70\3\0\4\70\2\0"+
    "\11\70\2\0\2\70\2\0\4\70\10\0\1\70\4\0"+
    "\2\70\1\0\5\70\2\0\14\70\12\0\1\70\1\0"+
    "\1\70\2\0\3\70\1\0\6\70\4\0\2\70\2\0"+
    "\26\70\1\0\7\70\1\0\2\70\1\0\2\70\1\0"+
    "\2\70\2\0\1\70\1\0\5\70\4\0\2\70\2\0"+
    "\3\70\3\0\1\70\7\0\4\70\1\0\1\70\7\0"+
    "\20\70\13\0\3\70\1\0\11\70\1\0\3\70\1\0"+
    "\26\70\1\0\7\70\1\0\2\70\1\0\5\70\2\0"+
    "\12\70\1\0\3\70\1\0\3\70\2\0\1\70\17\0"+
    "\4\70\2\0\12\70\11\0\7\70\1\0\3\70\1\0"+
    "\10\70\2\0\2\70\2\0\26\70\1\0\7\70\1\0"+
    "\2\70\1\0\5\70\2\0\11\70\2\0\2\70\2\0"+
    "\3\70\10\0\2\70\4\0\2\70\1\0\5\70\2\0"+
    "\12\70\1\0\1\70\20\0\2\70\1\0\6\70\3\0"+
    "\3\70\1\0\4\70\3\0\2\70\1\0\1\70\1\0"+
    "\2\70\3\0\2\70\3\0\3\70\3\0\14\70\4\0"+
    "\5\70\3\0\3\70\1\0\4\70\2\0\1\70\6\0"+
    "\1\70\16\0\12\70\20\0\15\70\1\0\3\70\1\0"+
    "\27\70\1\0\20\70\3\0\10\70\1\0\3\70\1\0"+
    "\4\70\7\0\2\70\1\0\3\70\5\0\4\70\2\0"+
    "\12\70\20\0\4\70\1\0\10\70\1\0\3\70\1\0"+
    "\27\70\1\0\12\70\1\0\5\70\2\0\11\70\1\0"+
    "\3\70\1\0\4\70\7\0\2\70\7\0\1\70\1\0"+
    "\4\70\2\0\12\70\1\0\2\70\15\0\4\70\1\0"+
    "\10\70\1\0\3\70\1\0\63\70\1\0\3\70\1\0"+
    "\5\70\5\0\4\70\7\0\5\70\2\0\12\70\12\0"+
    "\6\70\2\0\2\70\1\0\22\70\3\0\30\70\1\0"+
    "\11\70\1\0\1\70\2\0\7\70\3\0\1\70\4\0"+
    "\6\70\1\0\1\70\1\0\10\70\6\0\12\70\2\0"+
    "\2\70\15\0\72\70\5\0\17\70\1\0\12\70\47\0"+
    "\2\70\1\0\1\70\1\0\5\70\1\0\30\70\1\0"+
    "\1\70\1\0\27\70\2\0\5\70\1\0\1\70\1\0"+
    "\6\70\2\0\12\70\2\0\4\70\40\0\1\70\27\0"+
    "\2\70\6\0\12\70\13\0\1\70\1\0\1\70\1\0"+
    "\1\70\4\0\12\70\1\0\44\70\4\0\24\70\1\0"+
    "\22\70\1\0\44\70\11\0\1\70\71\0\112\70\6\0"+
    "\116\70\2\0\46\70\1\0\1\70\5\0\1\70\2\0"+
    "\53\70\1\0\u014d\70\1\0\4\70\2\0\7\70\1\0"+
    "\1\70\1\0\4\70\2\0\51\70\1\0\4\70\2\0"+
    "\41\70\1\0\4\70\2\0\7\70\1\0\1\70\1\0"+
    "\4\70\2\0\17\70\1\0\71\70\1\0\4\70\2\0"+
    "\103\70\2\0\3\70\40\0\20\70\20\0\126\70\2\0"+
    "\6\70\3\0\u016c\70\2\0\21\70\1\67\32\70\5\0"+
    "\113\70\3\0\13\70\7\0\15\70\1\0\7\70\13\0"+
    "\25\70\13\0\24\70\14\0\15\70\1\0\3\70\1\0"+
    "\2\70\14\0\124\70\3\0\1\70\4\0\2\70\2\0"+
    "\12\70\41\0\3\70\2\0\12\70\6\0\131\70\7\0"+
    "\53\70\5\0\106\70\12\0\37\70\1\0\14\70\4\0"+
    "\14\70\12\0\50\70\2\0\5\70\13\0\54\70\4\0"+
    "\32\70\6\0\12\70\46\0\34\70\4\0\77\70\1\0"+
    "\35\70\2\0\13\70\6\0\12\70\15\0\1\70\10\0"+
    "\17\70\101\0\114\70\4\0\12\70\21\0\11\70\14\0"+
    "\164\70\14\0\70\70\10\0\12\70\3\0\61\70\2\0"+
    "\11\70\7\0\53\70\2\0\3\70\20\0\3\70\1\0"+
    "\47\70\5\0\372\70\1\0\33\70\2\0\6\70\2\0"+
    "\46\70\2\0\6\70\2\0\10\70\1\0\1\70\1\0"+
    "\1\70\1\0\1\70\1\0\37\70\2\0\65\70\1\0"+
    "\7\70\1\0\1\70\3\0\3\70\1\0\7\70\3\0"+
    "\4\70\2\0\6\70\4\0\15\70\5\0\3\70\1\0"+
    "\7\70\3\0\13\67\35\0\2\3\5\0\1\67\17\0"+
    "\2\70\23\0\1\70\12\0\1\67\21\0\1\70\15\0"+
    "\1\70\20\0\15\70\63\0\41\70\21\0\1\70\4\0"+
    "\1\70\2\0\12\70\1\0\1\70\3\0\5\70\6\0"+
    "\1\70\1\0\1\70\1\0\1\70\1\0\4\70\1\0"+
    "\13\70\2\0\4\70\5\0\5\70\4\0\1\70\21\0"+
    "\51\70\u022d\0\64\70\26\0\57\70\1\0\57\70\1\0"+
    "\205\70\6\0\11\70\14\0\46\70\1\0\1\70\5\0"+
    "\1\70\2\0\70\70\7\0\1\70\17\0\30\70\11\0"+
    "\7\70\1\0\7\70\1\0\7\70\1\0\7\70\1\0"+
    "\7\70\1\0\7\70\1\0\7\70\1\0\7\70\1\0"+
    "\40\70\57\0\1\70\320\0\1\67\4\0\3\70\31\0"+
    "\17\70\1\0\5\70\2\0\5\70\4\0\126\70\2\0"+
    "\2\70\2\0\3\70\1\0\132\70\1\0\4\70\5\0"+
    "\53\70\1\0\136\70\21\0\33\70\65\0\306\70\112\0"+
    "\360\70\20\0\215\70\103\0\56\70\2\0\15\70\3\0"+
    "\34\70\24\0\63\70\1\0\12\70\1\0\163\70\45\0"+
    "\11\70\2\0\147\70\2\0\65\70\2\0\5\70\60\0"+
    "\61\70\30\0\64\70\14\0\106\70\12\0\12\70\6\0"+
    "\30\70\3\0\1\70\1\0\61\70\2\0\44\70\14\0"+
    "\35\70\3\0\101\70\16\0\13\70\6\0\37\70\1\0"+
    "\67\70\11\0\16\70\2\0\12\70\6\0\27\70\3\0"+
    "\111\70\30\0\3\70\2\0\20\70\2\0\5\70\12\0"+
    "\6\70\2\0\6\70\2\0\6\70\11\0\7\70\1\0"+
    "\7\70\1\0\53\70\1\0\14\70\10\0\173\70\1\0"+
    "\2\70\2\0\12\70\6\0\244\70\14\0\27\70\4\0"+
    "\61\70\4\0\u0100\73\156\70\2\0\152\70\46\0\7\70"+
    "\14\0\5\70\5\0\14\70\1\0\15\70\1\0\5\70"+
    "\1\0\1\70\1\0\2\70\1\0\2\70\1\0\154\70"+
    "\41\0\153\70\22\0\100\70\2\0\66\70\50\0\14\70"+
    "\4\0\20\70\20\0\20\70\3\0\2\70\30\0\3\70"+
    "\40\0\5\70\1\0\207\70\23\0\12\70\7\0\32\70"+
    "\4\0\1\70\1\0\32\70\13\0\131\70\3\0\6\70"+
    "\2\0\6\70\2\0\6\70\2\0\3\70\43\0\14\70"+
    "\1\0\32\70\1\0\23\70\1\0\2\70\1\0\17\70"+
    "\2\0\16\70\42\0\173\70\105\0\65\70\210\0\1\70"+
    "\202\0\35\70\3\0\61\70\17\0\1\70\37\0\40\70"+
    "\15\0\36\70\5\0\53\70\5\0\36\70\2\0\44\70"+
    "\4\0\10\70\1\0\5\70\52\0\236\70\2\0\12\70"+
    "\6\0\44\70\4\0\44\70\4\0\50\70\10\0\64\70"+
    "\234\0\67\70\11\0\26\70\12\0\10\70\230\0\6\70"+
    "\2\0\1\70\1\0\54\70\1\0\2\70\3\0\1\70"+
    "\2\0\27\70\12\0\27\70\11\0\37\70\101\0\23\70"+
    "\1\0\2\70\12\0\26\70\12\0\32\70\106\0\70\70"+
    "\6\0\2\70\100\0\4\70\1\0\2\70\5\0\10\70"+
    "\1\0\3\70\1\0\35\70\2\0\3\70\4\0\1\70"+
    "\40\0\35\70\3\0\35\70\43\0\10\70\1\0\36\70"+
    "\31\0\66\70\12\0\26\70\12\0\23\70\15\0\22\70"+
    "\156\0\111\70\67\0\63\70\15\0\63\70\15\0\50\70"+
    "\10\0\12\70\306\0\35\70\12\0\1\70\10\0\41\70"+
    "\217\0\27\70\11\0\107\70\37\0\12\70\17\0\74\70"+
    "\25\0\31\70\7\0\12\70\6\0\65\70\1\0\12\70"+
    "\4\0\3\70\11\0\44\70\2\0\1\70\11\0\105\70"+
    "\4\0\4\70\3\0\13\70\1\0\1\70\43\0\22\70"+
    "\1\0\45\70\6\0\1\70\101\0\7\70\1\0\1\70"+
    "\1\0\4\70\1\0\17\70\1\0\12\70\7\0\73\70"+
    "\5\0\12\70\6\0\4\70\1\0\10\70\2\0\2\70"+
    "\2\0\26\70\1\0\7\70\1\0\2\70\1\0\5\70"+
    "\1\0\12\70\2\0\2\70\2\0\3\70\2\0\1\70"+
    "\6\0\1\70\5\0\7\70\2\0\7\70\3\0\5\70"+
    "\213\0\113\70\5\0\12\70\4\0\2\70\40\0\106\70"+
    "\1\0\1\70\10\0\12\70\246\0\66\70\2\0\11\70"+
    "\27\0\6\70\42\0\101\70\3\0\1\70\13\0\12\70"+
    "\46\0\71\70\7\0\12\70\66\0\33\70\2\0\17\70"+
    "\4\0\12\70\306\0\73\70\145\0\112\70\25\0\1\70"+
    "\240\0\10\70\2\0\56\70\2\0\10\70\1\0\2\70"+
    "\33\0\77\70\10\0\1\70\10\0\112\70\3\0\1\70"+
    "\42\0\71\70\7\0\11\70\1\0\55\70\1\0\11\70"+
    "\17\0\12\70\30\0\36\70\2\0\26\70\1\0\16\70"+
    "\111\0\7\70\1\0\2\70\1\0\54\70\3\0\1\70"+
    "\1\0\2\70\1\0\11\70\10\0\12\70\6\0\6\70"+
    "\1\0\2\70\1\0\45\70\1\0\2\70\1\0\6\70"+
    "\7\0\12\70\u0136\0\27\70\11\0\232\70\146\0\157\70"+
    "\21\0\304\70\274\0\57\70\321\0\107\70\271\0\71\70"+
    "\7\0\37\70\1\0\12\70\146\0\36\70\2\0\5\70"+
    "\13\0\67\70\11\0\4\70\14\0\12\70\11\0\25\70"+
    "\5\0\23\70\260\0\100\70\200\0\113\70\4\0\71\70"+
    "\7\0\21\70\100\0\2\70\1\0\1\70\34\0\370\70"+
    "\10\0\363\70\15\0\37\70\61\0\3\70\21\0\4\70"+
    "\10\0\u018c\70\4\0\153\70\5\0\15\70\3\0\11\70"+
    "\7\0\12\70\3\0\2\70\306\0\5\70\3\0\6\70"+
    "\10\0\10\70\2\0\7\70\36\0\4\70\224\0\3\70"+
    "\273\0\125\70\1\0\107\70\1\0\2\70\2\0\1\70"+
    "\2\0\2\70\2\0\4\70\1\0\14\70\1\0\1\70"+
    "\1\0\7\70\1\0\101\70\1\0\4\70\2\0\10\70"+
    "\1\0\7\70\1\0\34\70\1\0\4\70\1\0\5\70"+
    "\1\0\1\70\3\0\7\70\1\0\u0154\70\2\0\31\70"+
    "\1\0\31\70\1\0\37\70\1\0\31\70\1\0\37\70"+
    "\1\0\31\70\1\0\37\70\1\0\31\70\1\0\37\70"+
    "\1\0\31\70\1\0\10\70\2\0\151\70\4\0\62\70"+
    "\10\0\1\70\16\0\1\70\26\0\5\70\1\0\17\70"+
    "\120\0\7\70\1\0\21\70\2\0\7\70\1\0\2\70"+
    "\1\0\5\70\325\0\55\70\3\0\16\70\2\0\12\70"+
    "\4\0\1\70\u0171\0\72\70\6\0\305\70\13\0\7\70"+
    "\51\0\114\70\4\0\12\70\246\0\4\70\1\0\33\70"+
    "\1\0\2\70\1\0\1\70\2\0\1\70\1\0\12\70"+
    "\1\0\4\70\1\0\1\70\1\0\1\70\6\0\1\70"+
    "\4\0\1\70\1\0\1\70\1\0\1\70\1\0\3\70"+
    "\1\0\2\70\1\0\1\70\2\0\1\70\1\0\1\70"+
    "\1\0\1\70\1\0\1\70\1\0\1\70\1\0\2\70"+
    "\1\0\1\70\2\0\4\70\1\0\7\70\1\0\4\70"+
    "\1\0\4\70\1\0\1\70\1\0\12\70\1\0\21\70"+
    "\5\0\3\70\1\0\5\70\1\0\21\70\164\0\32\70"+
    "\6\0\32\70\6\0\32\70\166\0\327\70\51\0\65\70"+
    "\13\0\336\70\2\0\u0182\70\16\0\u0131\70\37\0\36\70"+
    "\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29952];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\12\0\1\2\1\3\2\4\1\2\1\5"+
    "\1\2\1\6\1\7\3\6\1\2\4\10\1\11\1\12"+
    "\1\13\1\14\1\13\1\15\1\10\1\16\5\10\1\13"+
    "\4\10\1\13\1\17\1\10\1\20\1\10\1\21\1\22"+
    "\2\2\1\23\1\24\1\25\1\26\1\2\1\27\1\2"+
    "\1\30\4\31\1\32\1\13\1\31\1\15\1\33\1\34"+
    "\5\31\1\13\2\31\1\13\2\31\1\35\1\1\1\3"+
    "\1\1\1\2\1\36\1\37\1\40\1\41\4\42\1\13"+
    "\1\43\1\15\2\42\1\13\2\42\1\13\1\2\2\44"+
    "\2\45\2\46\1\5\1\2\1\47\1\50\4\47\2\51"+
    "\1\2\1\52\1\53\1\0\1\54\1\55\1\0\4\56"+
    "\1\0\3\6\1\0\2\57\1\0\1\60\1\15\2\10"+
    "\2\0\1\61\7\10\1\0\2\56\1\62\1\0\1\63"+
    "\1\0\2\64\2\0\1\65\2\0\2\31\1\0\1\31"+
    "\1\13\4\31\2\0\1\1\1\54\2\56\1\42\1\60"+
    "\5\42\2\66\2\0\5\47\2\0\1\67\1\0\2\56"+
    "\1\0\1\6\1\0\2\6\2\57\1\60\1\0\1\15"+
    "\2\0\2\10\1\0\1\10\1\0\4\10\2\56\1\70"+
    "\1\0\1\71\1\0\1\15\2\31\1\0\6\31\1\0"+
    "\1\1\2\56\1\60\1\42\1\15\4\42\2\66\2\0"+
    "\2\47\1\0\2\47\2\72\1\0\2\56\1\0\1\6"+
    "\1\0\2\6\1\57\2\0\1\10\1\0\1\10\1\0"+
    "\1\13\2\10\1\56\1\73\1\0\2\31\1\0\1\31"+
    "\1\74\1\75\1\56\1\42\1\66\2\0\2\47\1\0"+
    "\1\47\1\76\1\0\2\56\1\0\1\6\1\0\2\6"+
    "\1\57\2\0\1\10\1\0\1\10\1\0\2\10\1\56"+
    "\1\0\1\31\1\77\1\0\1\56\1\42\1\66\2\0"+
    "\2\47\1\0\1\47\2\0\1\56\1\0\2\100\1\101"+
    "\1\102\2\0\1\103\2\104\1\105\1\106\3\0\1\42"+
    "\2\0\2\47\1\0\1\107\2\0\1\56\1\0\1\6"+
    "\3\0\1\10\4\0\1\42\2\0\2\47\3\0\1\56"+
    "\1\0\1\6\2\0\1\110\1\10\2\0\1\111\1\0"+
    "\1\42\2\0\1\47\2\112\1\0\2\56\1\0\1\6"+
    "\1\0\1\10\1\0\1\113\1\0\1\47\1\0\1\56"+
    "\1\0\1\6\1\0\1\10\2\0\1\47\1\0\1\56"+
    "\1\0\1\6\1\0\1\10\2\0\1\47\1\0\1\56"+
    "\1\0\1\6\1\0\1\10\2\0\1\47\1\0\1\56"+
    "\1\0\2\114\2\115\1\0\1\47\1\0\1\56\2\0"+
    "\2\116\1\0\1\56\1\0\1\117\1\120\1\56\1\0"+
    "\2\121";

  private static int [] zzUnpackAction() {
    int [] result = new int[465];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384"+
    "\0\u03c0\0\u03fc\0\u0438\0\u03fc\0\u0474\0\u04b0\0\u04ec\0\u0528"+
    "\0\u0564\0\u03fc\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u03fc\0\u04b0"+
    "\0\u0690\0\u06cc\0\u03fc\0\u03fc\0\u0708\0\u03fc\0\u0744\0\u0780"+
    "\0\u07bc\0\u03fc\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u08e8\0\u0924"+
    "\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0834\0\u03fc\0\u0a50\0\u03fc"+
    "\0\u0a8c\0\u03fc\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u03fc\0\u03fc"+
    "\0\u03fc\0\u07f8\0\u03fc\0\u0bb8\0\u03fc\0\u03fc\0\u04b0\0\u0b04"+
    "\0\u0bf4\0\u03fc\0\u0c30\0\u0c6c\0\u0ca8\0\u03fc\0\u03fc\0\u07bc"+
    "\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0ce4"+
    "\0\u0e88\0\u0bb8\0\u03fc\0\u0ec4\0\u0f00\0\u0f3c\0\u06cc\0\u03fc"+
    "\0\u0f78\0\u03fc\0\u03fc\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4"+
    "\0\u03fc\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u120c\0\u0fb4"+
    "\0\u1248\0\u03fc\0\u1284\0\u03fc\0\u12c0\0\u03fc\0\u12fc\0\u1338"+
    "\0\u1374\0\u13b0\0\u03fc\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u03fc"+
    "\0\u14dc\0\u1518\0\u03fc\0\u0ce4\0\u04b0\0\u1554\0\u1338\0\u1590"+
    "\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770"+
    "\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c\0\u18d8\0\u1914\0\u1950"+
    "\0\u198c\0\u19c8\0\u07f8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4"+
    "\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u0b40\0\u1c5c\0\u03fc"+
    "\0\u1c98\0\u03fc\0\u1cd4\0\u1d10\0\u1d4c\0\u03fc\0\u1d88\0\u1dc4"+
    "\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4"+
    "\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184"+
    "\0\u21c0\0\u21fc\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u2364"+
    "\0\u23a0\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508\0\u2544"+
    "\0\u2580\0\u03fc\0\u25bc\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u26e8"+
    "\0\u2724\0\u2760\0\u279c\0\u27d8\0\u03fc\0\u2814\0\u2850\0\u288c"+
    "\0\u28c8\0\u2904\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c"+
    "\0\u2aa8\0\u2ae4\0\u2b20\0\u2b5c\0\u03fc\0\u2b98\0\u03fc\0\u2bd4"+
    "\0\u1dc4\0\u2c10\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78"+
    "\0\u2db4\0\u2df0\0\u2e2c\0\u2e68\0\u2ea4\0\u2ee0\0\u0fb4\0\u2f1c"+
    "\0\u21fc\0\u2f58\0\u2f94\0\u2fd0\0\u300c\0\u3048\0\u3084\0\u30c0"+
    "\0\u30fc\0\u3138\0\u3174\0\u31b0\0\u31ec\0\u3228\0\u13b0\0\u03fc"+
    "\0\u3264\0\u32a0\0\u32dc\0\u3318\0\u3354\0\u3390\0\u33cc\0\u3408"+
    "\0\u3444\0\u3480\0\u34bc\0\u34f8\0\u3534\0\u3570\0\u35ac\0\u03fc"+
    "\0\u35e8\0\u3624\0\u3660\0\u03fc\0\u369c\0\u36d8\0\u3714\0\u3750"+
    "\0\u378c\0\u03fc\0\u03fc\0\u37c8\0\u3804\0\u3840\0\u387c\0\u38b8"+
    "\0\u38f4\0\u3930\0\u396c\0\u39a8\0\u13b0\0\u39e4\0\u3a20\0\u3a5c"+
    "\0\u3a98\0\u3ad4\0\u3b10\0\u3b4c\0\u3b88\0\u3bc4\0\u3c00\0\u3c3c"+
    "\0\u3c78\0\u3cb4\0\u3cf0\0\u3d2c\0\u3d68\0\u3da4\0\u3de0\0\u3e1c"+
    "\0\u3e58\0\u03fc\0\u3e94\0\u3ed0\0\u3f0c\0\u3f48\0\u3f84\0\u3fc0"+
    "\0\u3ffc\0\u4038\0\u4074\0\u40b0\0\u40ec\0\u4128\0\u4164\0\u41a0"+
    "\0\u41dc\0\u4218\0\u0564\0\u0564\0\u4254\0\u4290\0\u03fc\0\u42cc"+
    "\0\u4308\0\u0834\0\u0834\0\u4344\0\u4380\0\u43bc\0\u43f8\0\u4434"+
    "\0\u4470\0\u44ac\0\u44e8\0\u4524\0\u13b0\0\u4560\0\u459c\0\u45d8"+
    "\0\u4614\0\u4650\0\u468c\0\u46c8\0\u4704\0\u4740\0\u477c\0\u47b8"+
    "\0\u47f4\0\u4830\0\u486c\0\u48a8\0\u48e4\0\u4920\0\u495c\0\u4998"+
    "\0\u49d4\0\u4a10\0\u4a4c\0\u4a88\0\u4ac4\0\u4b00\0\u279c\0\u03fc"+
    "\0\u4b3c\0\u4b78\0\u2b20\0\u03fc\0\u4bb4\0\u2ea4\0\u3048\0\u4bf0"+
    "\0\u4c2c\0\u13b0\0\u03fc\0\u4c68\0\u4ca4\0\u4ce0\0\u4d1c\0\u4d58"+
    "\0\u4d94\0\u4dd0\0\u4e0c\0\u03fc\0\u4e48\0\u4e84\0\u4ec0\0\u4efc"+
    "\0\u4f38\0\u4f74\0\u4fb0\0\u4fec\0\u5028\0\u5064\0\u50a0\0\u50dc"+
    "\0\u5118\0\u5154\0\u5190\0\u51cc\0\u5208\0\u5244\0\u5280\0\u52bc"+
    "\0\u52f8\0\u5334\0\u5370\0\u53ac\0\u53e8\0\u5424\0\u5460\0\u549c"+
    "\0\u54d8\0\u5514\0\u5550\0\u558c\0\u0564\0\u03fc\0\u0834\0\u03fc"+
    "\0\u55c8\0\u5604\0\u5640\0\u567c\0\u56b8\0\u56f4\0\u13b0\0\u03fc"+
    "\0\u5730\0\u576c\0\u57a8\0\u03fc\0\u03fc\0\u57e4\0\u5820\0\u1608"+
    "\0\u1590";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[465];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\22\1\23\1\24\1\0\1\25\1\26\1\27\1\30"+
    "\7\22\1\31\2\22\1\31\1\22\1\32\5\22\10\31"+
    "\1\33\7\31\1\34\2\31\1\35\4\31\3\22\1\31"+
    "\3\22\1\36\1\22\1\0\1\37\1\23\1\24\1\37"+
    "\1\25\1\40\1\37\1\41\2\37\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\2\37\1\50\2\37\1\51\1\52"+
    "\2\37\1\53\5\54\1\55\2\54\1\56\1\57\3\54"+
    "\1\60\2\54\1\61\1\54\1\62\1\63\1\54\1\64"+
    "\1\65\1\54\1\66\1\67\1\70\1\54\3\37\1\71"+
    "\2\37\1\22\1\23\1\24\1\0\1\25\21\22\1\72"+
    "\44\22\1\0\1\22\1\23\1\24\1\0\1\25\12\22"+
    "\1\73\2\22\1\73\7\22\30\73\3\22\1\73\5\22"+
    "\1\0\1\22\1\23\1\24\1\0\1\25\2\22\1\74"+
    "\1\22\1\75\1\22\1\43\1\44\1\22\1\46\1\76"+
    "\1\77\1\22\1\76\1\22\1\100\1\22\1\101\2\22"+
    "\1\102\30\76\1\103\1\104\1\70\1\76\1\105\4\22"+
    "\1\0\1\106\1\23\1\24\1\106\1\25\1\107\1\106"+
    "\1\110\3\106\1\111\1\106\1\45\1\112\1\113\1\106"+
    "\1\114\1\115\1\116\1\117\1\120\4\106\5\121\1\122"+
    "\1\121\1\123\1\121\1\124\3\121\1\125\4\121\1\126"+
    "\2\121\1\127\1\130\1\131\1\106\1\132\1\106\1\121"+
    "\1\133\5\106\1\134\1\135\1\24\1\134\1\25\1\136"+
    "\66\134\1\22\1\23\1\24\1\0\1\25\1\26\1\22"+
    "\1\74\2\22\1\137\3\22\1\140\2\141\1\22\1\141"+
    "\3\22\1\101\3\22\30\141\2\22\1\142\1\141\1\143"+
    "\4\22\1\0\1\144\1\23\1\24\1\144\1\25\1\145"+
    "\1\144\1\146\2\144\1\147\2\144\1\150\1\151\1\150"+
    "\2\144\1\152\14\144\1\153\3\144\1\154\3\144\1\155"+
    "\4\144\1\156\2\144\1\157\1\160\3\144\1\142\7\144"+
    "\1\22\1\23\3\0\66\22\1\0\1\22\1\23\1\24"+
    "\1\0\1\25\2\22\1\161\63\22\1\0\1\162\1\23"+
    "\1\24\1\0\1\25\2\162\1\163\63\162\1\0\1\22"+
    "\1\23\1\164\1\0\1\165\17\22\1\100\46\22\1\0"+
    "\1\22\1\23\1\24\1\0\1\25\17\22\1\100\46\22"+
    "\1\0\1\22\1\23\1\166\1\0\1\167\1\22\1\170"+
    "\1\171\7\22\1\172\2\22\1\172\1\22\1\173\5\22"+
    "\14\172\1\174\2\172\1\175\2\172\1\176\1\177\4\172"+
    "\3\22\1\172\5\22\1\0\1\22\1\23\1\200\1\0"+
    "\1\201\2\22\1\171\7\22\1\172\2\22\1\172\1\22"+
    "\1\100\5\22\14\172\1\174\2\172\1\175\2\172\1\176"+
    "\1\177\4\172\3\22\1\172\5\22\1\0\1\22\1\23"+
    "\1\200\1\0\1\201\1\22\1\170\1\202\5\22\1\203"+
    "\1\46\1\204\1\77\1\22\1\121\1\22\1\117\5\22"+
    "\30\121\3\22\1\121\5\22\76\0\1\23\74\0\1\24"+
    "\71\0\5\205\1\206\66\205\2\170\1\0\1\170\1\0"+
    "\3\170\1\207\63\170\1\0\1\210\11\0\2\211\2\0"+
    "\1\212\1\211\1\0\1\212\7\0\2\212\1\213\16\212"+
    "\1\214\6\212\3\0\1\212\2\0\2\210\1\215\20\0"+
    "\1\31\2\0\1\31\7\0\30\31\3\0\1\31\25\0"+
    "\1\31\2\0\1\31\7\0\15\31\1\216\12\31\3\0"+
    "\1\31\25\0\1\31\2\0\1\31\7\0\4\31\1\217"+
    "\23\31\3\0\1\31\25\0\1\31\2\0\1\31\7\0"+
    "\17\31\1\220\10\31\3\0\1\31\55\0\1\221\43\0"+
    "\1\222\2\0\1\222\7\0\2\222\1\223\25\222\3\0"+
    "\1\222\6\0\2\224\1\0\1\224\1\0\5\224\1\225"+
    "\61\224\22\0\1\226\70\0\1\54\1\227\1\0\1\50"+
    "\7\0\30\54\3\0\1\54\25\0\1\54\1\230\1\0"+
    "\1\50\7\0\30\54\3\0\1\54\50\0\1\231\4\0"+
    "\1\232\21\0\1\231\21\0\1\233\2\0\1\233\7\0"+
    "\30\233\3\0\1\233\25\0\1\54\1\227\1\0\1\54"+
    "\7\0\30\54\3\0\1\54\25\0\1\54\1\227\1\0"+
    "\1\54\7\0\1\234\27\54\3\0\1\54\25\0\1\54"+
    "\1\227\1\0\1\54\7\0\15\54\1\235\12\54\3\0"+
    "\1\54\25\0\1\54\1\227\1\0\1\54\7\0\1\65"+
    "\27\54\3\0\1\54\25\0\1\54\1\227\1\0\1\54"+
    "\7\0\4\54\1\236\23\54\3\0\1\54\25\0\1\54"+
    "\1\227\1\0\1\54\7\0\4\54\1\237\23\54\3\0"+
    "\1\54\25\0\1\54\1\227\1\0\1\54\7\0\20\54"+
    "\1\240\7\54\3\0\1\54\25\0\1\54\1\227\1\0"+
    "\1\54\7\0\17\54\1\241\10\54\3\0\1\54\25\0"+
    "\1\54\1\227\1\0\1\54\7\0\1\242\27\54\3\0"+
    "\1\54\7\0\4\67\56\0\1\67\3\0\1\67\53\0"+
    "\1\243\43\0\1\73\2\0\1\73\7\0\30\73\3\0"+
    "\1\73\25\0\1\244\2\0\1\244\7\0\2\244\1\245"+
    "\25\244\3\0\1\244\25\0\1\246\2\0\1\246\7\0"+
    "\30\246\3\0\1\246\7\0\1\247\11\0\1\250\3\0"+
    "\1\76\1\251\1\0\1\76\6\0\1\251\30\76\3\0"+
    "\1\76\10\0\1\252\1\0\1\253\104\0\1\254\1\0"+
    "\1\255\73\0\1\121\2\0\1\115\4\0\1\256\2\0"+
    "\30\121\3\0\1\121\54\0\1\257\44\0\1\121\1\260"+
    "\1\0\1\115\7\0\30\121\3\0\1\121\25\0\1\121"+
    "\2\0\1\121\7\0\30\121\3\0\1\121\25\0\1\121"+
    "\2\0\1\121\7\0\1\261\7\121\1\262\17\121\3\0"+
    "\1\121\3\0\1\263\21\0\1\121\2\0\1\121\7\0"+
    "\22\121\1\264\5\121\3\0\1\121\25\0\1\121\2\0"+
    "\1\121\7\0\1\265\27\121\3\0\1\121\25\0\1\121"+
    "\2\0\1\121\7\0\4\121\1\266\23\121\3\0\1\121"+
    "\25\0\1\121\2\0\1\121\7\0\20\121\1\267\7\121"+
    "\3\0\1\121\25\0\1\121\2\0\1\121\7\0\1\270"+
    "\27\121\3\0\1\121\25\0\1\121\2\0\1\121\7\0"+
    "\10\121\1\271\17\121\3\0\1\121\3\0\1\272\2\0"+
    "\2\134\1\0\1\134\1\0\70\134\1\135\1\0\1\134"+
    "\1\0\67\134\2\136\1\273\1\136\1\273\1\274\66\136"+
    "\17\0\2\141\1\0\1\141\7\0\30\141\3\0\1\141"+
    "\6\0\1\144\2\0\1\144\1\0\11\144\1\0\45\144"+
    "\1\0\7\144\1\145\2\205\1\145\1\205\1\275\10\145"+
    "\1\205\45\145\1\205\7\145\1\144\2\0\1\144\1\0"+
    "\11\144\1\0\1\276\2\144\1\276\7\144\2\276\1\277"+
    "\25\276\2\144\1\0\1\276\6\144\1\300\1\224\1\0"+
    "\1\300\1\0\5\300\1\301\3\300\1\224\45\300\1\224"+
    "\7\300\1\144\2\0\1\144\1\0\11\144\1\0\3\144"+
    "\1\152\41\144\1\0\10\144\2\0\1\144\1\0\11\144"+
    "\1\0\1\144\1\302\1\144\1\152\41\144\1\0\10\144"+
    "\2\0\1\144\1\0\11\144\1\0\13\144\1\303\31\144"+
    "\1\0\10\144\2\0\1\144\1\0\11\144\1\0\13\144"+
    "\1\160\31\144\1\0\10\144\2\0\1\144\1\0\11\144"+
    "\1\0\17\144\1\304\25\144\1\0\10\144\2\0\1\144"+
    "\1\0\11\144\1\0\33\144\1\305\11\144\1\0\10\144"+
    "\2\0\1\144\1\0\11\144\1\0\13\144\1\306\31\144"+
    "\1\0\7\144\17\0\1\307\2\0\1\307\7\0\2\307"+
    "\1\310\25\307\3\0\1\307\42\0\1\311\41\0\1\164"+
    "\73\0\1\166\71\0\2\170\1\0\1\170\1\0\67\170"+
    "\36\0\1\312\54\0\1\172\2\0\1\172\7\0\30\172"+
    "\3\0\1\172\25\0\1\172\2\0\1\172\7\0\4\172"+
    "\1\313\23\172\3\0\1\172\25\0\1\172\2\0\1\172"+
    "\7\0\1\314\27\172\3\0\1\172\25\0\1\172\2\0"+
    "\1\172\7\0\1\315\25\172\1\316\1\172\3\0\1\172"+
    "\25\0\1\172\2\0\1\172\7\0\10\172\1\317\17\172"+
    "\3\0\1\172\3\0\1\320\4\0\1\200\127\0\1\321"+
    "\42\0\1\205\67\0\1\210\15\0\1\210\2\0\1\210"+
    "\3\0\1\322\3\0\30\210\1\0\1\323\1\0\1\210"+
    "\2\0\3\210\14\0\2\211\2\0\2\211\1\0\1\211"+
    "\7\0\30\211\3\0\1\211\7\0\1\210\11\0\2\211"+
    "\2\0\1\212\1\211\1\0\1\212\3\0\1\322\3\0"+
    "\30\212\1\0\1\323\1\0\1\212\2\0\3\210\2\0"+
    "\1\210\11\0\2\211\2\0\1\212\1\211\1\0\1\212"+
    "\3\0\1\322\3\0\16\212\1\324\11\212\1\0\1\323"+
    "\1\0\1\212\2\0\3\210\2\0\1\210\11\0\2\211"+
    "\2\0\1\212\1\211\1\0\1\212\3\0\1\322\3\0"+
    "\22\212\1\325\5\212\1\0\1\323\1\0\1\212\2\0"+
    "\3\210\2\0\1\210\15\0\1\210\2\0\1\210\3\0"+
    "\1\322\3\0\22\210\1\326\5\210\1\0\1\323\1\0"+
    "\1\210\2\0\3\210\20\0\1\31\2\0\1\31\7\0"+
    "\21\31\1\327\6\31\3\0\1\31\4\0\1\330\20\0"+
    "\1\31\2\0\1\31\7\0\14\31\1\331\13\31\3\0"+
    "\1\31\25\0\1\31\2\0\1\31\7\0\3\31\1\332"+
    "\24\31\3\0\1\31\61\0\1\330\16\0\1\330\20\0"+
    "\1\222\1\333\1\0\1\222\7\0\30\222\3\0\1\222"+
    "\25\0\1\222\1\333\1\0\1\222\7\0\16\222\1\334"+
    "\11\222\3\0\1\222\6\0\2\224\1\0\1\224\1\0"+
    "\5\224\1\335\61\224\12\0\1\336\101\0\1\260\1\0"+
    "\1\226\70\0\1\54\2\0\1\54\7\0\30\54\3\0"+
    "\1\54\25\0\1\54\2\0\1\337\7\0\30\54\3\0"+
    "\1\54\46\0\1\340\110\0\1\341\35\0\1\54\1\227"+
    "\1\0\1\54\7\0\13\54\1\342\14\54\3\0\1\54"+
    "\25\0\1\54\1\227\1\0\1\54\7\0\21\54\1\343"+
    "\6\54\3\0\1\54\4\0\1\344\20\0\1\54\1\227"+
    "\1\0\1\54\7\0\10\54\1\345\17\54\3\0\1\54"+
    "\3\0\1\346\21\0\1\54\1\227\1\0\1\54\7\0"+
    "\14\54\1\347\13\54\3\0\1\54\25\0\1\54\1\227"+
    "\1\0\1\54\7\0\23\54\1\350\4\54\3\0\1\54"+
    "\25\0\1\54\1\227\1\0\1\54\7\0\3\54\1\351"+
    "\24\54\3\0\1\54\25\0\1\54\1\227\1\0\1\54"+
    "\7\0\7\54\1\352\20\54\3\0\1\54\61\0\1\344"+
    "\16\0\1\344\20\0\1\244\1\353\1\0\1\244\7\0"+
    "\30\244\3\0\1\244\25\0\1\244\1\353\1\0\1\244"+
    "\7\0\16\244\1\354\11\244\3\0\1\244\7\0\1\247"+
    "\11\0\1\250\77\0\1\76\2\0\1\76\7\0\30\76"+
    "\3\0\1\76\10\0\1\252\105\0\1\355\13\0\1\356"+
    "\57\0\1\357\115\0\1\360\57\0\1\361\70\0\1\121"+
    "\2\0\1\121\7\0\13\121\1\362\14\121\3\0\1\121"+
    "\25\0\1\121\2\0\1\121\7\0\13\121\1\363\14\121"+
    "\3\0\1\121\53\0\1\364\45\0\1\121\2\0\1\121"+
    "\7\0\22\121\1\365\5\121\3\0\1\121\25\0\1\121"+
    "\2\0\1\121\7\0\20\121\1\366\7\121\3\0\1\121"+
    "\25\0\1\121\2\0\1\121\7\0\10\121\1\367\17\121"+
    "\3\0\1\121\3\0\1\346\21\0\1\121\2\0\1\121"+
    "\7\0\23\121\1\370\4\121\3\0\1\121\25\0\1\121"+
    "\2\0\1\121\7\0\7\121\1\371\20\121\3\0\1\121"+
    "\25\0\1\121\2\0\1\121\7\0\17\121\1\372\10\121"+
    "\3\0\1\121\57\0\1\373\22\0\5\273\1\374\66\273"+
    "\2\134\1\0\1\134\1\0\1\136\66\134\1\144\2\0"+
    "\1\144\1\0\1\145\10\144\1\0\45\144\1\0\10\144"+
    "\2\0\1\144\1\0\11\144\1\0\1\276\1\375\1\144"+
    "\1\276\7\144\30\276\2\144\1\0\1\276\7\144\2\0"+
    "\1\144\1\0\11\144\1\0\1\276\1\375\1\144\1\276"+
    "\7\144\16\276\1\376\11\276\2\144\1\0\1\276\6\144"+
    "\1\300\1\224\1\0\1\300\1\0\5\300\1\377\3\300"+
    "\1\224\45\300\1\224\7\300\1\144\2\0\1\144\1\0"+
    "\5\144\1\u0100\3\144\1\0\45\144\1\0\10\144\2\0"+
    "\1\144\1\0\11\144\1\0\3\144\1\u0101\41\144\1\0"+
    "\10\144\2\0\1\144\1\0\11\144\1\0\26\144\1\u0102"+
    "\16\144\1\0\10\144\2\0\1\144\1\0\11\144\1\0"+
    "\23\144\1\u0103\21\144\1\0\4\144\1\u0103\3\144\2\0"+
    "\1\144\1\0\11\144\1\0\36\144\1\u0104\6\144\1\0"+
    "\10\144\2\0\1\144\1\0\11\144\1\0\22\144\1\u0105"+
    "\22\144\1\0\7\144\17\0\1\307\1\u0106\1\0\1\307"+
    "\7\0\30\307\3\0\1\307\25\0\1\307\1\u0106\1\0"+
    "\1\307\7\0\16\307\1\u0107\11\307\3\0\1\307\56\0"+
    "\1\u0108\72\0\1\u0109\43\0\1\172\2\0\1\172\7\0"+
    "\14\172\1\u010a\13\172\3\0\1\172\25\0\1\172\2\0"+
    "\1\172\7\0\21\172\1\u010b\6\172\3\0\1\172\4\0"+
    "\1\u010c\20\0\1\172\2\0\1\172\7\0\20\172\1\u010d"+
    "\7\172\3\0\1\172\25\0\1\172\2\0\1\172\7\0"+
    "\17\172\1\u010e\10\172\3\0\1\172\25\0\1\172\2\0"+
    "\1\172\7\0\3\172\1\u010f\24\172\3\0\1\172\43\0"+
    "\1\u0110\105\0\1\u0111\25\0\4\323\12\0\1\210\2\0"+
    "\1\210\3\0\1\322\3\0\30\210\1\0\1\323\1\0"+
    "\1\210\1\0\1\323\3\210\2\0\1\210\11\0\2\211"+
    "\2\0\1\212\1\211\1\0\1\212\3\0\1\322\3\0"+
    "\15\212\1\u0112\12\212\1\0\1\323\1\0\1\212\2\0"+
    "\3\210\2\0\1\210\11\0\2\211\2\0\1\212\1\211"+
    "\1\0\1\212\3\0\1\322\3\0\1\u0113\27\212\1\0"+
    "\1\323\1\0\1\212\2\0\3\210\2\0\1\210\15\0"+
    "\1\210\2\0\1\210\3\0\1\322\3\0\1\u0114\27\210"+
    "\1\0\1\323\1\0\1\210\2\0\3\210\20\0\1\31"+
    "\2\0\1\31\7\0\4\31\1\u0115\23\31\3\0\1\31"+
    "\44\0\1\u0116\54\0\1\31\2\0\1\31\7\0\16\31"+
    "\1\u0117\11\31\3\0\1\31\25\0\1\31\2\0\1\31"+
    "\7\0\1\u0118\27\31\3\0\1\31\25\0\1\222\2\0"+
    "\1\222\7\0\30\222\3\0\1\222\25\0\1\222\1\333"+
    "\1\0\1\222\7\0\15\222\1\u0119\12\222\3\0\1\222"+
    "\20\0\1\335\100\0\1\54\1\227\1\0\1\337\7\0"+
    "\30\54\3\0\1\54\55\0\1\u011a\71\0\1\u011b\45\0"+
    "\1\54\1\227\1\0\1\54\7\0\21\54\1\u011c\6\54"+
    "\3\0\1\54\4\0\1\u011d\20\0\1\54\1\227\1\0"+
    "\1\54\7\0\4\54\1\u011e\23\54\3\0\1\54\44\0"+
    "\1\u011f\54\0\1\54\1\227\1\0\1\54\7\0\15\54"+
    "\1\65\12\54\3\0\1\54\55\0\1\u0120\43\0\1\54"+
    "\1\227\1\0\1\54\7\0\16\54\1\u0121\11\54\3\0"+
    "\1\54\25\0\1\54\1\227\1\0\1\54\7\0\4\54"+
    "\1\65\23\54\3\0\1\54\25\0\1\54\1\227\1\0"+
    "\1\54\7\0\1\u0122\27\54\3\0\1\54\25\0\1\54"+
    "\1\227\1\0\1\54\7\0\20\54\1\65\7\54\3\0"+
    "\1\54\25\0\1\244\2\0\1\244\7\0\30\244\3\0"+
    "\1\244\25\0\1\244\1\353\1\0\1\244\7\0\15\244"+
    "\1\u0123\12\244\3\0\1\244\22\0\1\u0124\114\0\1\u0125"+
    "\55\0\1\121\2\0\1\121\7\0\21\121\1\u0126\6\121"+
    "\3\0\1\121\4\0\1\u011d\20\0\1\121\2\0\1\121"+
    "\7\0\4\121\1\u0127\23\121\3\0\1\121\44\0\1\u0128"+
    "\54\0\1\121\2\0\1\121\7\0\17\121\1\u0129\10\121"+
    "\3\0\1\121\25\0\1\121\2\0\1\121\1\u012a\6\0"+
    "\30\121\3\0\1\121\25\0\1\121\2\0\1\121\7\0"+
    "\15\121\1\130\12\121\3\0\1\121\25\0\1\121\2\0"+
    "\1\121\7\0\4\121\1\130\23\121\3\0\1\121\25\0"+
    "\1\121\2\0\1\121\7\0\20\121\1\130\7\121\3\0"+
    "\1\121\25\0\1\121\2\0\1\121\1\u012b\6\0\30\121"+
    "\3\0\1\121\31\0\1\u012b\55\0\1\273\66\0\1\144"+
    "\2\0\1\144\1\0\11\144\1\0\1\276\2\144\1\276"+
    "\7\144\30\276\2\144\1\0\1\276\7\144\2\0\1\144"+
    "\1\0\11\144\1\0\1\276\1\375\1\144\1\276\7\144"+
    "\15\276\1\u012c\12\276\2\144\1\0\1\276\7\144\2\0"+
    "\1\144\1\0\5\144\1\377\3\144\1\0\45\144\1\0"+
    "\10\144\2\0\1\144\1\0\11\144\1\0\34\144\1\u012d"+
    "\10\144\1\0\5\144\1\u012d\2\144\2\0\1\144\1\0"+
    "\11\144\1\0\30\144\1\160\14\144\1\0\10\144\2\0"+
    "\1\144\1\0\11\144\1\0\17\144\1\160\25\144\1\0"+
    "\10\144\2\0\1\144\1\0\11\144\1\0\33\144\1\160"+
    "\11\144\1\0\7\144\17\0\1\307\2\0\1\307\7\0"+
    "\30\307\3\0\1\307\25\0\1\307\1\u0106\1\0\1\307"+
    "\7\0\15\307\1\u012e\12\307\3\0\1\307\55\0\1\u012f"+
    "\61\0\1\u0130\55\0\1\172\2\0\1\172\7\0\1\172"+
    "\1\u0131\26\172\3\0\1\172\25\0\1\172\2\0\1\172"+
    "\7\0\21\172\1\u0132\6\172\3\0\1\172\4\0\1\u0133"+
    "\54\0\1\u0133\16\0\1\u0133\20\0\1\172\2\0\1\172"+
    "\7\0\6\172\1\u0134\21\172\3\0\1\172\25\0\1\172"+
    "\2\0\1\172\7\0\4\172\1\u0135\23\172\3\0\1\172"+
    "\43\0\1\u0136\37\0\1\210\11\0\2\211\2\0\1\212"+
    "\1\211\1\0\1\212\3\0\1\322\3\0\5\212\1\u0137"+
    "\22\212\1\0\1\323\1\0\1\212\2\0\3\210\2\0"+
    "\1\210\11\0\2\211\2\0\1\212\1\211\1\0\1\212"+
    "\3\0\1\322\3\0\20\212\1\u0138\7\212\1\0\1\323"+
    "\1\0\1\212\2\0\3\210\2\0\1\210\15\0\1\210"+
    "\2\0\1\210\3\0\1\322\3\0\20\210\1\u0139\7\210"+
    "\1\0\1\323\1\0\1\210\2\0\3\210\20\0\1\31"+
    "\2\0\1\31\7\0\20\31\1\u013a\7\31\3\0\1\31"+
    "\60\0\1\u013b\40\0\1\31\2\0\1\31\7\0\24\31"+
    "\1\u013c\3\31\3\0\1\31\25\0\1\31\2\0\1\31"+
    "\7\0\22\31\1\u013d\5\31\3\0\1\31\25\0\1\222"+
    "\1\333\1\0\1\222\7\0\5\222\1\u013e\22\222\3\0"+
    "\1\222\56\0\1\u013f\70\0\1\u0140\45\0\1\54\1\227"+
    "\1\0\1\54\7\0\2\54\1\u0141\1\54\1\65\23\54"+
    "\3\0\1\54\42\0\1\u0142\1\0\1\u0120\54\0\1\54"+
    "\1\227\1\0\1\54\7\0\20\54\1\u0143\7\54\3\0"+
    "\1\54\60\0\1\u0144\40\0\1\54\1\227\1\0\1\54"+
    "\7\0\24\54\1\u0145\3\54\3\0\1\54\25\0\1\54"+
    "\1\227\1\0\1\54\7\0\22\54\1\u0146\5\54\3\0"+
    "\1\54\25\0\1\244\1\353\1\0\1\244\7\0\5\244"+
    "\1\u0147\22\244\3\0\1\244\50\0\1\u0148\26\0\1\u0148"+
    "\21\0\1\121\2\0\1\121\7\0\2\121\1\u0149\1\121"+
    "\1\130\23\121\3\0\1\121\25\0\1\121\2\0\1\121"+
    "\1\u014a\6\0\30\121\3\0\1\121\31\0\1\u014a\67\0"+
    "\1\121\2\0\1\121\1\u014b\6\0\30\121\3\0\1\121"+
    "\6\0\1\144\2\0\1\144\1\0\11\144\1\0\1\276"+
    "\1\375\1\144\1\276\7\144\5\276\1\u014c\22\276\2\144"+
    "\1\0\1\276\7\144\2\0\1\144\1\0\11\144\1\0"+
    "\15\144\1\u014d\1\144\1\160\25\144\1\0\7\144\17\0"+
    "\1\307\1\u0106\1\0\1\307\7\0\5\307\1\u014e\22\307"+
    "\3\0\1\307\45\0\1\u014f\121\0\1\u0150\25\0\1\172"+
    "\2\0\1\172\7\0\4\172\1\u0151\23\172\3\0\1\172"+
    "\25\0\1\172\2\0\1\172\7\0\25\172\1\u0152\2\172"+
    "\3\0\1\172\65\0\1\u0153\33\0\1\172\2\0\1\172"+
    "\7\0\4\172\1\u0154\23\172\3\0\1\172\73\0\1\u0155"+
    "\7\0\1\210\11\0\2\211\2\0\1\212\1\211\1\0"+
    "\1\212\3\0\1\322\3\0\30\212\1\0\1\323\1\0"+
    "\1\212\2\0\1\210\1\u0156\1\210\2\0\1\210\11\0"+
    "\2\211\2\0\1\212\1\211\1\0\1\212\3\0\1\322"+
    "\3\0\22\212\1\u0157\5\212\1\0\1\323\1\0\1\212"+
    "\2\0\3\210\2\0\1\210\15\0\1\210\2\0\1\210"+
    "\3\0\1\322\3\0\22\210\1\u0158\5\210\1\0\1\323"+
    "\1\0\1\210\2\0\3\210\20\0\1\31\2\0\1\31"+
    "\7\0\22\31\1\u0159\5\31\3\0\1\31\62\0\1\u015a"+
    "\36\0\1\31\2\0\1\31\7\0\4\31\1\u015b\23\31"+
    "\3\0\1\31\25\0\1\31\2\0\1\31\7\0\4\31"+
    "\1\u015c\23\31\3\0\1\31\25\0\1\222\1\333\1\0"+
    "\1\222\7\0\30\222\3\0\1\222\3\0\1\u015d\54\0"+
    "\1\u015e\50\0\1\u015f\63\0\1\54\1\227\1\0\1\54"+
    "\7\0\7\54\1\65\20\54\3\0\1\54\47\0\1\u0120"+
    "\51\0\1\54\1\227\1\0\1\54\7\0\22\54\1\u0160"+
    "\5\54\3\0\1\54\62\0\1\u0161\36\0\1\54\1\227"+
    "\1\0\1\54\7\0\4\54\1\u0162\23\54\3\0\1\54"+
    "\25\0\1\54\1\227\1\0\1\54\7\0\4\54\1\u0163"+
    "\23\54\3\0\1\54\25\0\1\244\1\353\1\0\1\244"+
    "\7\0\30\244\3\0\1\244\3\0\1\u0164\34\0\1\u0165"+
    "\60\0\1\121\2\0\1\121\7\0\7\121\1\130\20\121"+
    "\3\0\1\121\47\0\1\u0166\32\0\1\144\2\0\1\144"+
    "\1\0\11\144\1\0\1\276\1\375\1\144\1\276\7\144"+
    "\30\276\2\144\1\0\1\276\3\144\1\u0167\3\144\2\0"+
    "\1\144\1\0\11\144\1\0\22\144\1\160\22\144\1\0"+
    "\7\144\17\0\1\307\1\u0106\1\0\1\307\7\0\30\307"+
    "\3\0\1\307\3\0\1\u0168\44\0\1\u0168\26\0\1\u0168"+
    "\57\0\1\u0169\35\0\1\172\2\0\1\172\7\0\20\172"+
    "\1\u016a\7\172\3\0\1\172\25\0\1\172\2\0\1\172"+
    "\7\0\16\172\1\u016b\11\172\3\0\1\172\56\0\1\u016c"+
    "\42\0\1\172\2\0\1\172\7\0\22\172\1\u016d\5\172"+
    "\3\0\1\172\63\0\1\u016e\17\0\1\210\15\0\1\210"+
    "\2\0\1\210\3\0\1\322\3\0\6\210\1\u016f\21\210"+
    "\1\0\1\323\1\0\1\210\2\0\3\210\2\0\1\210"+
    "\11\0\2\211\2\0\1\212\1\211\1\0\1\212\3\0"+
    "\1\322\3\0\30\212\1\0\1\323\1\0\1\u0170\2\0"+
    "\3\210\2\0\1\210\15\0\1\210\2\0\1\210\3\0"+
    "\1\322\3\0\30\210\1\0\1\323\1\0\1\u0171\2\0"+
    "\3\210\20\0\1\31\2\0\1\31\7\0\30\31\3\0"+
    "\1\u0172\73\0\1\u0173\46\0\1\u0174\71\0\1\u0175\54\0"+
    "\1\54\1\227\1\0\1\54\7\0\30\54\3\0\1\u0176"+
    "\73\0\1\u0177\46\0\1\u0178\106\0\1\u0179\16\0\1\u0179"+
    "\55\0\1\u017a\17\0\1\144\2\0\1\144\1\0\11\144"+
    "\1\0\21\144\1\u017b\23\144\1\0\7\144\40\0\1\u017c"+
    "\106\0\1\u017d\16\0\1\u017d\20\0\1\172\2\0\1\172"+
    "\7\0\16\172\1\u017e\11\172\3\0\1\172\25\0\1\172"+
    "\2\0\1\172\7\0\20\172\1\u017f\7\172\3\0\1\172"+
    "\60\0\1\u0180\74\0\1\u0181\16\0\1\u0181\2\0\1\210"+
    "\15\0\1\u0182\2\0\1\210\3\0\1\322\3\0\30\210"+
    "\1\0\1\323\1\0\1\210\2\0\3\210\2\0\1\210"+
    "\11\0\2\211\2\0\1\212\1\211\1\0\1\212\3\0"+
    "\1\322\3\0\23\212\1\u0183\4\212\1\0\1\323\1\0"+
    "\1\212\2\0\3\210\2\0\1\210\15\0\1\210\2\0"+
    "\1\210\3\0\1\322\3\0\23\210\1\u0184\4\210\1\0"+
    "\1\323\1\0\1\210\2\0\3\210\20\0\1\31\2\0"+
    "\1\31\7\0\23\31\1\u0185\4\31\3\0\1\31\63\0"+
    "\1\u0186\35\0\1\u0187\103\0\1\u0188\63\0\1\54\1\227"+
    "\1\0\1\54\7\0\23\54\1\u0189\4\54\3\0\1\54"+
    "\63\0\1\u018a\35\0\1\u018b\75\0\1\u018c\126\0\1\u018d"+
    "\17\0\1\144\2\0\1\144\1\0\11\144\1\0\1\u018e"+
    "\44\144\1\0\7\144\17\0\1\u018f\112\0\1\u0190\54\0"+
    "\1\172\2\0\1\172\7\0\5\172\1\u0191\22\172\3\0"+
    "\1\172\25\0\1\172\2\0\1\172\7\0\3\172\1\u0192"+
    "\24\172\3\0\1\172\43\0\1\u0193\74\0\1\u0194\36\0"+
    "\1\210\15\0\1\u0195\2\0\1\u0195\3\0\1\322\3\0"+
    "\30\u0195\1\0\1\323\1\0\1\u0195\2\0\3\210\2\0"+
    "\1\210\11\0\2\211\2\0\1\212\1\211\1\0\1\212"+
    "\3\0\1\322\3\0\21\212\1\u0196\6\212\1\0\1\323"+
    "\1\0\1\212\2\0\2\210\1\u0197\2\0\1\210\15\0"+
    "\1\210\2\0\1\210\3\0\1\322\3\0\21\210\1\u0197"+
    "\6\210\1\0\1\323\1\0\1\210\2\0\2\210\1\u0197"+
    "\20\0\1\31\2\0\1\31\7\0\17\31\1\u0198\10\31"+
    "\3\0\1\31\57\0\1\u0199\41\0\1\54\1\227\1\0"+
    "\1\54\7\0\17\54\1\u019a\10\54\3\0\1\54\57\0"+
    "\1\u019b\73\0\1\u019c\74\0\1\u019d\40\0\1\172\2\0"+
    "\1\172\7\0\6\172\1\u019e\21\172\3\0\1\172\60\0"+
    "\1\u019f\22\0\1\210\15\0\1\u0195\1\353\1\0\1\u0195"+
    "\3\0\1\322\3\0\30\u0195\1\0\1\323\1\0\1\u0195"+
    "\2\0\3\210\2\0\1\210\11\0\2\211\2\0\1\212"+
    "\1\211\1\0\1\212\3\0\1\322\3\0\4\212\1\u01a0"+
    "\23\212\1\0\1\323\1\0\1\212\2\0\3\210\2\0"+
    "\1\210\15\0\1\210\2\0\1\210\3\0\1\322\3\0"+
    "\4\210\1\u01a1\23\210\1\0\1\323\1\0\1\210\2\0"+
    "\3\210\20\0\1\31\2\0\1\31\7\0\3\31\1\u01a2"+
    "\24\31\3\0\1\31\43\0\1\u01a3\55\0\1\54\1\227"+
    "\1\0\1\54\7\0\3\54\1\u01a4\24\54\3\0\1\54"+
    "\43\0\1\u01a5\110\0\1\u01a6\40\0\1\172\2\0\1\172"+
    "\7\0\20\172\1\u01a7\7\172\3\0\1\172\60\0\1\u01a8"+
    "\22\0\1\210\11\0\2\211\2\0\1\212\1\211\1\0"+
    "\1\212\3\0\1\322\3\0\20\212\1\u01a9\7\212\1\0"+
    "\1\323\1\0\1\212\2\0\3\210\2\0\1\210\15\0"+
    "\1\210\2\0\1\210\3\0\1\322\3\0\20\210\1\u01aa"+
    "\7\210\1\0\1\323\1\0\1\210\2\0\3\210\20\0"+
    "\1\31\2\0\1\31\7\0\1\u01ab\27\31\3\0\1\31"+
    "\40\0\1\u01ac\60\0\1\54\1\227\1\0\1\54\7\0"+
    "\1\u01ad\27\54\3\0\1\54\40\0\1\u01ae\103\0\1\u01af"+
    "\26\0\1\u01af\21\0\1\172\2\0\1\172\7\0\16\172"+
    "\1\u01b0\11\172\3\0\1\172\50\0\1\u01b1\26\0\1\u01b1"+
    "\3\0\1\210\11\0\2\211\2\0\1\212\1\211\1\0"+
    "\1\212\3\0\1\322\3\0\20\212\1\u01b2\7\212\1\0"+
    "\1\323\1\0\1\212\2\0\3\210\2\0\1\210\15\0"+
    "\1\210\2\0\1\210\3\0\1\322\3\0\20\210\1\u01b3"+
    "\7\210\1\0\1\323\1\0\1\210\2\0\3\210\20\0"+
    "\1\31\2\0\1\31\7\0\22\31\1\u01b4\5\31\3\0"+
    "\1\31\62\0\1\u01b5\36\0\1\54\1\227\1\0\1\54"+
    "\7\0\22\54\1\u01b6\5\54\3\0\1\54\62\0\1\u01b7"+
    "\57\0\1\u01b8\52\0\1\172\2\0\1\172\7\0\23\172"+
    "\1\u01b9\4\172\3\0\1\172\46\0\1\u01ba\34\0\1\210"+
    "\11\0\2\211\2\0\1\212\1\211\1\0\1\212\3\0"+
    "\1\322\3\0\10\212\1\u01bb\17\212\1\0\1\323\1\0"+
    "\1\212\2\0\1\210\1\u01bc\1\210\2\0\1\210\15\0"+
    "\1\210\2\0\1\210\3\0\1\322\3\0\10\210\1\u01bc"+
    "\17\210\1\0\1\323\1\0\1\210\2\0\1\210\1\u01bc"+
    "\1\210\20\0\1\31\2\0\1\31\7\0\4\31\1\u01bd"+
    "\23\31\3\0\1\31\44\0\1\u01be\54\0\1\54\1\227"+
    "\1\0\1\54\7\0\4\54\1\u01bf\23\54\3\0\1\54"+
    "\44\0\1\u01c0\76\0\1\u01c1\51\0\1\172\2\0\1\172"+
    "\7\0\17\172\1\u01c2\10\172\3\0\1\172\47\0\1\u01c3"+
    "\33\0\1\210\11\0\2\211\2\0\1\212\1\211\1\0"+
    "\1\212\3\0\1\322\3\0\6\212\1\u01c4\21\212\1\0"+
    "\1\323\1\0\1\212\2\0\3\210\2\0\1\210\15\0"+
    "\1\210\2\0\1\210\3\0\1\322\3\0\6\210\1\u01c5"+
    "\21\210\1\0\1\323\1\0\1\210\2\0\3\210\55\0"+
    "\1\u01c6\36\0\1\172\2\0\1\172\7\0\21\172\1\u01c7"+
    "\6\172\3\0\1\172\4\0\1\u01c8\55\0\1\u01c9\20\0"+
    "\1\210\11\0\2\211\2\0\1\212\1\211\1\0\1\212"+
    "\3\0\1\322\3\0\7\212\1\u01ca\20\212\1\0\1\323"+
    "\1\0\1\212\2\0\3\210\2\0\1\210\15\0\1\210"+
    "\2\0\1\210\3\0\1\322\3\0\7\210\1\u01cb\20\210"+
    "\1\0\1\323\1\0\1\210\2\0\3\210\54\0\1\u01cc"+
    "\16\0\1\u01cc\54\0\1\u01cd\16\0\1\u01cd\2\0\1\210"+
    "\11\0\2\211\2\0\1\212\1\211\1\0\1\212\3\0"+
    "\1\322\3\0\22\212\1\u01ce\5\212\1\0\1\323\1\0"+
    "\1\212\2\0\3\210\2\0\1\210\15\0\1\210\2\0"+
    "\1\210\3\0\1\322\3\0\22\210\1\u01cf\5\210\1\0"+
    "\1\323\1\0\1\210\2\0\3\210\2\0\1\210\11\0"+
    "\2\211\2\0\1\212\1\211\1\0\1\212\3\0\1\322"+
    "\3\0\21\212\1\u01d0\6\212\1\0\1\323\1\0\1\212"+
    "\2\0\2\210\1\u01d1\2\0\1\210\15\0\1\210\2\0"+
    "\1\210\3\0\1\322\3\0\21\210\1\u01d1\6\210\1\0"+
    "\1\323\1\0\1\210\2\0\2\210\1\u01d1\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[22620];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\1\12\0\1\11\1\1\1\11\5\1\1\11"+
    "\4\1\1\11\3\1\2\11\1\1\1\11\3\1\1\11"+
    "\13\1\1\11\1\1\1\11\1\1\1\11\4\1\3\11"+
    "\1\1\1\11\1\1\2\11\3\1\1\11\3\1\2\11"+
    "\13\1\1\11\4\1\1\11\1\1\2\11\5\1\1\11"+
    "\10\1\1\11\1\1\1\11\1\1\1\11\4\1\1\11"+
    "\4\1\1\11\2\1\1\11\1\1\1\0\2\1\1\0"+
    "\4\1\1\0\3\1\1\0\2\1\1\0\4\1\2\0"+
    "\10\1\1\0\3\1\1\0\1\11\1\0\1\11\1\1"+
    "\2\0\1\11\2\0\2\1\1\0\6\1\2\0\15\1"+
    "\2\0\5\1\2\0\1\11\1\0\2\1\1\0\1\1"+
    "\1\0\4\1\1\11\1\0\1\1\2\0\2\1\1\0"+
    "\1\1\1\0\6\1\1\11\1\0\1\11\1\0\3\1"+
    "\1\0\6\1\1\0\14\1\2\0\2\1\1\0\3\1"+
    "\1\11\1\0\2\1\1\0\1\1\1\0\3\1\2\0"+
    "\1\1\1\0\1\1\1\0\1\11\3\1\1\11\1\0"+
    "\2\1\1\0\1\1\2\11\3\1\2\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\1\1\1\0\3\1\2\0"+
    "\1\1\1\0\1\1\1\0\3\1\1\0\1\1\1\11"+
    "\1\0\3\1\2\0\2\1\1\0\1\1\2\0\1\1"+
    "\1\0\4\1\2\0\1\11\4\1\3\0\1\1\2\0"+
    "\2\1\1\0\1\1\2\0\1\1\1\0\1\1\3\0"+
    "\1\1\4\0\1\1\2\0\2\1\3\0\1\1\1\0"+
    "\1\1\2\0\1\11\1\1\2\0\1\11\1\0\1\1"+
    "\2\0\2\1\1\11\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\11\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\2\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\2\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\2\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\11\1\0\1\1\1\0\1\1"+
    "\2\0\1\1\1\11\1\0\1\1\1\0\2\11\1\1"+
    "\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[465];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ImpexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ImpexTypes.BEAN_SHELL_BODY;
            }
          // fall through
          case 82: break;
          case 2:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 83: break;
          case 3:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 84: break;
          case 4:
            { yybegin(YYINITIAL); return ImpexTypes.CRLF;
            }
          // fall through
          case 85: break;
          case 5:
            { return ImpexTypes.LINE_COMMENT;
            }
          // fall through
          case 86: break;
          case 6:
            { yybegin(FIELD_VALUE); return ImpexTypes.VALUE_SUBTYPE;
            }
          // fall through
          case 87: break;
          case 7:
            { yybegin(FIELD_VALUE); return ImpexTypes.FIELD_VALUE_SEPARATOR;
            }
          // fall through
          case 88: break;
          case 8:
            { return ImpexTypes.MACRO_VALUE;
            }
          // fall through
          case 89: break;
          case 9:
            { return ImpexTypes.LEFT_ROUND_BRACKET;
            }
          // fall through
          case 90: break;
          case 10:
            { return ImpexTypes.RIGHT_ROUND_BRACKET;
            }
          // fall through
          case 91: break;
          case 11:
            { return ImpexTypes.BOOLEAN;
            }
          // fall through
          case 92: break;
          case 12:
            { return ImpexTypes.COMMA;
            }
          // fall through
          case 93: break;
          case 13:
            { return ImpexTypes.DIGIT;
            }
          // fall through
          case 94: break;
          case 14:
            { return ImpexTypes.ASSIGN_VALUE;
            }
          // fall through
          case 95: break;
          case 15:
            { return ImpexTypes.LEFT_SQUARE_BRACKET;
            }
          // fall through
          case 96: break;
          case 16:
            { return ImpexTypes.RIGHT_SQUARE_BRACKET;
            }
          // fall through
          case 97: break;
          case 17:
            { yybegin(WAITING_MACRO_VALUE); return ImpexTypes.ASSIGN_VALUE;
            }
          // fall through
          case 98: break;
          case 18:
            { yybegin(HEADER_LINE); return ImpexTypes.HEADER_TYPE;
            }
          // fall through
          case 99: break;
          case 19:
            { return ImpexTypes.HEADER_PARAMETER_NAME;
            }
          // fall through
          case 100: break;
          case 20:
            { return ImpexTypes.DOT;
            }
          // fall through
          case 101: break;
          case 21:
            { return ImpexTypes.PARAMETERS_SEPARATOR;
            }
          // fall through
          case 102: break;
          case 22:
            { yybegin(WAITING_ATTR_OR_PARAM_VALUE); return ImpexTypes.ASSIGN_VALUE;
            }
          // fall through
          case 103: break;
          case 23:
            { yybegin(MODIFIERS_BLOCK); return ImpexTypes.LEFT_SQUARE_BRACKET;
            }
          // fall through
          case 104: break;
          case 24:
            { return ImpexTypes.ALTERNATIVE_PATTERN;
            }
          // fall through
          case 105: break;
          case 25:
            { return ImpexTypes.FIELD_VALUE;
            }
          // fall through
          case 106: break;
          case 26:
            { return ImpexTypes.FIELD_LIST_ITEM_SEPARATOR;
            }
          // fall through
          case 107: break;
          case 27:
            { return ImpexTypes.DEFAULT_PATH_DELIMITER;
            }
          // fall through
          case 108: break;
          case 28:
            { return ImpexTypes.FIELD_VALUE_SEPARATOR;
            }
          // fall through
          case 109: break;
          case 29:
            { return ImpexTypes.ALTERNATIVE_MAP_DELIMITER;
            }
          // fall through
          case 110: break;
          case 30:
            { return ImpexTypes.ATTRIBUTE_SEPARATOR;
            }
          // fall through
          case 111: break;
          case 31:
            { return ImpexTypes.ATTRIBUTE_NAME;
            }
          // fall through
          case 112: break;
          case 32:
            { yybegin(HEADER_LINE); return ImpexTypes.RIGHT_SQUARE_BRACKET;
            }
          // fall through
          case 113: break;
          case 33:
            { yybegin(MODIFIERS_BLOCK); return ImpexTypes.ALTERNATIVE_MAP_DELIMITER;
            }
          // fall through
          case 114: break;
          case 34:
            { return ImpexTypes.ATTRIBUTE_VALUE;
            }
          // fall through
          case 115: break;
          case 35:
            { yybegin(MODIFIERS_BLOCK); return ImpexTypes.ATTRIBUTE_SEPARATOR;
            }
          // fall through
          case 116: break;
          case 36:
            { yypushback(yylength()); yybegin(MACRO_USAGE);
            }
          // fall through
          case 117: break;
          case 37:
            { yybegin(USER_RIGHTS_HEADER_LINE); return ImpexTypes.CRLF;
            }
          // fall through
          case 118: break;
          case 38:
            { return ImpexTypes.CRLF;
            }
          // fall through
          case 119: break;
          case 39:
            { return ImpexTypes.PERMISSION;
            }
          // fall through
          case 120: break;
          case 40:
            { yybegin(USER_RIGHTS_WAIT_FOR_VALUE_LINE); return ImpexTypes.PARAMETERS_SEPARATOR;
            }
          // fall through
          case 121: break;
          case 41:
            { yybegin(USER_RIGHTS_VALUE_LINE); return ImpexTypes.CRLF;
            }
          // fall through
          case 122: break;
          case 42:
            { return ImpexTypes.PERMISSION_ALLOWED;
            }
          // fall through
          case 123: break;
          case 43:
            { return ImpexTypes.PERMISSION_DENIED;
            }
          // fall through
          case 124: break;
          case 44:
            { return ImpexTypes.DOUBLE_STRING;
            }
          // fall through
          case 125: break;
          case 45:
            { yybegin(BEAN_SHELL); return ImpexTypes.BEAN_SHELL_MARKER;
            }
          // fall through
          case 126: break;
          case 46:
            { return ImpexTypes.MACRO_USAGE;
            }
          // fall through
          case 127: break;
          case 47:
            { yypushback(yylength()); yybegin(WAITING_MACRO_CONFIG_USAGE);
            }
          // fall through
          case 128: break;
          case 48:
            { return ImpexTypes.SINGLE_STRING;
            }
          // fall through
          case 129: break;
          case 49:
            { return ImpexTypes.HEADER_SPECIAL_PARAMETER_NAME;
            }
          // fall through
          case 130: break;
          case 50:
            { return ImpexTypes.DOCUMENT_ID;
            }
          // fall through
          case 131: break;
          case 51:
            { yybegin(HEADER_LINE);
                                                              yypushback(1);
                                                              return ImpexTypes.FUNCTION;
            }
          // fall through
          case 132: break;
          case 52:
            { return ImpexTypes.MULTILINE_SEPARATOR;
            }
          // fall through
          case 133: break;
          case 53:
            { return ImpexTypes.DEFAULT_KEY_VALUE_DELIMITER;
            }
          // fall through
          case 134: break;
          case 54:
            { yybegin(WAITING_MACRO_VALUE); return ImpexTypes.MACRO_USAGE;
            }
          // fall through
          case 135: break;
          case 55:
            { yybegin(MACRO_DECLARATION);
                                                              /* Push back '='. */
                                                              yypushback(1);
                                                              /* Push back spaces. */
                                                              yypushback(yylength() - yytext().toString().trim().length());
                                                              return ImpexTypes.MACRO_NAME_DECLARATION;
            }
          // fall through
          case 136: break;
          case 56:
            { return ImpexTypes.COLLECTION_APPEND_PREFIX;
            }
          // fall through
          case 137: break;
          case 57:
            { return ImpexTypes.COLLECTION_REMOVE_PREFIX;
            }
          // fall through
          case 138: break;
          case 58:
            { return ImpexTypes.UID;
            }
          // fall through
          case 139: break;
          case 59:
            { return ImpexTypes.COLLECTION_MERGE_PREFIX;
            }
          // fall through
          case 140: break;
          case 60:
            { return ImpexTypes.FIELD_VALUE_JAR_PREFIX;
            }
          // fall through
          case 141: break;
          case 61:
            { return ImpexTypes.FIELD_VALUE_ZIP_PREFIX;
            }
          // fall through
          case 142: break;
          case 62:
            { return ImpexTypes.TYPE;
            }
          // fall through
          case 143: break;
          case 63:
            { return ImpexTypes.FIELD_VALUE_FILE_PREFIX;
            }
          // fall through
          case 144: break;
          case 64:
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_INSERT;
            }
          // fall through
          case 145: break;
          case 65:
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_REMOVE;
            }
          // fall through
          case 146: break;
          case 66:
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_UPDATE;
            }
          // fall through
          case 147: break;
          case 67:
            { return ImpexTypes.FIELD_VALUE_NULL;
            }
          // fall through
          case 148: break;
          case 68:
            { return ImpexTypes.HEADER_MODE_INSERT;
            }
          // fall through
          case 149: break;
          case 69:
            { return ImpexTypes.HEADER_MODE_REMOVE;
            }
          // fall through
          case 150: break;
          case 70:
            { return ImpexTypes.HEADER_MODE_UPDATE;
            }
          // fall through
          case 151: break;
          case 71:
            { return ImpexTypes.TARGET;
            }
          // fall through
          case 152: break;
          case 72:
            { return ImpexTypes.FIELD_VALUE_IGNORE;
            }
          // fall through
          case 153: break;
          case 73:
            { return ImpexTypes.FIELD_VALUE_EXPLODED_JAR_PREFIX;
            }
          // fall through
          case 154: break;
          case 74:
            { return ImpexTypes.PASSWORD;
            }
          // fall through
          case 155: break;
          case 75:
            { yypushback(4);
                                                                return ImpexTypes.FIELD_VALUE_HTTP_PREFIX;
            }
          // fall through
          case 156: break;
          case 76:
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_INSERT_UPDATE;
            }
          // fall through
          case 157: break;
          case 77:
            { return ImpexTypes.HEADER_MODE_INSERT_UPDATE;
            }
          // fall through
          case 158: break;
          case 78:
            { return ImpexTypes.MEMBEROFGROUPS;
            }
          // fall through
          case 159: break;
          case 79:
            { yybegin(YYINITIAL); return ImpexTypes.END_USERRIGHTS;
            }
          // fall through
          case 160: break;
          case 80:
            { yybegin(USER_RIGHTS_END); return ImpexTypes.END_USERRIGHTS;
            }
          // fall through
          case 161: break;
          case 81:
            { yybegin(USER_RIGHTS_START); return ImpexTypes.START_USERRIGHTS;
            }
          // fall through
          case 162: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
