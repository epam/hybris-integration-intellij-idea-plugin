/*
 * This file is part of "SAP Commerce Developers Toolset" plugin for Intellij IDEA.
 * Copyright (C) 2019-2023 EPAM Systems <hybrisideaplugin@epam.com> and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Impex.flex

package com.intellij.idea.plugin.hybris.impex;

import com.intellij.idea.plugin.hybris.impex.psi.ImpexTypes;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;


class ImpexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_MACRO_VALUE = 2;
  public static final int MACRO_DECLARATION = 4;
  public static final int HEADER_TYPE = 6;
  public static final int HEADER_LINE = 8;
  public static final int FIELD_VALUE = 10;
  public static final int BEAN_SHELL = 12;
  public static final int MODIFIERS_BLOCK = 14;
  public static final int WAITING_ATTR_OR_PARAM_VALUE = 16;
  public static final int HEADER_PARAMETERS = 18;
  public static final int MACRO_USAGE = 20;
  public static final int MACRO_CONFIG_USAGE = 22;
  public static final int WAITING_MACRO_CONFIG_USAGE = 24;
  public static final int USER_RIGHTS_START = 26;
  public static final int USER_RIGHTS_END = 28;
  public static final int USER_RIGHTS_HEADER_LINE = 30;
  public static final int USER_RIGHTS_WAIT_FOR_VALUE_LINE = 32;
  public static final int USER_RIGHTS_VALUE_LINE = 34;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10,  9,  9, 11, 11, 12, 12, 13, 13, 14, 14, 
    15, 15, 16, 16
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\2\u2000\1\u2100\7\u2000\1\u2200\1\u2300\1\u2400"+
    "\1\u2000\1\u2500\1\u2600\2\u2000\31\u1100\1\u2700\121\u1100\1\u2800"+
    "\4\u1100\1\u2900\1\u1100\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00"+
    "\1\u2f00\53\u1100\1\u3000\10\u3100\31\u2000\1\u1100\1\u3200\1\u3300"+
    "\1\u1100\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u1100\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u2000\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u2000"+
    "\1\u5000\1\u5100\1\u5200\1\u2000\3\u1100\1\u5300\1\u5400\1\u5500"+
    "\12\u2000\4\u1100\1\u5600\17\u2000\2\u1100\1\u5700\41\u2000\2\u1100"+
    "\1\u5800\1\u5900\2\u2000\1\u5a00\1\u5b00\27\u1100\1\u5c00\2\u1100"+
    "\1\u5d00\45\u2000\1\u1100\1\u5e00\1\u5f00\11\u2000\1\u6000\24\u2000"+
    "\1\u6100\1\u6200\1\u2000\1\u6300\1\u6400\1\u6500\1\u6600\2\u2000"+
    "\1\u6700\5\u2000\1\u6800\1\u6900\1\u6a00\5\u2000\1\u6b00\1\u6c00"+
    "\4\u2000\1\u6d00\2\u2000\1\u6e00\16\u2000\246\u1100\1\u6f00\20\u1100"+
    "\1\u7000\1\u7100\25\u1100\1\u7200\34\u1100\1\u7300\14\u2000\2\u1100"+
    "\1\u7400\u0b06\u2000\1\u2800\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\0\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\0\1\15\1\16\1\17\1\20\1\21\12\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\44"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\44\1\60"+
    "\1\44\1\61\1\62\1\63\1\0\1\64\1\0\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\44"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\44\1\60"+
    "\1\44\1\0\1\65\10\0\1\3\32\0\1\66\11\0"+
    "\1\67\12\0\1\67\4\0\1\67\5\0\27\67\1\0"+
    "\37\67\1\0\70\67\2\70\115\67\1\71\u0142\67\4\0"+
    "\14\67\16\0\5\67\7\0\1\67\1\0\1\67\21\0"+
    "\165\67\1\0\2\67\2\0\4\67\1\0\1\67\6\0"+
    "\1\67\1\0\3\67\1\0\1\67\1\0\24\67\1\0"+
    "\123\67\1\0\213\67\1\0\255\67\1\0\46\67\2\0"+
    "\1\67\6\0\51\67\10\0\55\67\1\0\1\67\1\0"+
    "\2\67\1\0\2\67\1\0\1\67\10\0\33\67\4\0"+
    "\4\67\35\0\13\67\5\0\112\67\4\0\146\67\1\0"+
    "\10\67\2\0\12\67\1\0\23\67\2\0\1\67\20\0"+
    "\73\67\2\0\145\67\16\0\66\67\4\0\1\67\2\0"+
    "\1\67\2\0\56\67\22\0\34\67\4\0\13\67\65\0"+
    "\25\67\1\0\10\67\25\0\17\67\1\0\201\67\2\0"+
    "\12\67\1\0\23\67\1\0\10\67\2\0\2\67\2\0"+
    "\26\67\1\0\7\67\1\0\1\67\3\0\4\67\2\0"+
    "\11\67\2\0\2\67\2\0\4\67\10\0\1\67\4\0"+
    "\2\67\1\0\5\67\2\0\14\67\12\0\1\67\1\0"+
    "\1\67\2\0\3\67\1\0\6\67\4\0\2\67\2\0"+
    "\26\67\1\0\7\67\1\0\2\67\1\0\2\67\1\0"+
    "\2\67\2\0\1\67\1\0\5\67\4\0\2\67\2\0"+
    "\3\67\3\0\1\67\7\0\4\67\1\0\1\67\7\0"+
    "\20\67\13\0\3\67\1\0\11\67\1\0\3\67\1\0"+
    "\26\67\1\0\7\67\1\0\2\67\1\0\5\67\2\0"+
    "\12\67\1\0\3\67\1\0\3\67\2\0\1\67\17\0"+
    "\4\67\2\0\12\67\11\0\7\67\1\0\3\67\1\0"+
    "\10\67\2\0\2\67\2\0\26\67\1\0\7\67\1\0"+
    "\2\67\1\0\5\67\2\0\11\67\2\0\2\67\2\0"+
    "\3\67\10\0\2\67\4\0\2\67\1\0\5\67\2\0"+
    "\12\67\1\0\1\67\20\0\2\67\1\0\6\67\3\0"+
    "\3\67\1\0\4\67\3\0\2\67\1\0\1\67\1\0"+
    "\2\67\3\0\2\67\3\0\3\67\3\0\14\67\4\0"+
    "\5\67\3\0\3\67\1\0\4\67\2\0\1\67\6\0"+
    "\1\67\16\0\12\67\20\0\15\67\1\0\3\67\1\0"+
    "\27\67\1\0\20\67\3\0\10\67\1\0\3\67\1\0"+
    "\4\67\7\0\2\67\1\0\3\67\5\0\4\67\2\0"+
    "\12\67\20\0\4\67\1\0\10\67\1\0\3\67\1\0"+
    "\27\67\1\0\12\67\1\0\5\67\2\0\11\67\1\0"+
    "\3\67\1\0\4\67\7\0\2\67\7\0\1\67\1\0"+
    "\4\67\2\0\12\67\1\0\2\67\15\0\4\67\1\0"+
    "\10\67\1\0\3\67\1\0\63\67\1\0\3\67\1\0"+
    "\5\67\5\0\4\67\7\0\5\67\2\0\12\67\12\0"+
    "\6\67\2\0\2\67\1\0\22\67\3\0\30\67\1\0"+
    "\11\67\1\0\1\67\2\0\7\67\3\0\1\67\4\0"+
    "\6\67\1\0\1\67\1\0\10\67\6\0\12\67\2\0"+
    "\2\67\15\0\72\67\5\0\17\67\1\0\12\67\47\0"+
    "\2\67\1\0\1\67\1\0\5\67\1\0\30\67\1\0"+
    "\1\67\1\0\27\67\2\0\5\67\1\0\1\67\1\0"+
    "\6\67\2\0\12\67\2\0\4\67\40\0\1\67\27\0"+
    "\2\67\6\0\12\67\13\0\1\67\1\0\1\67\1\0"+
    "\1\67\4\0\12\67\1\0\44\67\4\0\24\67\1\0"+
    "\22\67\1\0\44\67\11\0\1\67\71\0\112\67\6\0"+
    "\116\67\2\0\46\67\1\0\1\67\5\0\1\67\2\0"+
    "\53\67\1\0\u014d\67\1\0\4\67\2\0\7\67\1\0"+
    "\1\67\1\0\4\67\2\0\51\67\1\0\4\67\2\0"+
    "\41\67\1\0\4\67\2\0\7\67\1\0\1\67\1\0"+
    "\4\67\2\0\17\67\1\0\71\67\1\0\4\67\2\0"+
    "\103\67\2\0\3\67\40\0\20\67\20\0\126\67\2\0"+
    "\6\67\3\0\u016c\67\2\0\21\67\1\66\32\67\5\0"+
    "\113\67\3\0\13\67\7\0\15\67\1\0\7\67\13\0"+
    "\25\67\13\0\24\67\14\0\15\67\1\0\3\67\1\0"+
    "\2\67\14\0\124\67\3\0\1\67\4\0\2\67\2\0"+
    "\12\67\41\0\3\67\2\0\12\67\6\0\131\67\7\0"+
    "\53\67\5\0\106\67\12\0\37\67\1\0\14\67\4\0"+
    "\14\67\12\0\50\67\2\0\5\67\13\0\54\67\4\0"+
    "\32\67\6\0\12\67\46\0\34\67\4\0\77\67\1\0"+
    "\35\67\2\0\13\67\6\0\12\67\15\0\1\67\10\0"+
    "\17\67\101\0\114\67\4\0\12\67\21\0\11\67\14\0"+
    "\164\67\14\0\70\67\10\0\12\67\3\0\61\67\2\0"+
    "\11\67\7\0\53\67\2\0\3\67\20\0\3\67\1\0"+
    "\47\67\5\0\372\67\1\0\33\67\2\0\6\67\2\0"+
    "\46\67\2\0\6\67\2\0\10\67\1\0\1\67\1\0"+
    "\1\67\1\0\1\67\1\0\37\67\2\0\65\67\1\0"+
    "\7\67\1\0\1\67\3\0\3\67\1\0\7\67\3\0"+
    "\4\67\2\0\6\67\4\0\15\67\5\0\3\67\1\0"+
    "\7\67\3\0\13\66\35\0\2\3\5\0\1\66\17\0"+
    "\2\67\23\0\1\67\12\0\1\66\21\0\1\67\15\0"+
    "\1\67\20\0\15\67\63\0\41\67\21\0\1\67\4\0"+
    "\1\67\2\0\12\67\1\0\1\67\3\0\5\67\6\0"+
    "\1\67\1\0\1\67\1\0\1\67\1\0\4\67\1\0"+
    "\13\67\2\0\4\67\5\0\5\67\4\0\1\67\21\0"+
    "\51\67\u022d\0\64\67\26\0\57\67\1\0\57\67\1\0"+
    "\205\67\6\0\11\67\14\0\46\67\1\0\1\67\5\0"+
    "\1\67\2\0\70\67\7\0\1\67\17\0\30\67\11\0"+
    "\7\67\1\0\7\67\1\0\7\67\1\0\7\67\1\0"+
    "\7\67\1\0\7\67\1\0\7\67\1\0\7\67\1\0"+
    "\40\67\57\0\1\67\320\0\1\66\4\0\3\67\31\0"+
    "\17\67\1\0\5\67\2\0\5\67\4\0\126\67\2\0"+
    "\2\67\2\0\3\67\1\0\132\67\1\0\4\67\5\0"+
    "\53\67\1\0\136\67\21\0\33\67\65\0\306\67\112\0"+
    "\360\67\20\0\215\67\103\0\56\67\2\0\15\67\3\0"+
    "\34\67\24\0\63\67\1\0\12\67\1\0\163\67\45\0"+
    "\11\67\2\0\147\67\2\0\65\67\2\0\5\67\60\0"+
    "\61\67\30\0\64\67\14\0\106\67\12\0\12\67\6\0"+
    "\30\67\3\0\1\67\1\0\61\67\2\0\44\67\14\0"+
    "\35\67\3\0\101\67\16\0\13\67\6\0\37\67\1\0"+
    "\67\67\11\0\16\67\2\0\12\67\6\0\27\67\3\0"+
    "\111\67\30\0\3\67\2\0\20\67\2\0\5\67\12\0"+
    "\6\67\2\0\6\67\2\0\6\67\11\0\7\67\1\0"+
    "\7\67\1\0\53\67\1\0\14\67\10\0\173\67\1\0"+
    "\2\67\2\0\12\67\6\0\244\67\14\0\27\67\4\0"+
    "\61\67\4\0\u0100\72\156\67\2\0\152\67\46\0\7\67"+
    "\14\0\5\67\5\0\14\67\1\0\15\67\1\0\5\67"+
    "\1\0\1\67\1\0\2\67\1\0\2\67\1\0\154\67"+
    "\41\0\153\67\22\0\100\67\2\0\66\67\50\0\14\67"+
    "\4\0\20\67\20\0\20\67\3\0\2\67\30\0\3\67"+
    "\40\0\5\67\1\0\207\67\23\0\12\67\7\0\32\67"+
    "\4\0\1\67\1\0\32\67\13\0\131\67\3\0\6\67"+
    "\2\0\6\67\2\0\6\67\2\0\3\67\43\0\14\67"+
    "\1\0\32\67\1\0\23\67\1\0\2\67\1\0\17\67"+
    "\2\0\16\67\42\0\173\67\105\0\65\67\210\0\1\67"+
    "\202\0\35\67\3\0\61\67\17\0\1\67\37\0\40\67"+
    "\15\0\36\67\5\0\53\67\5\0\36\67\2\0\44\67"+
    "\4\0\10\67\1\0\5\67\52\0\236\67\2\0\12\67"+
    "\6\0\44\67\4\0\44\67\4\0\50\67\10\0\64\67"+
    "\234\0\67\67\11\0\26\67\12\0\10\67\230\0\6\67"+
    "\2\0\1\67\1\0\54\67\1\0\2\67\3\0\1\67"+
    "\2\0\27\67\12\0\27\67\11\0\37\67\101\0\23\67"+
    "\1\0\2\67\12\0\26\67\12\0\32\67\106\0\70\67"+
    "\6\0\2\67\100\0\4\67\1\0\2\67\5\0\10\67"+
    "\1\0\3\67\1\0\35\67\2\0\3\67\4\0\1\67"+
    "\40\0\35\67\3\0\35\67\43\0\10\67\1\0\36\67"+
    "\31\0\66\67\12\0\26\67\12\0\23\67\15\0\22\67"+
    "\156\0\111\67\67\0\63\67\15\0\63\67\15\0\50\67"+
    "\10\0\12\67\306\0\35\67\12\0\1\67\10\0\41\67"+
    "\217\0\27\67\11\0\107\67\37\0\12\67\17\0\74\67"+
    "\25\0\31\67\7\0\12\67\6\0\65\67\1\0\12\67"+
    "\4\0\3\67\11\0\44\67\2\0\1\67\11\0\105\67"+
    "\4\0\4\67\3\0\13\67\1\0\1\67\43\0\22\67"+
    "\1\0\45\67\6\0\1\67\101\0\7\67\1\0\1\67"+
    "\1\0\4\67\1\0\17\67\1\0\12\67\7\0\73\67"+
    "\5\0\12\67\6\0\4\67\1\0\10\67\2\0\2\67"+
    "\2\0\26\67\1\0\7\67\1\0\2\67\1\0\5\67"+
    "\1\0\12\67\2\0\2\67\2\0\3\67\2\0\1\67"+
    "\6\0\1\67\5\0\7\67\2\0\7\67\3\0\5\67"+
    "\213\0\113\67\5\0\12\67\4\0\2\67\40\0\106\67"+
    "\1\0\1\67\10\0\12\67\246\0\66\67\2\0\11\67"+
    "\27\0\6\67\42\0\101\67\3\0\1\67\13\0\12\67"+
    "\46\0\71\67\7\0\12\67\66\0\33\67\2\0\17\67"+
    "\4\0\12\67\306\0\73\67\145\0\112\67\25\0\1\67"+
    "\240\0\10\67\2\0\56\67\2\0\10\67\1\0\2\67"+
    "\33\0\77\67\10\0\1\67\10\0\112\67\3\0\1\67"+
    "\42\0\71\67\7\0\11\67\1\0\55\67\1\0\11\67"+
    "\17\0\12\67\30\0\36\67\2\0\26\67\1\0\16\67"+
    "\111\0\7\67\1\0\2\67\1\0\54\67\3\0\1\67"+
    "\1\0\2\67\1\0\11\67\10\0\12\67\6\0\6\67"+
    "\1\0\2\67\1\0\45\67\1\0\2\67\1\0\6\67"+
    "\7\0\12\67\u0136\0\27\67\11\0\232\67\146\0\157\67"+
    "\21\0\304\67\274\0\57\67\321\0\107\67\271\0\71\67"+
    "\7\0\37\67\1\0\12\67\146\0\36\67\2\0\5\67"+
    "\13\0\67\67\11\0\4\67\14\0\12\67\11\0\25\67"+
    "\5\0\23\67\260\0\100\67\200\0\113\67\4\0\71\67"+
    "\7\0\21\67\100\0\2\67\1\0\1\67\34\0\370\67"+
    "\10\0\363\67\15\0\37\67\61\0\3\67\21\0\4\67"+
    "\10\0\u018c\67\4\0\153\67\5\0\15\67\3\0\11\67"+
    "\7\0\12\67\3\0\2\67\306\0\5\67\3\0\6\67"+
    "\10\0\10\67\2\0\7\67\36\0\4\67\224\0\3\67"+
    "\273\0\125\67\1\0\107\67\1\0\2\67\2\0\1\67"+
    "\2\0\2\67\2\0\4\67\1\0\14\67\1\0\1\67"+
    "\1\0\7\67\1\0\101\67\1\0\4\67\2\0\10\67"+
    "\1\0\7\67\1\0\34\67\1\0\4\67\1\0\5\67"+
    "\1\0\1\67\3\0\7\67\1\0\u0154\67\2\0\31\67"+
    "\1\0\31\67\1\0\37\67\1\0\31\67\1\0\37\67"+
    "\1\0\31\67\1\0\37\67\1\0\31\67\1\0\37\67"+
    "\1\0\31\67\1\0\10\67\2\0\151\67\4\0\62\67"+
    "\10\0\1\67\16\0\1\67\26\0\5\67\1\0\17\67"+
    "\120\0\7\67\1\0\21\67\2\0\7\67\1\0\2\67"+
    "\1\0\5\67\325\0\55\67\3\0\16\67\2\0\12\67"+
    "\4\0\1\67\u0171\0\72\67\6\0\305\67\13\0\7\67"+
    "\51\0\114\67\4\0\12\67\246\0\4\67\1\0\33\67"+
    "\1\0\2\67\1\0\1\67\2\0\1\67\1\0\12\67"+
    "\1\0\4\67\1\0\1\67\1\0\1\67\6\0\1\67"+
    "\4\0\1\67\1\0\1\67\1\0\1\67\1\0\3\67"+
    "\1\0\2\67\1\0\1\67\2\0\1\67\1\0\1\67"+
    "\1\0\1\67\1\0\1\67\1\0\1\67\1\0\2\67"+
    "\1\0\1\67\2\0\4\67\1\0\7\67\1\0\4\67"+
    "\1\0\4\67\1\0\1\67\1\0\12\67\1\0\21\67"+
    "\5\0\3\67\1\0\5\67\1\0\21\67\164\0\32\67"+
    "\6\0\32\67\6\0\32\67\166\0\327\67\51\0\65\67"+
    "\13\0\336\67\2\0\u0182\67\16\0\u0131\67\37\0\36\67"+
    "\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29952];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\12\0\1\2\1\3\2\4\1\2\1\5"+
    "\1\2\1\6\1\7\3\6\1\2\4\10\1\11\1\12"+
    "\1\13\1\14\1\13\1\15\1\10\1\16\5\10\1\13"+
    "\4\10\1\13\1\17\1\10\1\20\1\10\1\21\1\22"+
    "\2\2\1\23\1\24\1\25\1\26\1\2\1\27\1\2"+
    "\1\30\4\31\1\32\1\13\1\31\1\15\1\33\1\34"+
    "\4\31\1\13\2\31\1\13\1\31\1\35\1\1\1\3"+
    "\1\1\1\2\1\36\1\37\1\40\1\41\4\42\1\13"+
    "\1\43\1\15\2\42\1\13\2\42\1\13\1\2\2\44"+
    "\2\45\2\46\1\5\1\2\1\47\1\50\4\47\2\51"+
    "\1\2\1\52\1\53\1\0\1\54\1\55\1\0\4\56"+
    "\1\0\3\6\1\0\2\57\1\0\1\60\1\15\2\10"+
    "\2\0\1\61\7\10\1\0\2\56\1\62\1\0\1\63"+
    "\1\0\2\64\2\0\1\65\2\0\4\31\1\0\1\1"+
    "\1\54\2\56\1\42\1\60\5\42\2\66\2\0\5\47"+
    "\2\0\1\67\1\0\2\56\1\0\1\6\1\0\2\6"+
    "\2\57\1\60\1\0\1\15\2\0\2\10\1\0\1\10"+
    "\1\0\4\10\2\56\1\70\1\0\1\71\2\0\1\15"+
    "\4\31\1\1\2\56\1\60\1\42\1\15\4\42\2\66"+
    "\2\0\2\47\1\0\2\47\2\72\1\0\2\56\1\0"+
    "\1\6\1\0\2\6\1\57\2\0\1\10\1\0\1\10"+
    "\1\0\1\13\2\10\1\56\1\73\1\74\1\31\1\56"+
    "\1\42\1\66\2\0\2\47\1\0\1\47\1\75\1\0"+
    "\2\56\1\0\1\6\1\0\2\6\1\57\2\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\56\1\31\1\56\1\42"+
    "\1\66\2\0\2\47\1\0\1\47\2\0\1\56\1\0"+
    "\2\76\1\77\1\100\2\0\1\101\2\102\1\103\1\104"+
    "\1\0\1\42\2\0\2\47\1\0\1\105\2\0\1\56"+
    "\1\0\1\6\3\0\1\10\2\0\1\42\2\0\2\47"+
    "\3\0\1\56\1\0\1\6\2\0\1\106\1\10\2\0"+
    "\1\42\2\0\1\47\2\107\1\0\2\56\1\0\1\6"+
    "\1\0\1\10\2\0\1\47\1\0\1\56\1\0\1\6"+
    "\1\0\1\10\2\0\1\47\1\0\1\56\1\0\1\6"+
    "\1\0\1\10\2\0\1\47\1\0\1\56\1\0\1\6"+
    "\1\0\1\10\2\0\1\47\1\0\1\56\1\0\2\110"+
    "\2\111\1\0\1\47\1\0\1\56\2\0\2\112\1\0"+
    "\1\56\1\0\1\113\1\114\1\56\1\0\2\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[437];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375"+
    "\0\u03b0\0\u03eb\0\u0426\0\u03eb\0\u0461\0\u049c\0\u04d7\0\u0512"+
    "\0\u054d\0\u03eb\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u03eb\0\u049c"+
    "\0\u0674\0\u06af\0\u03eb\0\u03eb\0\u06ea\0\u03eb\0\u0725\0\u0760"+
    "\0\u079b\0\u03eb\0\u07d6\0\u0811\0\u084c\0\u0887\0\u08c2\0\u08fd"+
    "\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0811\0\u03eb\0\u0a24\0\u03eb"+
    "\0\u0a5f\0\u03eb\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u03eb\0\u03eb"+
    "\0\u03eb\0\u07d6\0\u03eb\0\u0b86\0\u03eb\0\u03eb\0\u049c\0\u0ad5"+
    "\0\u0bc1\0\u03eb\0\u0bfc\0\u0c37\0\u0c72\0\u03eb\0\u03eb\0\u079b"+
    "\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0cad\0\u0b86"+
    "\0\u03eb\0\u0e0f\0\u0e4a\0\u0e85\0\u06af\0\u03eb\0\u0ec0\0\u03eb"+
    "\0\u03eb\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u03eb\0\u1022"+
    "\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149\0\u0efb\0\u1184\0\u03eb"+
    "\0\u11bf\0\u03eb\0\u11fa\0\u03eb\0\u1235\0\u1270\0\u12ab\0\u12e6"+
    "\0\u03eb\0\u1321\0\u135c\0\u1397\0\u13d2\0\u03eb\0\u140d\0\u1448"+
    "\0\u03eb\0\u0cad\0\u049c\0\u1483\0\u1270\0\u14be\0\u14f9\0\u1534"+
    "\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c"+
    "\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4"+
    "\0\u07d6\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81"+
    "\0\u1abc\0\u1af7\0\u1b32\0\u0b10\0\u1b6d\0\u03eb\0\u1ba8\0\u03eb"+
    "\0\u1be3\0\u1c1e\0\u1c59\0\u03eb\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45"+
    "\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d"+
    "\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5"+
    "\0\u2130\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd"+
    "\0\u2308\0\u03eb\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a"+
    "\0\u24a5\0\u24e0\0\u251b\0\u2556\0\u03eb\0\u2591\0\u25cc\0\u2607"+
    "\0\u2642\0\u267d\0\u26b8\0\u26f3\0\u272e\0\u2769\0\u27a4\0\u27df"+
    "\0\u281a\0\u2855\0\u2890\0\u28cb\0\u03eb\0\u2906\0\u03eb\0\u2941"+
    "\0\u0c37\0\u1ccf\0\u297c\0\u29b7\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3"+
    "\0\u2ade\0\u0efb\0\u2b19\0\u1f93\0\u2b54\0\u2b8f\0\u2bca\0\u2c05"+
    "\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2\0\u2ddd"+
    "\0\u2e18\0\u12e6\0\u03eb\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04\0\u2f3f"+
    "\0\u2f7a\0\u2fb5\0\u2ff0\0\u302b\0\u3066\0\u30a1\0\u30dc\0\u3117"+
    "\0\u3152\0\u318d\0\u03eb\0\u31c8\0\u3203\0\u323e\0\u03eb\0\u2941"+
    "\0\u3279\0\u32b4\0\u32ef\0\u332a\0\u3365\0\u33a0\0\u33db\0\u3416"+
    "\0\u3451\0\u348c\0\u12e6\0\u34c7\0\u3502\0\u353d\0\u3578\0\u35b3"+
    "\0\u35ee\0\u3629\0\u3664\0\u369f\0\u36da\0\u3715\0\u3750\0\u378b"+
    "\0\u37c6\0\u3801\0\u383c\0\u3877\0\u38b2\0\u38ed\0\u3928\0\u3963"+
    "\0\u399e\0\u39d9\0\u3a14\0\u3a4f\0\u3a8a\0\u3ac5\0\u3b00\0\u3b3b"+
    "\0\u3b76\0\u3bb1\0\u3bec\0\u3c27\0\u3c62\0\u054d\0\u054d\0\u3c9d"+
    "\0\u3cd8\0\u03eb\0\u3d13\0\u3d4e\0\u0811\0\u0811\0\u3d89\0\u3dc4"+
    "\0\u3dff\0\u3e3a\0\u3e75\0\u3eb0\0\u3eeb\0\u12e6\0\u3f26\0\u3f61"+
    "\0\u3f9c\0\u3fd7\0\u4012\0\u404d\0\u4088\0\u40c3\0\u40fe\0\u4139"+
    "\0\u4174\0\u41af\0\u41ea\0\u4225\0\u4260\0\u429b\0\u42d6\0\u4311"+
    "\0\u434c\0\u4387\0\u43c2\0\u43fd\0\u4438\0\u251b\0\u03eb\0\u4473"+
    "\0\u44ae\0\u2890\0\u2aa3\0\u2c40\0\u44e9\0\u4524\0\u12e6\0\u03eb"+
    "\0\u455f\0\u459a\0\u45d5\0\u4610\0\u464b\0\u4686\0\u46c1\0\u46fc"+
    "\0\u4737\0\u4772\0\u47ad\0\u47e8\0\u4823\0\u485e\0\u4899\0\u48d4"+
    "\0\u490f\0\u494a\0\u4985\0\u49c0\0\u49fb\0\u4a36\0\u4a71\0\u4aac"+
    "\0\u4ae7\0\u4b22\0\u4b5d\0\u4b98\0\u4bd3\0\u4c0e\0\u4c49\0\u4c84"+
    "\0\u4cbf\0\u4cfa\0\u4d35\0\u4d70\0\u4dab\0\u4de6\0\u4e21\0\u4e5c"+
    "\0\u054d\0\u03eb\0\u0811\0\u03eb\0\u4e97\0\u4ed2\0\u4f0d\0\u4f48"+
    "\0\u4f83\0\u4fbe\0\u12e6\0\u03eb\0\u4ff9\0\u5034\0\u506f\0\u03eb"+
    "\0\u03eb\0\u50aa\0\u50e5\0\u1534\0\u14be";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[437];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\22\1\23\1\24\1\0\1\25\1\26\1\27\1\30"+
    "\7\22\1\31\2\22\1\31\1\22\1\32\5\22\10\31"+
    "\1\33\7\31\1\34\2\31\1\35\3\31\3\22\1\31"+
    "\3\22\1\36\1\22\1\0\1\37\1\23\1\24\1\37"+
    "\1\25\1\40\1\37\1\41\2\37\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\2\37\1\50\2\37\1\51\1\52"+
    "\2\37\1\53\5\54\1\55\2\54\1\56\1\57\3\54"+
    "\1\60\2\54\1\61\1\54\1\62\1\63\1\54\1\64"+
    "\1\65\1\66\1\67\1\70\1\54\3\37\1\71\2\37"+
    "\1\22\1\23\1\24\1\0\1\25\21\22\1\72\43\22"+
    "\1\0\1\22\1\23\1\24\1\0\1\25\12\22\1\73"+
    "\2\22\1\73\7\22\27\73\3\22\1\73\5\22\1\0"+
    "\1\22\1\23\1\24\1\0\1\25\2\22\1\74\1\22"+
    "\1\75\1\22\1\43\1\44\1\22\1\46\1\76\1\77"+
    "\1\22\1\76\1\22\1\100\1\22\1\101\2\22\1\102"+
    "\27\76\1\103\1\104\1\70\1\76\1\105\4\22\1\0"+
    "\1\106\1\23\1\24\1\106\1\25\1\107\1\106\1\110"+
    "\3\106\1\111\1\106\1\45\1\112\1\113\1\106\1\114"+
    "\1\115\1\116\1\117\1\120\4\106\5\121\1\122\3\121"+
    "\1\123\3\121\1\124\4\121\1\125\2\121\1\126\1\127"+
    "\1\106\1\130\1\106\1\121\1\131\5\106\1\132\1\133"+
    "\1\24\1\132\1\25\1\134\65\132\1\22\1\23\1\24"+
    "\1\0\1\25\1\26\1\22\1\74\2\22\1\135\3\22"+
    "\1\136\2\137\1\22\1\137\3\22\1\101\3\22\27\137"+
    "\2\22\1\140\1\137\1\141\4\22\1\0\1\142\1\23"+
    "\1\24\1\142\1\25\1\143\1\142\1\144\2\142\1\145"+
    "\2\142\1\146\1\147\1\146\2\142\1\150\14\142\1\151"+
    "\3\142\1\152\3\142\1\153\4\142\1\154\2\142\1\155"+
    "\1\156\2\142\1\140\7\142\1\22\1\23\3\0\65\22"+
    "\1\0\1\22\1\23\1\24\1\0\1\25\2\22\1\157"+
    "\62\22\1\0\1\160\1\23\1\24\1\0\1\25\2\160"+
    "\1\161\62\160\1\0\1\22\1\23\1\162\1\0\1\163"+
    "\17\22\1\100\45\22\1\0\1\22\1\23\1\24\1\0"+
    "\1\25\17\22\1\100\45\22\1\0\1\22\1\23\1\164"+
    "\1\0\1\165\1\22\1\166\1\167\7\22\1\170\2\22"+
    "\1\170\1\22\1\171\5\22\14\170\1\172\2\170\1\173"+
    "\2\170\1\174\1\175\3\170\3\22\1\170\5\22\1\0"+
    "\1\22\1\23\1\176\1\0\1\177\2\22\1\167\7\22"+
    "\1\170\2\22\1\170\1\22\1\100\5\22\14\170\1\172"+
    "\2\170\1\173\2\170\1\174\1\175\3\170\3\22\1\170"+
    "\5\22\1\0\1\22\1\23\1\176\1\0\1\177\1\22"+
    "\1\166\1\200\5\22\1\201\1\46\1\202\1\77\1\22"+
    "\1\121\1\22\1\117\5\22\27\121\3\22\1\121\5\22"+
    "\75\0\1\23\73\0\1\24\70\0\5\203\1\204\65\203"+
    "\2\166\1\0\1\166\1\0\3\166\1\205\62\166\1\0"+
    "\1\206\11\0\2\207\2\0\1\210\1\207\1\0\1\210"+
    "\7\0\2\210\1\211\16\210\1\212\5\210\3\0\1\210"+
    "\2\0\2\206\1\213\20\0\1\31\2\0\1\31\7\0"+
    "\27\31\3\0\1\31\25\0\1\31\2\0\1\31\7\0"+
    "\15\31\1\214\11\31\3\0\1\31\25\0\1\31\2\0"+
    "\1\31\7\0\4\31\1\215\22\31\3\0\1\31\25\0"+
    "\1\31\2\0\1\31\7\0\17\31\1\216\7\31\3\0"+
    "\1\31\55\0\1\217\42\0\1\220\2\0\1\220\7\0"+
    "\2\220\1\221\24\220\3\0\1\220\6\0\2\222\1\0"+
    "\1\222\1\0\5\222\1\223\60\222\22\0\1\224\67\0"+
    "\1\54\1\225\1\0\1\50\7\0\27\54\3\0\1\54"+
    "\25\0\1\54\1\226\1\0\1\50\7\0\27\54\3\0"+
    "\1\54\50\0\1\227\4\0\1\230\20\0\1\227\21\0"+
    "\1\231\2\0\1\231\7\0\27\231\3\0\1\231\25\0"+
    "\1\54\1\225\1\0\1\54\7\0\27\54\3\0\1\54"+
    "\25\0\1\54\1\225\1\0\1\54\7\0\1\232\26\54"+
    "\3\0\1\54\25\0\1\54\1\225\1\0\1\54\7\0"+
    "\15\54\1\233\11\54\3\0\1\54\25\0\1\54\1\225"+
    "\1\0\1\54\7\0\1\65\26\54\3\0\1\54\25\0"+
    "\1\54\1\225\1\0\1\54\7\0\4\54\1\234\22\54"+
    "\3\0\1\54\25\0\1\54\1\225\1\0\1\54\7\0"+
    "\4\54\1\235\22\54\3\0\1\54\25\0\1\54\1\225"+
    "\1\0\1\54\7\0\20\54\1\236\6\54\3\0\1\54"+
    "\25\0\1\54\1\225\1\0\1\54\7\0\17\54\1\237"+
    "\7\54\3\0\1\54\25\0\1\54\1\225\1\0\1\54"+
    "\7\0\1\240\26\54\3\0\1\54\7\0\4\67\55\0"+
    "\1\67\3\0\1\67\53\0\1\241\42\0\1\73\2\0"+
    "\1\73\7\0\27\73\3\0\1\73\25\0\1\242\2\0"+
    "\1\242\7\0\2\242\1\243\24\242\3\0\1\242\25\0"+
    "\1\244\2\0\1\244\7\0\27\244\3\0\1\244\7\0"+
    "\1\245\11\0\1\246\3\0\1\76\1\247\1\0\1\76"+
    "\6\0\1\247\27\76\3\0\1\76\10\0\1\250\1\0"+
    "\1\251\103\0\1\252\1\0\1\253\72\0\1\121\2\0"+
    "\1\115\4\0\1\254\2\0\27\121\3\0\1\121\25\0"+
    "\1\255\2\0\1\255\7\0\27\255\3\0\1\255\25\0"+
    "\1\121\1\256\1\0\1\115\7\0\27\121\3\0\1\121"+
    "\25\0\1\121\2\0\1\121\7\0\27\121\3\0\1\121"+
    "\25\0\1\121\2\0\1\121\7\0\1\257\26\121\3\0"+
    "\1\121\25\0\1\121\2\0\1\121\7\0\1\127\26\121"+
    "\3\0\1\121\25\0\1\121\2\0\1\121\7\0\4\121"+
    "\1\260\22\121\3\0\1\121\25\0\1\121\2\0\1\121"+
    "\7\0\20\121\1\261\6\121\3\0\1\121\25\0\1\121"+
    "\2\0\1\121\7\0\1\262\26\121\3\0\1\121\6\0"+
    "\2\132\1\0\1\132\1\0\67\132\1\133\1\0\1\132"+
    "\1\0\66\132\2\134\1\263\1\134\1\263\1\264\65\134"+
    "\17\0\2\137\1\0\1\137\7\0\27\137\3\0\1\137"+
    "\6\0\1\142\2\0\1\142\1\0\11\142\1\0\44\142"+
    "\1\0\7\142\1\143\2\203\1\143\1\203\1\265\10\143"+
    "\1\203\44\143\1\203\7\143\1\142\2\0\1\142\1\0"+
    "\11\142\1\0\1\266\2\142\1\266\7\142\2\266\1\267"+
    "\24\266\2\142\1\0\1\266\6\142\1\270\1\222\1\0"+
    "\1\270\1\0\5\270\1\271\3\270\1\222\44\270\1\222"+
    "\7\270\1\142\2\0\1\142\1\0\11\142\1\0\3\142"+
    "\1\150\40\142\1\0\10\142\2\0\1\142\1\0\11\142"+
    "\1\0\1\142\1\272\1\142\1\150\40\142\1\0\10\142"+
    "\2\0\1\142\1\0\11\142\1\0\13\142\1\273\30\142"+
    "\1\0\10\142\2\0\1\142\1\0\11\142\1\0\13\142"+
    "\1\156\30\142\1\0\10\142\2\0\1\142\1\0\11\142"+
    "\1\0\17\142\1\274\24\142\1\0\10\142\2\0\1\142"+
    "\1\0\11\142\1\0\33\142\1\275\10\142\1\0\10\142"+
    "\2\0\1\142\1\0\11\142\1\0\13\142\1\276\30\142"+
    "\1\0\7\142\17\0\1\277\2\0\1\277\7\0\2\277"+
    "\1\300\24\277\3\0\1\277\42\0\1\301\40\0\1\162"+
    "\72\0\1\164\70\0\2\166\1\0\1\166\1\0\66\166"+
    "\36\0\1\302\53\0\1\170\2\0\1\170\7\0\27\170"+
    "\3\0\1\170\25\0\1\170\2\0\1\170\7\0\4\170"+
    "\1\303\22\170\3\0\1\170\25\0\1\170\2\0\1\170"+
    "\7\0\1\304\26\170\3\0\1\170\25\0\1\170\2\0"+
    "\1\170\7\0\1\305\25\170\1\306\3\0\1\170\25\0"+
    "\1\170\2\0\1\170\7\0\10\170\1\307\16\170\3\0"+
    "\1\170\3\0\1\310\4\0\1\176\126\0\1\311\41\0"+
    "\1\203\66\0\1\206\15\0\1\206\2\0\1\206\3\0"+
    "\1\312\3\0\27\206\1\0\1\313\1\0\1\206\2\0"+
    "\3\206\14\0\2\207\2\0\2\207\1\0\1\207\7\0"+
    "\27\207\3\0\1\207\7\0\1\206\11\0\2\207\2\0"+
    "\1\210\1\207\1\0\1\210\3\0\1\312\3\0\27\210"+
    "\1\0\1\313\1\0\1\210\2\0\3\206\2\0\1\206"+
    "\11\0\2\207\2\0\1\210\1\207\1\0\1\210\3\0"+
    "\1\312\3\0\16\210\1\314\10\210\1\0\1\313\1\0"+
    "\1\210\2\0\3\206\2\0\1\206\11\0\2\207\2\0"+
    "\1\210\1\207\1\0\1\210\3\0\1\312\3\0\22\210"+
    "\1\315\4\210\1\0\1\313\1\0\1\210\2\0\3\206"+
    "\2\0\1\206\15\0\1\206\2\0\1\206\3\0\1\312"+
    "\3\0\22\206\1\316\4\206\1\0\1\313\1\0\1\206"+
    "\2\0\3\206\20\0\1\31\2\0\1\31\7\0\21\31"+
    "\1\317\5\31\3\0\1\31\4\0\1\320\20\0\1\31"+
    "\2\0\1\31\7\0\14\31\1\321\12\31\3\0\1\31"+
    "\25\0\1\31\2\0\1\31\7\0\3\31\1\322\23\31"+
    "\3\0\1\31\61\0\1\320\15\0\1\320\20\0\1\220"+
    "\1\323\1\0\1\220\7\0\27\220\3\0\1\220\25\0"+
    "\1\220\1\323\1\0\1\220\7\0\16\220\1\324\10\220"+
    "\3\0\1\220\6\0\2\222\1\0\1\222\1\0\5\222"+
    "\1\325\60\222\12\0\1\326\100\0\1\256\1\0\1\224"+
    "\67\0\1\54\2\0\1\54\7\0\27\54\3\0\1\54"+
    "\25\0\1\54\2\0\1\327\7\0\27\54\3\0\1\54"+
    "\46\0\1\330\107\0\1\331\34\0\1\54\1\225\1\0"+
    "\1\54\7\0\13\54\1\332\13\54\3\0\1\54\25\0"+
    "\1\54\1\225\1\0\1\54\7\0\21\54\1\333\5\54"+
    "\3\0\1\54\4\0\1\334\20\0\1\54\1\225\1\0"+
    "\1\54\7\0\10\54\1\335\16\54\3\0\1\54\3\0"+
    "\1\336\21\0\1\54\1\225\1\0\1\54\7\0\14\54"+
    "\1\337\12\54\3\0\1\54\25\0\1\54\1\225\1\0"+
    "\1\54\7\0\23\54\1\340\3\54\3\0\1\54\25\0"+
    "\1\54\1\225\1\0\1\54\7\0\3\54\1\341\23\54"+
    "\3\0\1\54\25\0\1\54\1\225\1\0\1\54\7\0"+
    "\7\54\1\342\17\54\3\0\1\54\61\0\1\334\15\0"+
    "\1\334\20\0\1\242\1\343\1\0\1\242\7\0\27\242"+
    "\3\0\1\242\25\0\1\242\1\343\1\0\1\242\7\0"+
    "\16\242\1\344\10\242\3\0\1\242\7\0\1\245\11\0"+
    "\1\246\76\0\1\76\2\0\1\76\7\0\27\76\3\0"+
    "\1\76\10\0\1\250\104\0\1\345\13\0\1\346\56\0"+
    "\1\347\75\0\1\255\1\350\1\351\1\255\7\0\27\255"+
    "\3\0\1\255\30\0\1\352\67\0\1\121\2\0\1\121"+
    "\7\0\13\121\1\353\13\121\3\0\1\121\25\0\1\121"+
    "\2\0\1\121\7\0\10\121\1\354\16\121\3\0\1\121"+
    "\3\0\1\336\21\0\1\121\2\0\1\121\7\0\23\121"+
    "\1\355\3\121\3\0\1\121\25\0\1\121\2\0\1\121"+
    "\7\0\7\121\1\356\17\121\3\0\1\121\6\0\5\263"+
    "\1\357\65\263\2\132\1\0\1\132\1\0\1\134\65\132"+
    "\1\142\2\0\1\142\1\0\1\143\10\142\1\0\44\142"+
    "\1\0\10\142\2\0\1\142\1\0\11\142\1\0\1\266"+
    "\1\360\1\142\1\266\7\142\27\266\2\142\1\0\1\266"+
    "\7\142\2\0\1\142\1\0\11\142\1\0\1\266\1\360"+
    "\1\142\1\266\7\142\16\266\1\361\10\266\2\142\1\0"+
    "\1\266\6\142\1\270\1\222\1\0\1\270\1\0\5\270"+
    "\1\362\3\270\1\222\44\270\1\222\7\270\1\142\2\0"+
    "\1\142\1\0\5\142\1\363\3\142\1\0\44\142\1\0"+
    "\10\142\2\0\1\142\1\0\11\142\1\0\3\142\1\364"+
    "\40\142\1\0\10\142\2\0\1\142\1\0\11\142\1\0"+
    "\26\142\1\365\15\142\1\0\10\142\2\0\1\142\1\0"+
    "\11\142\1\0\23\142\1\366\20\142\1\0\4\142\1\366"+
    "\3\142\2\0\1\142\1\0\11\142\1\0\36\142\1\367"+
    "\5\142\1\0\10\142\2\0\1\142\1\0\11\142\1\0"+
    "\22\142\1\370\21\142\1\0\7\142\17\0\1\277\1\371"+
    "\1\0\1\277\7\0\27\277\3\0\1\277\25\0\1\277"+
    "\1\371\1\0\1\277\7\0\16\277\1\372\10\277\3\0"+
    "\1\277\56\0\1\373\71\0\1\374\42\0\1\170\2\0"+
    "\1\170\7\0\14\170\1\375\12\170\3\0\1\170\25\0"+
    "\1\170\2\0\1\170\7\0\21\170\1\376\5\170\3\0"+
    "\1\170\4\0\1\377\20\0\1\170\2\0\1\170\7\0"+
    "\20\170\1\u0100\6\170\3\0\1\170\25\0\1\170\2\0"+
    "\1\170\7\0\17\170\1\u0101\7\170\3\0\1\170\25\0"+
    "\1\170\2\0\1\170\7\0\3\170\1\u0102\23\170\3\0"+
    "\1\170\43\0\1\u0103\104\0\1\u0104\24\0\4\313\12\0"+
    "\1\206\2\0\1\206\3\0\1\312\3\0\27\206\1\0"+
    "\1\313\1\0\1\206\1\0\1\313\3\206\2\0\1\206"+
    "\11\0\2\207\2\0\1\210\1\207\1\0\1\210\3\0"+
    "\1\312\3\0\15\210\1\u0105\11\210\1\0\1\313\1\0"+
    "\1\210\2\0\3\206\2\0\1\206\11\0\2\207\2\0"+
    "\1\210\1\207\1\0\1\210\3\0\1\312\3\0\1\u0106"+
    "\26\210\1\0\1\313\1\0\1\210\2\0\3\206\2\0"+
    "\1\206\15\0\1\206\2\0\1\206\3\0\1\312\3\0"+
    "\1\u0107\26\206\1\0\1\313\1\0\1\206\2\0\3\206"+
    "\20\0\1\31\2\0\1\31\7\0\4\31\1\u0108\22\31"+
    "\3\0\1\31\44\0\1\u0109\53\0\1\31\2\0\1\31"+
    "\7\0\16\31\1\u010a\10\31\3\0\1\31\25\0\1\31"+
    "\2\0\1\31\7\0\1\u010b\26\31\3\0\1\31\25\0"+
    "\1\220\2\0\1\220\7\0\27\220\3\0\1\220\25\0"+
    "\1\220\1\323\1\0\1\220\7\0\15\220\1\u010c\11\220"+
    "\3\0\1\220\20\0\1\325\77\0\1\54\1\225\1\0"+
    "\1\327\7\0\27\54\3\0\1\54\55\0\1\u010d\70\0"+
    "\1\u010e\44\0\1\54\1\225\1\0\1\54\7\0\21\54"+
    "\1\u010f\5\54\3\0\1\54\4\0\1\u0110\20\0\1\54"+
    "\1\225\1\0\1\54\7\0\4\54\1\u0111\22\54\3\0"+
    "\1\54\44\0\1\u0112\53\0\1\54\1\225\1\0\1\54"+
    "\7\0\15\54\1\65\11\54\3\0\1\54\55\0\1\u0113"+
    "\42\0\1\54\1\225\1\0\1\54\7\0\16\54\1\u0114"+
    "\10\54\3\0\1\54\25\0\1\54\1\225\1\0\1\54"+
    "\7\0\4\54\1\65\22\54\3\0\1\54\25\0\1\54"+
    "\1\225\1\0\1\54\7\0\1\u0115\26\54\3\0\1\54"+
    "\25\0\1\54\1\225\1\0\1\54\7\0\20\54\1\65"+
    "\6\54\3\0\1\54\25\0\1\242\2\0\1\242\7\0"+
    "\27\242\3\0\1\242\25\0\1\242\1\343\1\0\1\242"+
    "\7\0\15\242\1\u0116\11\242\3\0\1\242\22\0\1\u0117"+
    "\75\0\1\u0118\2\0\1\u0118\7\0\27\u0118\3\0\1\u0118"+
    "\25\0\1\121\2\0\1\121\7\0\21\121\1\u0119\5\121"+
    "\3\0\1\121\4\0\1\u0110\20\0\1\121\2\0\1\121"+
    "\7\0\15\121\1\127\11\121\3\0\1\121\25\0\1\121"+
    "\2\0\1\121\7\0\4\121\1\127\22\121\3\0\1\121"+
    "\25\0\1\121\2\0\1\121\7\0\20\121\1\127\6\121"+
    "\3\0\1\121\13\0\1\263\65\0\1\142\2\0\1\142"+
    "\1\0\11\142\1\0\1\266\2\142\1\266\7\142\27\266"+
    "\2\142\1\0\1\266\7\142\2\0\1\142\1\0\11\142"+
    "\1\0\1\266\1\360\1\142\1\266\7\142\15\266\1\u011a"+
    "\11\266\2\142\1\0\1\266\7\142\2\0\1\142\1\0"+
    "\5\142\1\362\3\142\1\0\44\142\1\0\10\142\2\0"+
    "\1\142\1\0\11\142\1\0\34\142\1\u011b\7\142\1\0"+
    "\5\142\1\u011b\2\142\2\0\1\142\1\0\11\142\1\0"+
    "\30\142\1\156\13\142\1\0\10\142\2\0\1\142\1\0"+
    "\11\142\1\0\17\142\1\156\24\142\1\0\10\142\2\0"+
    "\1\142\1\0\11\142\1\0\33\142\1\156\10\142\1\0"+
    "\7\142\17\0\1\277\2\0\1\277\7\0\27\277\3\0"+
    "\1\277\25\0\1\277\1\371\1\0\1\277\7\0\15\277"+
    "\1\u011c\11\277\3\0\1\277\55\0\1\u011d\60\0\1\u011e"+
    "\54\0\1\170\2\0\1\170\7\0\1\170\1\u011f\25\170"+
    "\3\0\1\170\25\0\1\170\2\0\1\170\7\0\21\170"+
    "\1\u0120\5\170\3\0\1\170\4\0\1\u0121\54\0\1\u0121"+
    "\15\0\1\u0121\20\0\1\170\2\0\1\170\7\0\6\170"+
    "\1\u0122\20\170\3\0\1\170\25\0\1\170\2\0\1\170"+
    "\7\0\4\170\1\u0123\22\170\3\0\1\170\43\0\1\u0124"+
    "\36\0\1\206\11\0\2\207\2\0\1\210\1\207\1\0"+
    "\1\210\3\0\1\312\3\0\5\210\1\u0125\21\210\1\0"+
    "\1\313\1\0\1\210\2\0\3\206\2\0\1\206\11\0"+
    "\2\207\2\0\1\210\1\207\1\0\1\210\3\0\1\312"+
    "\3\0\20\210\1\u0126\6\210\1\0\1\313\1\0\1\210"+
    "\2\0\3\206\2\0\1\206\15\0\1\206\2\0\1\206"+
    "\3\0\1\312\3\0\20\206\1\u0127\6\206\1\0\1\313"+
    "\1\0\1\206\2\0\3\206\20\0\1\31\2\0\1\31"+
    "\7\0\20\31\1\u0128\6\31\3\0\1\31\60\0\1\u0129"+
    "\37\0\1\31\2\0\1\31\7\0\24\31\1\u012a\2\31"+
    "\3\0\1\31\25\0\1\31\2\0\1\31\7\0\22\31"+
    "\1\u012b\4\31\3\0\1\31\25\0\1\220\1\323\1\0"+
    "\1\220\7\0\5\220\1\u012c\21\220\3\0\1\220\56\0"+
    "\1\u012d\67\0\1\u012e\44\0\1\54\1\225\1\0\1\54"+
    "\7\0\2\54\1\u012f\1\54\1\65\22\54\3\0\1\54"+
    "\42\0\1\u0130\1\0\1\u0113\53\0\1\54\1\225\1\0"+
    "\1\54\7\0\20\54\1\u0131\6\54\3\0\1\54\60\0"+
    "\1\u0132\37\0\1\54\1\225\1\0\1\54\7\0\24\54"+
    "\1\u0133\2\54\3\0\1\54\25\0\1\54\1\225\1\0"+
    "\1\54\7\0\22\54\1\u0134\4\54\3\0\1\54\25\0"+
    "\1\242\1\343\1\0\1\242\7\0\5\242\1\u0135\21\242"+
    "\3\0\1\242\25\0\1\121\2\0\1\121\7\0\2\121"+
    "\1\u0136\1\121\1\127\22\121\3\0\1\121\6\0\1\142"+
    "\2\0\1\142\1\0\11\142\1\0\1\266\1\360\1\142"+
    "\1\266\7\142\5\266\1\u0137\21\266\2\142\1\0\1\266"+
    "\7\142\2\0\1\142\1\0\11\142\1\0\15\142\1\u0138"+
    "\1\142\1\156\24\142\1\0\7\142\17\0\1\277\1\371"+
    "\1\0\1\277\7\0\5\277\1\u0139\21\277\3\0\1\277"+
    "\45\0\1\u013a\117\0\1\u013b\25\0\1\170\2\0\1\170"+
    "\7\0\4\170\1\u013c\22\170\3\0\1\170\25\0\1\170"+
    "\2\0\1\170\7\0\25\170\1\u013d\1\170\3\0\1\170"+
    "\65\0\1\u013e\32\0\1\170\2\0\1\170\7\0\4\170"+
    "\1\u013f\22\170\3\0\1\170\72\0\1\u0140\7\0\1\206"+
    "\11\0\2\207\2\0\1\210\1\207\1\0\1\210\3\0"+
    "\1\312\3\0\27\210\1\0\1\313\1\0\1\210\2\0"+
    "\1\206\1\u0141\1\206\2\0\1\206\11\0\2\207\2\0"+
    "\1\210\1\207\1\0\1\210\3\0\1\312\3\0\22\210"+
    "\1\u0142\4\210\1\0\1\313\1\0\1\210\2\0\3\206"+
    "\2\0\1\206\15\0\1\206\2\0\1\206\3\0\1\312"+
    "\3\0\22\206\1\u0143\4\206\1\0\1\313\1\0\1\206"+
    "\2\0\3\206\20\0\1\31\2\0\1\31\7\0\22\31"+
    "\1\u0144\4\31\3\0\1\31\62\0\1\u0145\35\0\1\31"+
    "\2\0\1\31\7\0\4\31\1\u0146\22\31\3\0\1\31"+
    "\25\0\1\31\2\0\1\31\7\0\4\31\1\u0147\22\31"+
    "\3\0\1\31\25\0\1\220\1\323\1\0\1\220\7\0"+
    "\27\220\3\0\1\220\3\0\1\u0148\54\0\1\u0149\47\0"+
    "\1\u014a\62\0\1\54\1\225\1\0\1\54\7\0\7\54"+
    "\1\65\17\54\3\0\1\54\47\0\1\u0113\50\0\1\54"+
    "\1\225\1\0\1\54\7\0\22\54\1\u014b\4\54\3\0"+
    "\1\54\62\0\1\u014c\35\0\1\54\1\225\1\0\1\54"+
    "\7\0\4\54\1\u014d\22\54\3\0\1\54\25\0\1\54"+
    "\1\225\1\0\1\54\7\0\4\54\1\u014e\22\54\3\0"+
    "\1\54\25\0\1\242\1\343\1\0\1\242\7\0\27\242"+
    "\3\0\1\242\3\0\1\u014f\21\0\1\121\2\0\1\121"+
    "\7\0\7\121\1\127\17\121\3\0\1\121\6\0\1\142"+
    "\2\0\1\142\1\0\11\142\1\0\1\266\1\360\1\142"+
    "\1\266\7\142\27\266\2\142\1\0\1\266\3\142\1\u0150"+
    "\3\142\2\0\1\142\1\0\11\142\1\0\22\142\1\156"+
    "\21\142\1\0\7\142\17\0\1\277\1\371\1\0\1\277"+
    "\7\0\27\277\3\0\1\277\3\0\1\u0151\44\0\1\u0151"+
    "\25\0\1\u0151\57\0\1\u0152\34\0\1\170\2\0\1\170"+
    "\7\0\20\170\1\u0153\6\170\3\0\1\170\25\0\1\170"+
    "\2\0\1\170\7\0\16\170\1\u0154\10\170\3\0\1\170"+
    "\56\0\1\u0155\41\0\1\170\2\0\1\170\7\0\22\170"+
    "\1\u0156\4\170\3\0\1\170\63\0\1\u0157\16\0\1\206"+
    "\15\0\1\206\2\0\1\206\3\0\1\312\3\0\6\206"+
    "\1\u0158\20\206\1\0\1\313\1\0\1\206\2\0\3\206"+
    "\2\0\1\206\11\0\2\207\2\0\1\210\1\207\1\0"+
    "\1\210\3\0\1\312\3\0\27\210\1\0\1\313\1\0"+
    "\1\u0159\2\0\3\206\2\0\1\206\15\0\1\206\2\0"+
    "\1\206\3\0\1\312\3\0\27\206\1\0\1\313\1\0"+
    "\1\u015a\2\0\3\206\20\0\1\31\2\0\1\31\7\0"+
    "\27\31\3\0\1\u015b\72\0\1\u015c\46\0\1\u015d\70\0"+
    "\1\u015e\53\0\1\54\1\225\1\0\1\54\7\0\27\54"+
    "\3\0\1\u015f\72\0\1\u0160\46\0\1\u0161\32\0\1\142"+
    "\2\0\1\142\1\0\11\142\1\0\21\142\1\u0162\22\142"+
    "\1\0\7\142\40\0\1\u0163\105\0\1\u0164\15\0\1\u0164"+
    "\20\0\1\170\2\0\1\170\7\0\16\170\1\u0165\10\170"+
    "\3\0\1\170\25\0\1\170\2\0\1\170\7\0\20\170"+
    "\1\u0166\6\170\3\0\1\170\60\0\1\u0167\73\0\1\u0168"+
    "\15\0\1\u0168\2\0\1\206\15\0\1\u0169\2\0\1\206"+
    "\3\0\1\312\3\0\27\206\1\0\1\313\1\0\1\206"+
    "\2\0\3\206\2\0\1\206\11\0\2\207\2\0\1\210"+
    "\1\207\1\0\1\210\3\0\1\312\3\0\23\210\1\u016a"+
    "\3\210\1\0\1\313\1\0\1\210\2\0\3\206\2\0"+
    "\1\206\15\0\1\206\2\0\1\206\3\0\1\312\3\0"+
    "\23\206\1\u016b\3\206\1\0\1\313\1\0\1\206\2\0"+
    "\3\206\20\0\1\31\2\0\1\31\7\0\23\31\1\u016c"+
    "\3\31\3\0\1\31\63\0\1\u016d\34\0\1\u016e\102\0"+
    "\1\u016f\62\0\1\54\1\225\1\0\1\54\7\0\23\54"+
    "\1\u0170\3\54\3\0\1\54\63\0\1\u0171\34\0\1\u0172"+
    "\53\0\1\142\2\0\1\142\1\0\11\142\1\0\1\u0173"+
    "\43\142\1\0\7\142\17\0\1\u0174\111\0\1\u0175\53\0"+
    "\1\170\2\0\1\170\7\0\5\170\1\u0176\21\170\3\0"+
    "\1\170\25\0\1\170\2\0\1\170\7\0\3\170\1\u0177"+
    "\23\170\3\0\1\170\43\0\1\u0178\73\0\1\u0179\35\0"+
    "\1\206\15\0\1\u017a\2\0\1\u017a\3\0\1\312\3\0"+
    "\27\u017a\1\0\1\313\1\0\1\u017a\2\0\3\206\2\0"+
    "\1\206\11\0\2\207\2\0\1\210\1\207\1\0\1\210"+
    "\3\0\1\312\3\0\21\210\1\u017b\5\210\1\0\1\313"+
    "\1\0\1\210\2\0\2\206\1\u017c\2\0\1\206\15\0"+
    "\1\206\2\0\1\206\3\0\1\312\3\0\21\206\1\u017c"+
    "\5\206\1\0\1\313\1\0\1\206\2\0\2\206\1\u017c"+
    "\20\0\1\31\2\0\1\31\7\0\17\31\1\u017d\7\31"+
    "\3\0\1\31\57\0\1\u017e\40\0\1\54\1\225\1\0"+
    "\1\54\7\0\17\54\1\u017f\7\54\3\0\1\54\57\0"+
    "\1\u0180\73\0\1\u0181\37\0\1\170\2\0\1\170\7\0"+
    "\6\170\1\u0182\20\170\3\0\1\170\60\0\1\u0183\21\0"+
    "\1\206\15\0\1\u017a\1\343\1\0\1\u017a\3\0\1\312"+
    "\3\0\27\u017a\1\0\1\313\1\0\1\u017a\2\0\3\206"+
    "\2\0\1\206\11\0\2\207\2\0\1\210\1\207\1\0"+
    "\1\210\3\0\1\312\3\0\4\210\1\u0184\22\210\1\0"+
    "\1\313\1\0\1\210\2\0\3\206\2\0\1\206\15\0"+
    "\1\206\2\0\1\206\3\0\1\312\3\0\4\206\1\u0185"+
    "\22\206\1\0\1\313\1\0\1\206\2\0\3\206\20\0"+
    "\1\31\2\0\1\31\7\0\3\31\1\u0186\23\31\3\0"+
    "\1\31\43\0\1\u0187\54\0\1\54\1\225\1\0\1\54"+
    "\7\0\3\54\1\u0188\23\54\3\0\1\54\43\0\1\u0189"+
    "\107\0\1\u018a\37\0\1\170\2\0\1\170\7\0\20\170"+
    "\1\u018b\6\170\3\0\1\170\60\0\1\u018c\21\0\1\206"+
    "\11\0\2\207\2\0\1\210\1\207\1\0\1\210\3\0"+
    "\1\312\3\0\20\210\1\u018d\6\210\1\0\1\313\1\0"+
    "\1\210\2\0\3\206\2\0\1\206\15\0\1\206\2\0"+
    "\1\206\3\0\1\312\3\0\20\206\1\u018e\6\206\1\0"+
    "\1\313\1\0\1\206\2\0\3\206\20\0\1\31\2\0"+
    "\1\31\7\0\1\u018f\26\31\3\0\1\31\40\0\1\u0190"+
    "\57\0\1\54\1\225\1\0\1\54\7\0\1\u0191\26\54"+
    "\3\0\1\54\40\0\1\u0192\102\0\1\u0193\25\0\1\u0193"+
    "\21\0\1\170\2\0\1\170\7\0\16\170\1\u0194\10\170"+
    "\3\0\1\170\50\0\1\u0195\25\0\1\u0195\3\0\1\206"+
    "\11\0\2\207\2\0\1\210\1\207\1\0\1\210\3\0"+
    "\1\312\3\0\20\210\1\u0196\6\210\1\0\1\313\1\0"+
    "\1\210\2\0\3\206\2\0\1\206\15\0\1\206\2\0"+
    "\1\206\3\0\1\312\3\0\20\206\1\u0197\6\206\1\0"+
    "\1\313\1\0\1\206\2\0\3\206\20\0\1\31\2\0"+
    "\1\31\7\0\22\31\1\u0198\4\31\3\0\1\31\62\0"+
    "\1\u0199\35\0\1\54\1\225\1\0\1\54\7\0\22\54"+
    "\1\u019a\4\54\3\0\1\54\62\0\1\u019b\56\0\1\u019c"+
    "\51\0\1\170\2\0\1\170\7\0\23\170\1\u019d\3\170"+
    "\3\0\1\170\46\0\1\u019e\33\0\1\206\11\0\2\207"+
    "\2\0\1\210\1\207\1\0\1\210\3\0\1\312\3\0"+
    "\10\210\1\u019f\16\210\1\0\1\313\1\0\1\210\2\0"+
    "\1\206\1\u01a0\1\206\2\0\1\206\15\0\1\206\2\0"+
    "\1\206\3\0\1\312\3\0\10\206\1\u01a0\16\206\1\0"+
    "\1\313\1\0\1\206\2\0\1\206\1\u01a0\1\206\20\0"+
    "\1\31\2\0\1\31\7\0\4\31\1\u01a1\22\31\3\0"+
    "\1\31\44\0\1\u01a2\53\0\1\54\1\225\1\0\1\54"+
    "\7\0\4\54\1\u01a3\22\54\3\0\1\54\44\0\1\u01a4"+
    "\75\0\1\u01a5\50\0\1\170\2\0\1\170\7\0\17\170"+
    "\1\u01a6\7\170\3\0\1\170\47\0\1\u01a7\32\0\1\206"+
    "\11\0\2\207\2\0\1\210\1\207\1\0\1\210\3\0"+
    "\1\312\3\0\6\210\1\u01a8\20\210\1\0\1\313\1\0"+
    "\1\210\2\0\3\206\2\0\1\206\15\0\1\206\2\0"+
    "\1\206\3\0\1\312\3\0\6\206\1\u01a9\20\206\1\0"+
    "\1\313\1\0\1\206\2\0\3\206\55\0\1\u01aa\35\0"+
    "\1\170\2\0\1\170\7\0\21\170\1\u01ab\5\170\3\0"+
    "\1\170\4\0\1\u01ac\55\0\1\u01ad\17\0\1\206\11\0"+
    "\2\207\2\0\1\210\1\207\1\0\1\210\3\0\1\312"+
    "\3\0\7\210\1\u01ae\17\210\1\0\1\313\1\0\1\210"+
    "\2\0\3\206\2\0\1\206\15\0\1\206\2\0\1\206"+
    "\3\0\1\312\3\0\7\206\1\u01af\17\206\1\0\1\313"+
    "\1\0\1\206\2\0\3\206\54\0\1\u01b0\15\0\1\u01b0"+
    "\54\0\1\u01b1\15\0\1\u01b1\2\0\1\206\11\0\2\207"+
    "\2\0\1\210\1\207\1\0\1\210\3\0\1\312\3\0"+
    "\22\210\1\u01b2\4\210\1\0\1\313\1\0\1\210\2\0"+
    "\3\206\2\0\1\206\15\0\1\206\2\0\1\206\3\0"+
    "\1\312\3\0\22\206\1\u01b3\4\206\1\0\1\313\1\0"+
    "\1\206\2\0\3\206\2\0\1\206\11\0\2\207\2\0"+
    "\1\210\1\207\1\0\1\210\3\0\1\312\3\0\21\210"+
    "\1\u01b4\5\210\1\0\1\313\1\0\1\210\2\0\2\206"+
    "\1\u01b5\2\0\1\206\15\0\1\206\2\0\1\206\3\0"+
    "\1\312\3\0\21\206\1\u01b5\5\206\1\0\1\313\1\0"+
    "\1\206\2\0\2\206\1\u01b5\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[20768];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\1\12\0\1\11\1\1\1\11\5\1\1\11"+
    "\4\1\1\11\3\1\2\11\1\1\1\11\3\1\1\11"+
    "\13\1\1\11\1\1\1\11\1\1\1\11\4\1\3\11"+
    "\1\1\1\11\1\1\2\11\3\1\1\11\3\1\2\11"+
    "\11\1\1\11\4\1\1\11\1\1\2\11\5\1\1\11"+
    "\10\1\1\11\1\1\1\11\1\1\1\11\4\1\1\11"+
    "\4\1\1\11\2\1\1\11\1\1\1\0\2\1\1\0"+
    "\4\1\1\0\3\1\1\0\2\1\1\0\4\1\2\0"+
    "\10\1\1\0\3\1\1\0\1\11\1\0\1\11\1\1"+
    "\2\0\1\11\2\0\4\1\1\0\15\1\2\0\5\1"+
    "\2\0\1\11\1\0\2\1\1\0\1\1\1\0\4\1"+
    "\1\11\1\0\1\1\2\0\2\1\1\0\1\1\1\0"+
    "\6\1\1\11\1\0\1\11\2\0\21\1\2\0\2\1"+
    "\1\0\3\1\1\11\1\0\2\1\1\0\1\1\1\0"+
    "\3\1\2\0\1\1\1\0\1\1\1\0\1\11\3\1"+
    "\1\11\5\1\2\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\1\1\1\0\3\1\2\0\1\1\1\0\1\1"+
    "\1\0\7\1\2\0\2\1\1\0\1\1\2\0\1\1"+
    "\1\0\4\1\2\0\1\11\4\1\1\0\1\1\2\0"+
    "\2\1\1\0\1\1\2\0\1\1\1\0\1\1\3\0"+
    "\1\1\2\0\1\1\2\0\2\1\3\0\1\1\1\0"+
    "\1\1\2\0\1\11\1\1\2\0\1\1\2\0\2\1"+
    "\1\11\1\0\2\1\1\0\1\1\1\0\1\1\2\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\2\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\2\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\2\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\1\1\1\11"+
    "\1\0\1\1\1\0\1\1\2\0\1\1\1\11\1\0"+
    "\1\1\1\0\2\11\1\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[437];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ImpexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ImpexTypes.BEAN_SHELL_BODY;
            }
          // fall through
          case 78: break;
          case 2:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 79: break;
          case 3:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 80: break;
          case 4:
            { yybegin(YYINITIAL); return ImpexTypes.CRLF;
            }
          // fall through
          case 81: break;
          case 5:
            { return ImpexTypes.LINE_COMMENT;
            }
          // fall through
          case 82: break;
          case 6:
            { yybegin(FIELD_VALUE); return ImpexTypes.VALUE_SUBTYPE;
            }
          // fall through
          case 83: break;
          case 7:
            { yybegin(FIELD_VALUE); return ImpexTypes.FIELD_VALUE_SEPARATOR;
            }
          // fall through
          case 84: break;
          case 8:
            { return ImpexTypes.MACRO_VALUE;
            }
          // fall through
          case 85: break;
          case 9:
            { return ImpexTypes.LEFT_ROUND_BRACKET;
            }
          // fall through
          case 86: break;
          case 10:
            { return ImpexTypes.RIGHT_ROUND_BRACKET;
            }
          // fall through
          case 87: break;
          case 11:
            { return ImpexTypes.BOOLEAN;
            }
          // fall through
          case 88: break;
          case 12:
            { return ImpexTypes.COMMA;
            }
          // fall through
          case 89: break;
          case 13:
            { return ImpexTypes.DIGIT;
            }
          // fall through
          case 90: break;
          case 14:
            { return ImpexTypes.ASSIGN_VALUE;
            }
          // fall through
          case 91: break;
          case 15:
            { return ImpexTypes.LEFT_SQUARE_BRACKET;
            }
          // fall through
          case 92: break;
          case 16:
            { return ImpexTypes.RIGHT_SQUARE_BRACKET;
            }
          // fall through
          case 93: break;
          case 17:
            { yybegin(WAITING_MACRO_VALUE); return ImpexTypes.ASSIGN_VALUE;
            }
          // fall through
          case 94: break;
          case 18:
            { yybegin(HEADER_LINE); return ImpexTypes.HEADER_TYPE;
            }
          // fall through
          case 95: break;
          case 19:
            { return ImpexTypes.HEADER_PARAMETER_NAME;
            }
          // fall through
          case 96: break;
          case 20:
            { return ImpexTypes.DOT;
            }
          // fall through
          case 97: break;
          case 21:
            { return ImpexTypes.PARAMETERS_SEPARATOR;
            }
          // fall through
          case 98: break;
          case 22:
            { yybegin(WAITING_ATTR_OR_PARAM_VALUE); return ImpexTypes.ASSIGN_VALUE;
            }
          // fall through
          case 99: break;
          case 23:
            { yybegin(MODIFIERS_BLOCK); return ImpexTypes.LEFT_SQUARE_BRACKET;
            }
          // fall through
          case 100: break;
          case 24:
            { return ImpexTypes.ALTERNATIVE_PATTERN;
            }
          // fall through
          case 101: break;
          case 25:
            { return ImpexTypes.FIELD_VALUE;
            }
          // fall through
          case 102: break;
          case 26:
            { return ImpexTypes.FIELD_LIST_ITEM_SEPARATOR;
            }
          // fall through
          case 103: break;
          case 27:
            { return ImpexTypes.DEFAULT_PATH_DELIMITER;
            }
          // fall through
          case 104: break;
          case 28:
            { return ImpexTypes.FIELD_VALUE_SEPARATOR;
            }
          // fall through
          case 105: break;
          case 29:
            { return ImpexTypes.ALTERNATIVE_MAP_DELIMITER;
            }
          // fall through
          case 106: break;
          case 30:
            { return ImpexTypes.ATTRIBUTE_SEPARATOR;
            }
          // fall through
          case 107: break;
          case 31:
            { return ImpexTypes.ATTRIBUTE_NAME;
            }
          // fall through
          case 108: break;
          case 32:
            { yybegin(HEADER_LINE); return ImpexTypes.RIGHT_SQUARE_BRACKET;
            }
          // fall through
          case 109: break;
          case 33:
            { yybegin(MODIFIERS_BLOCK); return ImpexTypes.ALTERNATIVE_MAP_DELIMITER;
            }
          // fall through
          case 110: break;
          case 34:
            { return ImpexTypes.ATTRIBUTE_VALUE;
            }
          // fall through
          case 111: break;
          case 35:
            { yybegin(MODIFIERS_BLOCK); return ImpexTypes.ATTRIBUTE_SEPARATOR;
            }
          // fall through
          case 112: break;
          case 36:
            { yypushback(yylength()); yybegin(MACRO_USAGE);
            }
          // fall through
          case 113: break;
          case 37:
            { yybegin(USER_RIGHTS_HEADER_LINE); return ImpexTypes.CRLF;
            }
          // fall through
          case 114: break;
          case 38:
            { return ImpexTypes.CRLF;
            }
          // fall through
          case 115: break;
          case 39:
            { return ImpexTypes.PERMISSION;
            }
          // fall through
          case 116: break;
          case 40:
            { yybegin(USER_RIGHTS_WAIT_FOR_VALUE_LINE); return ImpexTypes.PARAMETERS_SEPARATOR;
            }
          // fall through
          case 117: break;
          case 41:
            { yybegin(USER_RIGHTS_VALUE_LINE); return ImpexTypes.CRLF;
            }
          // fall through
          case 118: break;
          case 42:
            { return ImpexTypes.PERMISSION_ALLOWED;
            }
          // fall through
          case 119: break;
          case 43:
            { return ImpexTypes.PERMISSION_DENIED;
            }
          // fall through
          case 120: break;
          case 44:
            { return ImpexTypes.DOUBLE_STRING;
            }
          // fall through
          case 121: break;
          case 45:
            { yybegin(BEAN_SHELL); return ImpexTypes.BEAN_SHELL_MARKER;
            }
          // fall through
          case 122: break;
          case 46:
            { return ImpexTypes.MACRO_USAGE;
            }
          // fall through
          case 123: break;
          case 47:
            { yypushback(yylength()); yybegin(WAITING_MACRO_CONFIG_USAGE);
            }
          // fall through
          case 124: break;
          case 48:
            { return ImpexTypes.SINGLE_STRING;
            }
          // fall through
          case 125: break;
          case 49:
            { return ImpexTypes.HEADER_SPECIAL_PARAMETER_NAME;
            }
          // fall through
          case 126: break;
          case 50:
            { return ImpexTypes.DOCUMENT_ID;
            }
          // fall through
          case 127: break;
          case 51:
            { yybegin(HEADER_LINE);
                                                              yypushback(1);
                                                              return ImpexTypes.FUNCTION;
            }
          // fall through
          case 128: break;
          case 52:
            { return ImpexTypes.MULTILINE_SEPARATOR;
            }
          // fall through
          case 129: break;
          case 53:
            { return ImpexTypes.DEFAULT_KEY_VALUE_DELIMITER;
            }
          // fall through
          case 130: break;
          case 54:
            { yybegin(WAITING_MACRO_VALUE); return ImpexTypes.MACRO_USAGE;
            }
          // fall through
          case 131: break;
          case 55:
            { yybegin(MACRO_DECLARATION);
                                                              /* Push back '='. */
                                                              yypushback(1);
                                                              /* Push back spaces. */
                                                              yypushback(yylength() - yytext().toString().trim().length());
                                                              return ImpexTypes.MACRO_NAME_DECLARATION;
            }
          // fall through
          case 132: break;
          case 56:
            { return ImpexTypes.COLLECTION_APPEND_PREFIX;
            }
          // fall through
          case 133: break;
          case 57:
            { return ImpexTypes.COLLECTION_REMOVE_PREFIX;
            }
          // fall through
          case 134: break;
          case 58:
            { return ImpexTypes.UID;
            }
          // fall through
          case 135: break;
          case 59:
            { return ImpexTypes.COLLECTION_MERGE_PREFIX;
            }
          // fall through
          case 136: break;
          case 60:
            { return ImpexTypes.FIELD_VALUE_URL;
            }
          // fall through
          case 137: break;
          case 61:
            { return ImpexTypes.TYPE;
            }
          // fall through
          case 138: break;
          case 62:
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_INSERT;
            }
          // fall through
          case 139: break;
          case 63:
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_REMOVE;
            }
          // fall through
          case 140: break;
          case 64:
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_UPDATE;
            }
          // fall through
          case 141: break;
          case 65:
            { return ImpexTypes.FIELD_VALUE_NULL;
            }
          // fall through
          case 142: break;
          case 66:
            { return ImpexTypes.HEADER_MODE_INSERT;
            }
          // fall through
          case 143: break;
          case 67:
            { return ImpexTypes.HEADER_MODE_REMOVE;
            }
          // fall through
          case 144: break;
          case 68:
            { return ImpexTypes.HEADER_MODE_UPDATE;
            }
          // fall through
          case 145: break;
          case 69:
            { return ImpexTypes.TARGET;
            }
          // fall through
          case 146: break;
          case 70:
            { return ImpexTypes.FIELD_VALUE_IGNORE;
            }
          // fall through
          case 147: break;
          case 71:
            { return ImpexTypes.PASSWORD;
            }
          // fall through
          case 148: break;
          case 72:
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_INSERT_UPDATE;
            }
          // fall through
          case 149: break;
          case 73:
            { return ImpexTypes.HEADER_MODE_INSERT_UPDATE;
            }
          // fall through
          case 150: break;
          case 74:
            { return ImpexTypes.MEMBEROFGROUPS;
            }
          // fall through
          case 151: break;
          case 75:
            { yybegin(YYINITIAL); return ImpexTypes.END_USERRIGHTS;
            }
          // fall through
          case 152: break;
          case 76:
            { yybegin(USER_RIGHTS_END); return ImpexTypes.END_USERRIGHTS;
            }
          // fall through
          case 153: break;
          case 77:
            { yybegin(USER_RIGHTS_START); return ImpexTypes.START_USERRIGHTS;
            }
          // fall through
          case 154: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
