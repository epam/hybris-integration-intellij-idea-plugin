// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Impex.flex

/*
 * This file is part of "hybris integration" plugin for Intellij IDEA.
 * Copyright (C) 2014-2016 Alexander Bartash <AlexanderBartash@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

package com.intellij.idea.plugin.hybris.impex;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.idea.plugin.hybris.impex.psi.ImpexTypes;
import com.intellij.psi.TokenType;
import com.intellij.psi.CustomHighlighterTokenType;


class ImpexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_MACRO_VALUE = 2;
  public static final int MACRO_DECLARATION = 4;
  public static final int HEADER_TYPE = 6;
  public static final int HEADER_LINE = 8;
  public static final int FIELD_VALUE = 10;
  public static final int BEAN_SHELL = 12;
  public static final int MODIFIERS_BLOCK = 14;
  public static final int WAITING_ATTR_OR_PARAM_VALUE = 16;
  public static final int HEADER_PARAMETERS = 18;
  public static final int MACRO_USAGE = 20;
  public static final int MACRO_CONFIG_USAGE = 22;
  public static final int WAITING_MACRO_CONFIG_USAGE = 24;
  public static final int USER_RIGHTS_START = 26;
  public static final int USER_RIGHTS_END = 28;
  public static final int USER_RIGHTS_HEADER_LINE = 30;
  public static final int USER_RIGHTS_WAIT_FOR_VALUE_LINE = 32;
  public static final int USER_RIGHTS_VALUE_LINE = 34;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10,  9,  9, 11, 11, 12, 12, 13, 13, 14, 14, 
    15, 15, 16, 16
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\0\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\0\1\15\1\16\1\17\1\20\1\21\12\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\2\43\1\44\1\45\1\46\1\47\1\50\1\43\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\43\1\57\1\43"+
    "\1\60\1\0\1\61\1\0\1\62\1\0\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\2\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\43\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\43\1\57\1\43\1\0"+
    "\1\63\10\0\1\3\252\0\2\64\115\0\1\65\u01a8\0"+
    "\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\12\0\1\2\1\3\2\4\1\2\1\5"+
    "\1\2\1\6\1\7\3\6\1\2\4\10\1\11\1\12"+
    "\1\10\1\13\1\10\1\14\1\10\1\15\7\10\1\16"+
    "\1\17\1\10\1\20\1\21\2\2\1\22\1\23\1\24"+
    "\1\25\1\2\1\26\1\27\5\30\1\31\2\30\1\14"+
    "\1\32\1\33\4\30\1\34\1\1\1\3\1\1\1\2"+
    "\1\35\1\36\1\37\1\40\5\41\1\42\1\14\2\41"+
    "\1\2\2\43\2\44\2\45\1\5\1\2\1\46\1\47"+
    "\4\46\2\50\1\2\1\51\1\52\1\0\1\53\1\54"+
    "\4\55\1\0\3\6\1\0\2\56\1\0\1\57\1\14"+
    "\2\10\1\0\1\60\5\10\1\0\2\55\1\61\1\0"+
    "\1\62\3\0\1\63\2\0\2\30\1\0\1\1\1\53"+
    "\2\55\1\41\1\57\3\41\2\64\2\0\5\46\3\0"+
    "\1\65\3\55\1\0\1\6\1\0\2\6\2\56\1\57"+
    "\1\0\1\14\1\0\2\10\1\0\3\10\2\55\1\66"+
    "\1\0\1\67\2\0\1\14\2\30\1\1\2\55\1\57"+
    "\1\41\1\14\2\41\2\64\2\0\2\46\1\0\2\46"+
    "\2\70\1\0\3\55\1\0\1\6\1\0\2\6\1\56"+
    "\2\0\1\10\1\0\1\10\1\71\1\10\1\55\1\72"+
    "\1\73\1\71\1\55\1\71\1\64\2\0\2\46\1\0"+
    "\1\46\1\74\1\0\3\55\1\0\1\6\1\0\2\6"+
    "\1\56\1\0\1\71\1\10\1\0\2\10\2\55\1\64"+
    "\2\0\2\46\1\0\1\46\1\0\1\55\1\0\1\55"+
    "\1\0\2\75\1\76\1\77\2\0\2\100\1\101\1\102"+
    "\1\0\1\41\2\0\2\46\1\0\1\103\3\0\1\55"+
    "\1\0\1\6\3\0\1\10\2\0\1\41\2\0\2\46"+
    "\4\0\1\55\1\0\1\6\2\0\1\104\1\10\2\0"+
    "\1\41\2\0\1\46\2\105\2\0\3\55\1\0\1\6"+
    "\1\0\1\10\2\0\1\46\2\0\2\55\1\0\1\6"+
    "\1\0\1\10\2\0\1\46\2\0\2\55\1\0\1\6"+
    "\1\0\1\10\2\0\1\46\2\0\2\55\1\0\1\6"+
    "\1\0\1\10\2\0\1\46\2\0\1\55\1\0\2\106"+
    "\2\107\1\0\1\46\1\0\1\55\2\0\2\110\1\0"+
    "\1\55\1\0\1\111\1\112\1\55\1\0\2\113";

  private static int [] zzUnpackAction() {
    int [] result = new int[413];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a"+
    "\0\u0360\0\u0396\0\u03cc\0\u0396\0\u0402\0\u0438\0\u046e\0\u04a4"+
    "\0\u04da\0\u0396\0\u0510\0\u0546\0\u057c\0\u05b2\0\u0396\0\u0438"+
    "\0\u05e8\0\u061e\0\u0396\0\u0396\0\u0654\0\u0396\0\u068a\0\u06c0"+
    "\0\u06f6\0\u0396\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a"+
    "\0\u0870\0\u0396\0\u0396\0\u08a6\0\u0396\0\u08dc\0\u0912\0\u0948"+
    "\0\u097e\0\u0396\0\u0396\0\u0396\0\u072c\0\u0396\0\u0396\0\u0396"+
    "\0\u0438\0\u0912\0\u09b4\0\u0654\0\u0396\0\u09ea\0\u0a20\0\u0a56"+
    "\0\u0396\0\u0396\0\u06f6\0\u0a8c\0\u0ac2\0\u0af8\0\u0396\0\u0b2e"+
    "\0\u0b64\0\u0b9a\0\u061e\0\u0396\0\u0bd0\0\u0396\0\u0396\0\u0c06"+
    "\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0396\0\u0d14\0\u0d4a\0\u0d80"+
    "\0\u0db6\0\u0396\0\u0dec\0\u0396\0\u0e22\0\u0396\0\u0e58\0\u0e8e"+
    "\0\u0ec4\0\u0efa\0\u0396\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u0396"+
    "\0\u1008\0\u103e\0\u0396\0\u0a8c\0\u0438\0\u1074\0\u0e8e\0\u10aa"+
    "\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a"+
    "\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a"+
    "\0\u072c\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584"+
    "\0\u15ba\0\u0948\0\u15f0\0\u0396\0\u1626\0\u165c\0\u1692\0\u0396"+
    "\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842"+
    "\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc\0\u19f2"+
    "\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2"+
    "\0\u1bd8\0\u1c0e\0\u0396\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c"+
    "\0\u1d52\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a\0\u0396\0\u1e60\0\u1e96"+
    "\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046"+
    "\0\u207c\0\u0396\0\u20b2\0\u0396\0\u20e8\0\u0a20\0\u16fe\0\u211e"+
    "\0\u2154\0\u218a\0\u21c0\0\u21f6\0\u0c06\0\u222c\0\u191a\0\u2262"+
    "\0\u2298\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc\0\u2412"+
    "\0\u2448\0\u247e\0\u0efa\0\u0396\0\u24b4\0\u24ea\0\u2520\0\u2556"+
    "\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u269a\0\u26d0\0\u2706"+
    "\0\u273c\0\u2772\0\u27a8\0\u0762\0\u27de\0\u2814\0\u0396\0\u20e8"+
    "\0\u0a8c\0\u284a\0\u0c06\0\u2880\0\u28b6\0\u28ec\0\u2922\0\u2958"+
    "\0\u298e\0\u29c4\0\u0efa\0\u29fa\0\u2a30\0\u2a66\0\u2a9c\0\u2ad2"+
    "\0\u2b08\0\u2b3e\0\u2b74\0\u2baa\0\u2be0\0\u2c16\0\u0396\0\u2c4c"+
    "\0\u2c82\0\u2cb8\0\u2cee\0\u2d24\0\u2d5a\0\u2d90\0\u2dc6\0\u2dfc"+
    "\0\u2e32\0\u2e68\0\u2e9e\0\u2ed4\0\u2f0a\0\u2f40\0\u2f76\0\u2fac"+
    "\0\u2fe2\0\u3018\0\u304e\0\u04da\0\u04da\0\u3084\0\u30ba\0\u30f0"+
    "\0\u3126\0\u0762\0\u0762\0\u315c\0\u3192\0\u31c8\0\u31fe\0\u3234"+
    "\0\u326a\0\u32a0\0\u0efa\0\u32d6\0\u330c\0\u3342\0\u3378\0\u33ae"+
    "\0\u33e4\0\u341a\0\u3450\0\u3486\0\u34bc\0\u34f2\0\u3528\0\u355e"+
    "\0\u3594\0\u35ca\0\u3600\0\u3636\0\u366c\0\u36a2\0\u36d8\0\u370e"+
    "\0\u3744\0\u377a\0\u37b0\0\u37e6\0\u1df4\0\u0396\0\u381c\0\u3852"+
    "\0\u2046\0\u21c0\0\u22ce\0\u3888\0\u38be\0\u0efa\0\u0396\0\u38f4"+
    "\0\u392a\0\u3960\0\u3996\0\u39cc\0\u3a02\0\u3a38\0\u3a6e\0\u3aa4"+
    "\0\u3ada\0\u3b10\0\u3b46\0\u3b7c\0\u3bb2\0\u3be8\0\u3c1e\0\u3c54"+
    "\0\u3c8a\0\u3cc0\0\u3cf6\0\u3d2c\0\u3d62\0\u3d98\0\u3dce\0\u3e04"+
    "\0\u3e3a\0\u3e70\0\u3ea6\0\u3edc\0\u3f12\0\u3f48\0\u3f7e\0\u3fb4"+
    "\0\u3fea\0\u4020\0\u4056\0\u408c\0\u40c2\0\u40f8\0\u412e\0\u4164"+
    "\0\u419a\0\u41d0\0\u4206\0\u423c\0\u4272\0\u42a8\0\u42de\0\u4314"+
    "\0\u04da\0\u0396\0\u0762\0\u0396\0\u434a\0\u4380\0\u43b6\0\u43ec"+
    "\0\u4422\0\u4458\0\u0efa\0\u0396\0\u448e\0\u44c4\0\u44fa\0\u0396"+
    "\0\u0396\0\u4530\0\u4566\0\u10e0\0\u0396";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[413];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\22\1\23\1\24\1\0\1\25\1\26\1\27\1\30"+
    "\7\22\1\31\2\22\1\31\1\22\1\32\5\22\10\31"+
    "\1\33\6\31\1\34\2\31\1\35\3\31\2\22\1\31"+
    "\1\22\1\36\1\22\1\37\1\23\1\24\1\37\1\25"+
    "\1\40\1\37\1\41\2\37\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\2\37\1\50\2\37\1\51\1\52\2\37"+
    "\1\53\5\54\1\55\2\54\1\56\6\54\1\57\1\54"+
    "\1\60\1\61\3\54\1\62\1\63\1\54\1\37\1\64"+
    "\1\37\1\22\1\23\1\24\1\0\1\25\21\22\1\65"+
    "\40\22\1\23\1\24\1\0\1\25\12\22\1\66\2\22"+
    "\1\66\7\22\26\66\2\22\1\66\4\22\1\23\1\24"+
    "\1\0\1\25\2\22\1\67\1\22\1\70\1\22\1\43"+
    "\1\44\1\22\1\46\1\71\1\72\1\22\1\71\1\22"+
    "\1\73\1\22\1\74\2\22\1\75\26\71\1\76\1\63"+
    "\1\71\1\77\2\22\1\100\1\23\1\24\1\100\1\25"+
    "\1\101\1\100\1\102\3\100\1\103\1\100\1\104\1\105"+
    "\1\106\1\100\1\107\1\110\1\111\1\112\1\113\4\100"+
    "\5\114\1\115\13\114\1\116\4\114\2\100\1\114\1\117"+
    "\2\100\1\120\1\121\1\24\1\120\1\25\1\122\60\120"+
    "\1\22\1\23\1\24\1\0\1\25\1\26\1\22\1\67"+
    "\2\22\1\123\3\22\1\124\2\125\1\22\1\125\3\22"+
    "\1\74\3\22\26\125\1\22\1\126\1\125\1\127\2\22"+
    "\1\130\1\23\1\24\1\130\1\25\1\131\1\130\1\132"+
    "\2\130\1\133\2\130\1\134\1\135\1\134\2\130\1\136"+
    "\14\130\1\137\13\130\1\140\5\130\1\126\4\130\1\22"+
    "\1\23\3\0\62\22\1\23\1\24\1\0\1\25\2\22"+
    "\1\141\56\22\1\142\1\23\1\24\1\0\1\25\2\142"+
    "\1\143\56\142\1\22\1\23\1\144\1\0\1\145\17\22"+
    "\1\73\42\22\1\23\1\24\1\0\1\25\17\22\1\73"+
    "\42\22\1\23\1\146\1\0\1\147\1\22\1\150\1\151"+
    "\7\22\1\152\2\22\1\152\1\22\1\153\5\22\13\152"+
    "\1\154\2\152\1\155\2\152\1\156\1\157\3\152\2\22"+
    "\1\152\4\22\1\23\1\160\1\0\1\161\2\22\1\151"+
    "\7\22\1\152\2\22\1\152\1\22\1\73\5\22\13\152"+
    "\1\154\2\152\1\155\2\152\1\156\1\157\3\152\2\22"+
    "\1\152\4\22\1\23\1\160\1\0\1\161\1\22\1\150"+
    "\1\162\5\22\1\163\1\46\1\164\1\72\1\22\1\114"+
    "\1\22\1\112\5\22\26\114\2\22\1\114\3\22\67\0"+
    "\1\23\66\0\1\24\63\0\5\165\1\166\60\165\2\150"+
    "\1\0\1\150\1\0\3\150\1\167\55\150\13\0\2\170"+
    "\2\0\1\171\1\170\1\0\1\171\7\0\2\171\1\172"+
    "\15\171\1\173\5\171\2\0\1\171\2\0\1\174\17\0"+
    "\1\31\2\0\1\31\7\0\26\31\2\0\1\31\22\0"+
    "\1\31\2\0\1\31\7\0\14\31\1\175\11\31\2\0"+
    "\1\31\22\0\1\31\2\0\1\31\7\0\4\31\1\176"+
    "\21\31\2\0\1\31\22\0\1\31\2\0\1\31\7\0"+
    "\16\31\1\177\7\31\2\0\1\31\51\0\1\200\36\0"+
    "\1\201\2\0\1\201\7\0\2\201\1\202\23\201\2\0"+
    "\1\201\3\0\2\203\1\0\1\203\1\0\5\203\1\204"+
    "\53\203\22\0\1\205\62\0\1\54\1\206\1\0\1\50"+
    "\7\0\26\54\2\0\1\54\22\0\1\54\1\207\1\0"+
    "\1\50\7\0\26\54\2\0\1\54\45\0\1\210\21\0"+
    "\1\210\20\0\1\211\2\0\1\211\7\0\26\211\2\0"+
    "\1\211\22\0\1\54\1\206\1\0\1\54\7\0\26\54"+
    "\2\0\1\54\22\0\1\54\1\206\1\0\1\54\7\0"+
    "\1\212\25\54\2\0\1\54\22\0\1\54\1\206\1\0"+
    "\1\54\7\0\14\54\1\213\11\54\2\0\1\54\22\0"+
    "\1\54\1\206\1\0\1\54\7\0\4\54\1\214\21\54"+
    "\2\0\1\54\22\0\1\54\1\206\1\0\1\54\7\0"+
    "\17\54\1\215\6\54\2\0\1\54\22\0\1\54\1\206"+
    "\1\0\1\54\7\0\16\54\1\216\7\54\2\0\1\54"+
    "\51\0\1\217\36\0\1\66\2\0\1\66\7\0\26\66"+
    "\2\0\1\66\22\0\1\220\2\0\1\220\7\0\2\220"+
    "\1\221\23\220\2\0\1\220\22\0\1\222\2\0\1\222"+
    "\7\0\26\222\2\0\1\222\4\0\1\223\11\0\1\224"+
    "\3\0\1\71\1\225\1\0\1\71\6\0\1\225\26\71"+
    "\2\0\1\71\20\0\1\226\1\0\1\227\65\0\1\114"+
    "\2\0\1\110\4\0\1\230\2\0\26\114\2\0\1\114"+
    "\22\0\1\231\2\0\1\231\7\0\26\231\2\0\1\231"+
    "\22\0\1\114\1\232\1\0\1\110\7\0\26\114\2\0"+
    "\1\114\22\0\1\114\2\0\1\114\7\0\26\114\2\0"+
    "\1\114\22\0\1\114\2\0\1\114\7\0\1\233\25\114"+
    "\2\0\1\114\22\0\1\114\2\0\1\114\7\0\17\114"+
    "\1\234\6\114\2\0\1\114\3\0\2\120\1\0\1\120"+
    "\1\0\62\120\1\121\1\0\1\120\1\0\61\120\2\122"+
    "\1\235\1\122\1\235\1\236\60\122\17\0\2\125\1\0"+
    "\1\125\7\0\26\125\2\0\1\125\3\0\1\130\2\0"+
    "\1\130\1\0\11\130\1\0\42\130\1\0\4\130\1\131"+
    "\2\165\1\131\1\165\1\237\10\131\1\165\42\131\1\165"+
    "\4\131\1\130\2\0\1\130\1\0\11\130\1\0\1\240"+
    "\2\130\1\240\7\130\2\240\1\241\23\240\1\130\1\0"+
    "\1\240\3\130\1\242\1\203\1\0\1\242\1\0\5\242"+
    "\1\243\3\242\1\203\42\242\1\203\4\242\1\130\2\0"+
    "\1\130\1\0\11\130\1\0\3\130\1\136\36\130\1\0"+
    "\5\130\2\0\1\130\1\0\11\130\1\0\1\130\1\244"+
    "\1\130\1\136\36\130\1\0\5\130\2\0\1\130\1\0"+
    "\11\130\1\0\13\130\1\245\26\130\1\0\5\130\2\0"+
    "\1\130\1\0\11\130\1\0\32\130\1\246\7\130\1\0"+
    "\4\130\17\0\1\247\2\0\1\247\7\0\2\247\1\250"+
    "\23\247\2\0\1\247\37\0\1\251\33\0\1\144\65\0"+
    "\1\146\63\0\2\150\1\0\1\150\1\0\61\150\36\0"+
    "\1\252\46\0\1\152\2\0\1\152\7\0\26\152\2\0"+
    "\1\152\22\0\1\152\2\0\1\152\7\0\4\152\1\253"+
    "\21\152\2\0\1\152\22\0\1\152\2\0\1\152\7\0"+
    "\1\254\25\152\2\0\1\152\22\0\1\152\2\0\1\152"+
    "\7\0\1\255\24\152\1\256\2\0\1\152\22\0\1\152"+
    "\2\0\1\152\7\0\10\152\1\257\15\152\2\0\1\152"+
    "\1\0\1\260\3\0\1\160\121\0\1\261\34\0\1\165"+
    "\73\0\2\170\2\0\2\170\1\0\1\170\7\0\26\170"+
    "\2\0\1\170\4\0\1\262\11\0\2\170\2\0\1\171"+
    "\1\170\1\0\1\171\3\0\1\263\3\0\2\171\1\264"+
    "\23\171\2\0\1\171\4\0\1\262\11\0\2\170\2\0"+
    "\1\171\1\170\1\0\1\171\3\0\1\263\3\0\2\171"+
    "\1\264\12\171\1\265\10\171\2\0\1\171\4\0\1\262"+
    "\11\0\2\170\2\0\1\171\1\170\1\0\1\171\3\0"+
    "\1\263\3\0\2\171\1\264\16\171\1\266\4\171\2\0"+
    "\1\171\56\0\1\267\31\0\1\31\2\0\1\31\7\0"+
    "\20\31\1\270\5\31\2\0\1\31\2\0\1\271\17\0"+
    "\1\31\2\0\1\31\7\0\13\31\1\272\12\31\2\0"+
    "\1\31\22\0\1\31\2\0\1\31\7\0\3\31\1\273"+
    "\22\31\2\0\1\31\55\0\1\271\12\0\1\271\17\0"+
    "\1\201\1\274\1\0\1\201\7\0\26\201\2\0\1\201"+
    "\22\0\1\201\1\274\1\0\1\201\7\0\15\201\1\275"+
    "\10\201\2\0\1\201\3\0\2\203\1\0\1\203\1\0"+
    "\5\203\1\276\53\203\12\0\1\277\73\0\1\232\1\0"+
    "\1\205\62\0\1\54\2\0\1\54\7\0\26\54\2\0"+
    "\1\54\22\0\1\54\2\0\1\300\7\0\26\54\2\0"+
    "\1\54\43\0\1\301\44\0\1\54\1\206\1\0\1\54"+
    "\7\0\12\54\1\302\13\54\2\0\1\54\22\0\1\54"+
    "\1\206\1\0\1\54\7\0\20\54\1\303\5\54\2\0"+
    "\1\54\2\0\1\304\17\0\1\54\1\206\1\0\1\54"+
    "\7\0\13\54\1\305\12\54\2\0\1\54\22\0\1\54"+
    "\1\206\1\0\1\54\7\0\22\54\1\306\3\54\2\0"+
    "\1\54\22\0\1\54\1\206\1\0\1\54\7\0\3\54"+
    "\1\307\22\54\2\0\1\54\55\0\1\304\12\0\1\304"+
    "\17\0\1\220\1\310\1\0\1\220\7\0\26\220\2\0"+
    "\1\220\22\0\1\220\1\310\1\0\1\220\7\0\15\220"+
    "\1\311\10\220\2\0\1\220\4\0\1\223\11\0\1\224"+
    "\71\0\1\71\2\0\1\71\7\0\26\71\2\0\1\71"+
    "\17\0\1\312\13\0\1\313\51\0\1\314\70\0\1\231"+
    "\1\315\1\316\1\231\7\0\26\231\2\0\1\231\25\0"+
    "\1\317\62\0\1\114\2\0\1\114\7\0\12\114\1\320"+
    "\13\114\2\0\1\114\22\0\1\114\2\0\1\114\7\0"+
    "\22\114\1\321\3\114\2\0\1\114\3\0\5\235\1\322"+
    "\60\235\2\120\1\0\1\120\1\0\1\122\60\120\1\130"+
    "\2\0\1\130\1\0\1\131\10\130\1\0\42\130\1\0"+
    "\5\130\2\0\1\130\1\0\11\130\1\0\1\240\1\323"+
    "\1\130\1\240\7\130\26\240\1\130\1\0\1\240\4\130"+
    "\2\0\1\130\1\0\11\130\1\0\1\240\1\323\1\130"+
    "\1\240\7\130\15\240\1\324\10\240\1\130\1\0\1\240"+
    "\3\130\1\242\1\203\1\0\1\242\1\0\5\242\1\325"+
    "\3\242\1\203\42\242\1\203\4\242\1\130\2\0\1\130"+
    "\1\0\5\130\1\326\3\130\1\0\42\130\1\0\5\130"+
    "\2\0\1\130\1\0\11\130\1\0\3\130\1\327\36\130"+
    "\1\0\5\130\2\0\1\130\1\0\11\130\1\0\25\130"+
    "\1\330\14\130\1\0\5\130\2\0\1\130\1\0\11\130"+
    "\1\0\35\130\1\331\4\130\1\0\4\130\17\0\1\247"+
    "\1\332\1\0\1\247\7\0\26\247\2\0\1\247\22\0"+
    "\1\247\1\332\1\0\1\247\7\0\15\247\1\333\10\247"+
    "\2\0\1\247\52\0\1\334\64\0\1\335\36\0\1\152"+
    "\2\0\1\152\7\0\13\152\1\336\12\152\2\0\1\152"+
    "\22\0\1\152\2\0\1\152\7\0\20\152\1\337\5\152"+
    "\2\0\1\152\2\0\1\340\17\0\1\152\2\0\1\152"+
    "\7\0\17\152\1\341\6\152\2\0\1\152\22\0\1\152"+
    "\2\0\1\152\7\0\16\152\1\342\7\152\2\0\1\152"+
    "\22\0\1\152\2\0\1\152\7\0\3\152\1\343\22\152"+
    "\2\0\1\152\40\0\1\344\76\0\1\345\20\0\1\262"+
    "\24\0\1\263\40\0\1\262\11\0\2\170\2\0\1\171"+
    "\1\170\1\0\1\171\3\0\1\263\3\0\2\171\1\264"+
    "\12\171\1\346\10\171\2\0\1\171\4\0\1\262\11\0"+
    "\2\170\2\0\1\171\1\170\1\0\1\171\3\0\1\263"+
    "\3\0\2\171\1\264\11\171\1\347\11\171\2\0\1\171"+
    "\4\0\1\262\11\0\2\170\2\0\1\171\1\170\1\0"+
    "\1\171\3\0\1\263\3\0\1\350\1\171\1\264\23\171"+
    "\2\0\1\171\35\0\1\351\52\0\1\31\2\0\1\31"+
    "\7\0\4\31\1\352\21\31\2\0\1\31\41\0\1\353"+
    "\46\0\1\31\2\0\1\31\7\0\15\31\1\354\10\31"+
    "\2\0\1\31\22\0\1\31\2\0\1\31\7\0\1\355"+
    "\25\31\2\0\1\31\22\0\1\201\2\0\1\201\7\0"+
    "\26\201\2\0\1\201\22\0\1\201\1\274\1\0\1\201"+
    "\7\0\14\201\1\356\11\201\2\0\1\201\15\0\1\276"+
    "\72\0\1\54\1\206\1\0\1\300\7\0\26\54\2\0"+
    "\1\54\51\0\1\357\36\0\1\54\1\206\1\0\1\54"+
    "\7\0\20\54\1\306\5\54\2\0\1\54\2\0\1\360"+
    "\17\0\1\54\1\206\1\0\1\54\7\0\4\54\1\361"+
    "\21\54\2\0\1\54\41\0\1\362\46\0\1\54\1\206"+
    "\1\0\1\54\7\0\15\54\1\363\10\54\2\0\1\54"+
    "\22\0\1\54\1\206\1\0\1\54\7\0\4\54\1\364"+
    "\21\54\2\0\1\54\22\0\1\54\1\206\1\0\1\54"+
    "\7\0\1\365\25\54\2\0\1\54\22\0\1\220\2\0"+
    "\1\220\7\0\26\220\2\0\1\220\22\0\1\220\1\310"+
    "\1\0\1\220\7\0\14\220\1\366\11\220\2\0\1\220"+
    "\17\0\1\367\70\0\1\370\2\0\1\370\7\0\26\370"+
    "\2\0\1\370\22\0\1\114\2\0\1\114\7\0\20\114"+
    "\1\321\5\114\2\0\1\114\2\0\1\360\17\0\1\114"+
    "\2\0\1\114\7\0\4\114\1\371\21\114\2\0\1\114"+
    "\10\0\1\235\60\0\1\130\2\0\1\130\1\0\11\130"+
    "\1\0\1\240\2\130\1\240\7\130\26\240\1\130\1\0"+
    "\1\240\4\130\2\0\1\130\1\0\11\130\1\0\1\240"+
    "\1\323\1\130\1\240\7\130\14\240\1\372\11\240\1\130"+
    "\1\0\1\240\4\130\2\0\1\130\1\0\5\130\1\325"+
    "\3\130\1\0\42\130\1\0\5\130\2\0\1\130\1\0"+
    "\11\130\1\0\33\130\1\331\6\130\1\0\3\130\1\331"+
    "\1\130\2\0\1\130\1\0\11\130\1\0\17\130\1\373"+
    "\22\130\1\0\4\130\17\0\1\247\2\0\1\247\7\0"+
    "\26\247\2\0\1\247\22\0\1\247\1\332\1\0\1\247"+
    "\7\0\14\247\1\374\11\247\2\0\1\247\51\0\1\375"+
    "\54\0\1\376\47\0\1\152\2\0\1\152\7\0\1\152"+
    "\1\377\24\152\2\0\1\152\22\0\1\152\2\0\1\152"+
    "\7\0\20\152\1\u0100\5\152\2\0\1\152\2\0\1\u0101"+
    "\52\0\1\u0101\12\0\1\u0101\17\0\1\152\2\0\1\152"+
    "\7\0\6\152\1\u0102\17\152\2\0\1\152\22\0\1\152"+
    "\2\0\1\152\7\0\4\152\1\u0103\21\152\2\0\1\152"+
    "\40\0\1\u0104\31\0\1\262\11\0\2\170\2\0\1\171"+
    "\1\170\1\0\1\171\3\0\1\263\3\0\2\171\1\264"+
    "\11\171\1\u0105\11\171\2\0\1\171\4\0\1\262\11\0"+
    "\2\170\2\0\1\171\1\170\1\0\1\171\3\0\1\263"+
    "\3\0\2\171\1\264\2\171\1\u0106\20\171\2\0\1\171"+
    "\4\0\1\262\11\0\2\170\2\0\1\171\1\170\1\0"+
    "\1\171\3\0\1\263\3\0\2\171\1\264\14\171\1\u0107"+
    "\6\171\2\0\1\171\54\0\1\u0108\33\0\1\31\2\0"+
    "\1\31\7\0\17\31\1\u0109\6\31\2\0\1\31\54\0"+
    "\1\u010a\33\0\1\31\2\0\1\31\7\0\23\31\1\u010b"+
    "\2\31\2\0\1\31\22\0\1\31\2\0\1\31\7\0"+
    "\21\31\1\u010c\4\31\2\0\1\31\22\0\1\201\1\274"+
    "\1\0\1\201\7\0\5\201\1\u010d\20\201\2\0\1\201"+
    "\52\0\1\u010e\54\0\1\u010f\46\0\1\54\1\206\1\0"+
    "\1\54\7\0\17\54\1\u0110\6\54\2\0\1\54\54\0"+
    "\1\u0111\33\0\1\54\1\206\1\0\1\54\7\0\23\54"+
    "\1\u0112\2\54\2\0\1\54\22\0\1\54\1\206\1\0"+
    "\1\54\7\0\21\54\1\u0113\4\54\2\0\1\54\22\0"+
    "\1\220\1\310\1\0\1\220\7\0\5\220\1\u0114\20\220"+
    "\2\0\1\220\3\0\1\130\2\0\1\130\1\0\11\130"+
    "\1\0\1\240\1\323\1\130\1\240\7\130\5\240\1\u0115"+
    "\20\240\1\130\1\0\1\240\3\130\17\0\1\247\1\332"+
    "\1\0\1\247\7\0\5\247\1\u0116\20\247\2\0\1\247"+
    "\42\0\1\u0117\110\0\1\u0118\22\0\1\152\2\0\1\152"+
    "\7\0\4\152\1\u0119\21\152\2\0\1\152\22\0\1\152"+
    "\2\0\1\152\7\0\24\152\1\u011a\1\152\2\0\1\152"+
    "\61\0\1\u011b\26\0\1\152\2\0\1\152\7\0\4\152"+
    "\1\u011c\21\152\2\0\1\152\65\0\1\u011d\4\0\1\262"+
    "\11\0\2\170\2\0\1\171\1\170\1\0\1\171\3\0"+
    "\1\263\3\0\2\171\1\264\2\171\1\u011e\20\171\2\0"+
    "\1\171\4\0\1\262\11\0\2\170\2\0\1\171\1\170"+
    "\1\0\1\171\3\0\1\263\3\0\2\171\1\264\23\171"+
    "\2\0\1\171\1\0\1\u011f\2\0\1\262\11\0\2\170"+
    "\2\0\1\171\1\170\1\0\1\171\3\0\1\263\3\0"+
    "\2\171\1\264\16\171\1\u0120\4\171\2\0\1\171\56\0"+
    "\1\u0121\31\0\1\31\2\0\1\31\7\0\21\31\1\u0122"+
    "\4\31\2\0\1\31\56\0\1\u0123\31\0\1\31\2\0"+
    "\1\31\7\0\4\31\1\u0124\21\31\2\0\1\31\22\0"+
    "\1\31\2\0\1\31\7\0\4\31\1\u0125\21\31\2\0"+
    "\1\31\22\0\1\201\1\274\1\0\1\201\7\0\26\201"+
    "\2\0\1\201\1\0\1\u0126\52\0\1\u0127\33\0\1\54"+
    "\1\206\1\0\1\54\7\0\21\54\1\u0128\4\54\2\0"+
    "\1\54\56\0\1\u0129\31\0\1\54\1\206\1\0\1\54"+
    "\7\0\4\54\1\u012a\21\54\2\0\1\54\22\0\1\54"+
    "\1\206\1\0\1\54\7\0\4\54\1\u012b\21\54\2\0"+
    "\1\54\22\0\1\220\1\310\1\0\1\220\7\0\26\220"+
    "\2\0\1\220\1\0\1\u012c\1\0\1\130\2\0\1\130"+
    "\1\0\11\130\1\0\1\240\1\323\1\130\1\240\7\130"+
    "\26\240\1\130\1\0\1\240\1\130\1\u012d\1\130\17\0"+
    "\1\247\1\332\1\0\1\247\7\0\26\247\2\0\1\247"+
    "\1\0\1\u012e\43\0\1\u012e\21\0\1\u012e\55\0\1\u012f"+
    "\30\0\1\152\2\0\1\152\7\0\17\152\1\u0130\6\152"+
    "\2\0\1\152\22\0\1\152\2\0\1\152\7\0\15\152"+
    "\1\u0131\10\152\2\0\1\152\52\0\1\u0132\35\0\1\152"+
    "\2\0\1\152\7\0\21\152\1\u0133\4\152\2\0\1\152"+
    "\57\0\1\u0134\12\0\1\262\11\0\2\170\2\0\1\171"+
    "\1\170\1\0\1\171\3\0\1\263\3\0\2\171\1\264"+
    "\23\171\2\0\1\171\1\0\1\u0135\41\0\1\u0136\26\0"+
    "\1\262\11\0\2\170\2\0\1\171\1\170\1\0\1\171"+
    "\3\0\1\263\3\0\2\171\1\264\23\171\2\0\1\u0137"+
    "\65\0\1\u0138\22\0\1\31\2\0\1\31\7\0\26\31"+
    "\2\0\1\u0139\65\0\1\u013a\43\0\1\u013b\63\0\1\u013c"+
    "\46\0\1\54\1\206\1\0\1\54\7\0\26\54\2\0"+
    "\1\u013d\65\0\1\u013e\43\0\1\u013f\25\0\1\130\2\0"+
    "\1\130\1\0\11\130\1\0\21\130\1\u0140\20\130\1\0"+
    "\4\130\40\0\1\u0141\77\0\1\u0142\12\0\1\u0142\17\0"+
    "\1\152\2\0\1\152\7\0\15\152\1\u0143\10\152\2\0"+
    "\1\152\22\0\1\152\2\0\1\152\7\0\17\152\1\u0144"+
    "\6\152\2\0\1\152\54\0\1\u0145\66\0\1\u0146\12\0"+
    "\1\u0146\40\0\1\u0147\44\0\1\u0148\47\0\1\262\11\0"+
    "\2\170\2\0\1\171\1\170\1\0\1\171\3\0\1\263"+
    "\3\0\2\171\1\264\17\171\1\u0149\3\171\2\0\1\171"+
    "\57\0\1\u014a\30\0\1\31\2\0\1\31\7\0\22\31"+
    "\1\u014b\3\31\2\0\1\31\57\0\1\u014c\30\0\1\u014d"+
    "\75\0\1\u014e\55\0\1\54\1\206\1\0\1\54\7\0"+
    "\22\54\1\u014f\3\54\2\0\1\54\57\0\1\u0150\30\0"+
    "\1\u0151\46\0\1\130\2\0\1\130\1\0\11\130\1\0"+
    "\1\u0152\41\130\1\0\4\130\17\0\1\u0153\104\0\1\u0154"+
    "\46\0\1\152\2\0\1\152\7\0\5\152\1\u0155\20\152"+
    "\2\0\1\152\22\0\1\152\2\0\1\152\7\0\3\152"+
    "\1\u0156\22\152\2\0\1\152\40\0\1\u0157\66\0\1\u0158"+
    "\46\0\1\u0159\47\0\1\262\15\0\1\u015a\2\0\1\u015a"+
    "\3\0\1\263\3\0\2\u015a\1\u015b\23\u015a\2\0\1\u015a"+
    "\4\0\1\262\11\0\2\170\2\0\1\171\1\170\1\0"+
    "\1\171\3\0\1\263\3\0\2\171\1\264\15\171\1\u015c"+
    "\5\171\2\0\1\171\2\0\1\u015d\52\0\1\u015d\12\0"+
    "\1\u015d\17\0\1\31\2\0\1\31\7\0\16\31\1\u015e"+
    "\7\31\2\0\1\31\53\0\1\u015f\34\0\1\54\1\206"+
    "\1\0\1\54\7\0\16\54\1\u0160\7\54\2\0\1\54"+
    "\53\0\1\u0161\66\0\1\u0162\33\0\1\152\2\0\1\152"+
    "\7\0\6\152\1\u0163\17\152\2\0\1\152\54\0\1\u0164"+
    "\15\0\1\262\15\0\1\u0159\2\0\1\u0159\3\0\1\263"+
    "\3\0\2\u0159\1\u0165\23\u0159\2\0\1\u0159\4\0\1\262"+
    "\15\0\1\u015a\1\310\1\0\1\u015a\3\0\1\263\3\0"+
    "\2\u015a\1\u015b\23\u015a\2\0\1\u015a\4\0\1\262\15\0"+
    "\1\u015a\1\310\1\0\1\u015a\3\0\1\263\3\0\2\u015a"+
    "\1\u015b\12\u015a\1\u0166\10\u015a\2\0\1\u015a\4\0\1\262"+
    "\11\0\2\170\2\0\1\171\1\170\1\0\1\171\3\0"+
    "\1\263\3\0\2\171\1\264\1\171\1\u0167\21\171\2\0"+
    "\1\171\41\0\1\u0168\46\0\1\31\2\0\1\31\7\0"+
    "\3\31\1\u0169\22\31\2\0\1\31\40\0\1\u016a\47\0"+
    "\1\54\1\206\1\0\1\54\7\0\3\54\1\u016b\22\54"+
    "\2\0\1\54\40\0\1\u016c\101\0\1\u016d\33\0\1\152"+
    "\2\0\1\152\7\0\17\152\1\u016e\6\152\2\0\1\152"+
    "\54\0\1\u016f\15\0\1\262\15\0\1\u0159\2\0\1\u0159"+
    "\3\0\1\263\3\0\2\u0159\1\u0165\12\u0159\1\u0170\10\u0159"+
    "\2\0\1\u0159\4\0\1\262\15\0\1\u015a\1\310\1\0"+
    "\1\u015a\3\0\1\263\3\0\2\u015a\1\u015b\11\u015a\1\u0171"+
    "\11\u015a\2\0\1\u015a\4\0\1\262\11\0\2\170\2\0"+
    "\1\171\1\170\1\0\1\171\3\0\1\263\3\0\2\171"+
    "\1\264\14\171\1\u0172\6\171\2\0\1\171\54\0\1\u0173"+
    "\33\0\1\31\2\0\1\31\7\0\1\u0174\25\31\2\0"+
    "\1\31\35\0\1\u0175\52\0\1\54\1\206\1\0\1\54"+
    "\7\0\1\u0176\25\54\2\0\1\54\35\0\1\u0177\75\0"+
    "\1\u0178\21\0\1\u0178\20\0\1\152\2\0\1\152\7\0"+
    "\15\152\1\u0179\10\152\2\0\1\152\45\0\1\u017a\21\0"+
    "\1\u017a\2\0\1\262\15\0\1\u0159\2\0\1\u0159\3\0"+
    "\1\263\3\0\2\u0159\1\u0165\11\u0159\1\u017b\11\u0159\2\0"+
    "\1\u0159\4\0\1\262\15\0\1\u015a\1\310\1\0\1\u015a"+
    "\3\0\1\263\3\0\2\u015a\1\u015b\2\u015a\1\u017c\20\u015a"+
    "\2\0\1\u015a\4\0\1\262\11\0\2\170\2\0\1\171"+
    "\1\170\1\0\1\171\3\0\1\263\3\0\2\171\1\264"+
    "\14\171\1\u017d\6\171\2\0\1\171\54\0\1\u017e\33\0"+
    "\1\31\2\0\1\31\7\0\21\31\1\u017f\4\31\2\0"+
    "\1\31\56\0\1\u0180\31\0\1\54\1\206\1\0\1\54"+
    "\7\0\21\54\1\u0181\4\54\2\0\1\54\56\0\1\u0182"+
    "\52\0\1\u0183\44\0\1\152\2\0\1\152\7\0\22\152"+
    "\1\u0184\3\152\2\0\1\152\43\0\1\u0185\26\0\1\262"+
    "\15\0\1\u0159\2\0\1\u0159\3\0\1\263\3\0\2\u0159"+
    "\1\u0165\2\u0159\1\u0186\20\u0159\2\0\1\u0159\4\0\1\262"+
    "\15\0\1\u015a\1\310\1\0\1\u015a\3\0\1\263\3\0"+
    "\2\u015a\1\u015b\23\u015a\2\0\1\u015a\1\0\1\u0135\2\0"+
    "\1\262\11\0\2\170\2\0\1\171\1\170\1\0\1\171"+
    "\3\0\1\263\3\0\2\171\1\264\5\171\1\u0187\15\171"+
    "\2\0\1\171\1\0\1\u0188\43\0\1\u0188\21\0\1\u0188"+
    "\20\0\1\31\2\0\1\31\7\0\4\31\1\u0189\21\31"+
    "\2\0\1\31\41\0\1\u018a\46\0\1\54\1\206\1\0"+
    "\1\54\7\0\4\54\1\u018b\21\54\2\0\1\54\41\0"+
    "\1\u018c\70\0\1\u018d\43\0\1\152\2\0\1\152\7\0"+
    "\16\152\1\u018e\7\152\2\0\1\152\44\0\1\u018f\25\0"+
    "\1\262\15\0\1\u0159\2\0\1\u0159\3\0\1\263\3\0"+
    "\2\u0159\1\u0165\23\u0159\2\0\1\u0159\1\0\1\u0135\2\0"+
    "\1\262\11\0\2\170\2\0\1\171\1\170\1\0\1\171"+
    "\3\0\1\263\3\0\2\171\1\264\3\171\1\u0190\17\171"+
    "\2\0\1\171\43\0\1\u0191\100\0\1\u0192\31\0\1\152"+
    "\2\0\1\152\7\0\20\152\1\u0193\5\152\2\0\1\152"+
    "\2\0\1\u0194\53\0\1\u0195\13\0\1\262\11\0\2\170"+
    "\2\0\1\171\1\170\1\0\1\171\3\0\1\263\3\0"+
    "\2\171\1\264\4\171\1\u0196\16\171\2\0\1\171\44\0"+
    "\1\u0197\76\0\1\u0198\12\0\1\u0198\52\0\1\u0199\12\0"+
    "\1\u0199\1\0\1\262\11\0\2\170\2\0\1\171\1\170"+
    "\1\0\1\171\3\0\1\263\3\0\2\171\1\264\16\171"+
    "\1\u019a\4\171\2\0\1\171\56\0\1\u019b\13\0\1\262"+
    "\11\0\2\170\2\0\1\171\1\170\1\0\1\171\3\0"+
    "\1\263\3\0\2\171\1\264\15\171\1\u019c\5\171\2\0"+
    "\1\171\2\0\1\u019d\52\0\1\u019d\12\0\1\u019d";

  private static int [] zzUnpacktrans() {
    int [] result = new int[17820];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\1\12\0\1\11\1\1\1\11\5\1\1\11"+
    "\4\1\1\11\3\1\2\11\1\1\1\11\3\1\1\11"+
    "\7\1\2\11\1\1\1\11\4\1\3\11\1\1\3\11"+
    "\4\1\1\11\3\1\2\11\4\1\1\11\4\1\1\11"+
    "\1\1\2\11\5\1\1\11\4\1\1\11\1\1\1\11"+
    "\1\1\1\11\4\1\1\11\4\1\1\11\2\1\1\11"+
    "\1\1\1\0\6\1\1\0\3\1\1\0\2\1\1\0"+
    "\4\1\1\0\6\1\1\0\3\1\1\0\1\11\3\0"+
    "\1\11\2\0\2\1\1\0\13\1\2\0\5\1\3\0"+
    "\1\11\3\1\1\0\1\1\1\0\4\1\1\11\1\0"+
    "\1\1\1\0\2\1\1\0\5\1\1\11\1\0\1\11"+
    "\2\0\15\1\2\0\2\1\1\0\3\1\1\11\1\0"+
    "\3\1\1\0\1\1\1\0\3\1\2\0\1\1\1\0"+
    "\4\1\1\11\5\1\2\0\2\1\1\0\2\1\1\0"+
    "\3\1\1\0\1\1\1\0\3\1\1\0\1\11\1\1"+
    "\1\0\5\1\2\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\4\1\2\0\4\1\1\0\1\1"+
    "\2\0\2\1\1\0\1\1\3\0\1\1\1\0\1\1"+
    "\3\0\1\1\2\0\1\1\2\0\2\1\4\0\1\1"+
    "\1\0\1\1\2\0\1\11\1\1\2\0\1\1\2\0"+
    "\2\1\1\11\2\0\3\1\1\0\1\1\1\0\1\1"+
    "\2\0\1\1\2\0\2\1\1\0\1\1\1\0\1\1"+
    "\2\0\1\1\2\0\2\1\1\0\1\1\1\0\1\1"+
    "\2\0\1\1\2\0\2\1\1\0\1\1\1\0\1\1"+
    "\2\0\1\1\2\0\1\1\1\0\1\1\1\11\1\1"+
    "\1\11\1\0\1\1\1\0\1\1\2\0\1\1\1\11"+
    "\1\0\1\1\1\0\2\11\1\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[413];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ImpexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ImpexTypes.BEAN_SHELL_BODY;
            }
          // fall through
          case 76: break;
          case 2:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 77: break;
          case 3:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 78: break;
          case 4:
            { yybegin(YYINITIAL); return ImpexTypes.CRLF;
            }
          // fall through
          case 79: break;
          case 5:
            { return ImpexTypes.LINE_COMMENT;
            }
          // fall through
          case 80: break;
          case 6:
            { yybegin(FIELD_VALUE); return ImpexTypes.VALUE_SUBTYPE;
            }
          // fall through
          case 81: break;
          case 7:
            { yybegin(FIELD_VALUE); return ImpexTypes.FIELD_VALUE_SEPARATOR;
            }
          // fall through
          case 82: break;
          case 8:
            { return ImpexTypes.MACRO_VALUE;
            }
          // fall through
          case 83: break;
          case 9:
            { return ImpexTypes.LEFT_ROUND_BRACKET;
            }
          // fall through
          case 84: break;
          case 10:
            { return ImpexTypes.RIGHT_ROUND_BRACKET;
            }
          // fall through
          case 85: break;
          case 11:
            { return ImpexTypes.COMMA;
            }
          // fall through
          case 86: break;
          case 12:
            { return ImpexTypes.DIGIT;
            }
          // fall through
          case 87: break;
          case 13:
            { return ImpexTypes.ASSIGN_VALUE;
            }
          // fall through
          case 88: break;
          case 14:
            { return ImpexTypes.LEFT_SQUARE_BRACKET;
            }
          // fall through
          case 89: break;
          case 15:
            { return ImpexTypes.RIGHT_SQUARE_BRACKET;
            }
          // fall through
          case 90: break;
          case 16:
            { yybegin(WAITING_MACRO_VALUE); return ImpexTypes.ASSIGN_VALUE;
            }
          // fall through
          case 91: break;
          case 17:
            { yybegin(HEADER_LINE); return ImpexTypes.HEADER_TYPE;
            }
          // fall through
          case 92: break;
          case 18:
            { return ImpexTypes.HEADER_PARAMETER_NAME;
            }
          // fall through
          case 93: break;
          case 19:
            { return ImpexTypes.DOT;
            }
          // fall through
          case 94: break;
          case 20:
            { return ImpexTypes.PARAMETERS_SEPARATOR;
            }
          // fall through
          case 95: break;
          case 21:
            { yybegin(WAITING_ATTR_OR_PARAM_VALUE); return ImpexTypes.ASSIGN_VALUE;
            }
          // fall through
          case 96: break;
          case 22:
            { yybegin(MODIFIERS_BLOCK); return ImpexTypes.LEFT_SQUARE_BRACKET;
            }
          // fall through
          case 97: break;
          case 23:
            { return ImpexTypes.ALTERNATIVE_PATTERN;
            }
          // fall through
          case 98: break;
          case 24:
            { return ImpexTypes.FIELD_VALUE;
            }
          // fall through
          case 99: break;
          case 25:
            { return ImpexTypes.FIELD_LIST_ITEM_SEPARATOR;
            }
          // fall through
          case 100: break;
          case 26:
            { return ImpexTypes.DEFAULT_PATH_DELIMITER;
            }
          // fall through
          case 101: break;
          case 27:
            { return ImpexTypes.FIELD_VALUE_SEPARATOR;
            }
          // fall through
          case 102: break;
          case 28:
            { return ImpexTypes.ALTERNATIVE_MAP_DELIMITER;
            }
          // fall through
          case 103: break;
          case 29:
            { return ImpexTypes.ATTRIBUTE_SEPARATOR;
            }
          // fall through
          case 104: break;
          case 30:
            { return ImpexTypes.ATTRIBUTE_NAME;
            }
          // fall through
          case 105: break;
          case 31:
            { yybegin(HEADER_LINE); return ImpexTypes.RIGHT_SQUARE_BRACKET;
            }
          // fall through
          case 106: break;
          case 32:
            { yybegin(MODIFIERS_BLOCK); return ImpexTypes.ALTERNATIVE_MAP_DELIMITER;
            }
          // fall through
          case 107: break;
          case 33:
            { return ImpexTypes.ATTRIBUTE_VALUE;
            }
          // fall through
          case 108: break;
          case 34:
            { yybegin(MODIFIERS_BLOCK); return ImpexTypes.ATTRIBUTE_SEPARATOR;
            }
          // fall through
          case 109: break;
          case 35:
            { yypushback(yylength()); yybegin(MACRO_USAGE);
            }
          // fall through
          case 110: break;
          case 36:
            { yybegin(USER_RIGHTS_HEADER_LINE); return ImpexTypes.CRLF;
            }
          // fall through
          case 111: break;
          case 37:
            { return ImpexTypes.CRLF;
            }
          // fall through
          case 112: break;
          case 38:
            { return ImpexTypes.PERMISSION;
            }
          // fall through
          case 113: break;
          case 39:
            { yybegin(USER_RIGHTS_WAIT_FOR_VALUE_LINE); return ImpexTypes.PARAMETERS_SEPARATOR;
            }
          // fall through
          case 114: break;
          case 40:
            { yybegin(USER_RIGHTS_VALUE_LINE); return ImpexTypes.CRLF;
            }
          // fall through
          case 115: break;
          case 41:
            { return ImpexTypes.PERMISSION_ALLOWED;
            }
          // fall through
          case 116: break;
          case 42:
            { return ImpexTypes.PERMISSION_DENIED;
            }
          // fall through
          case 117: break;
          case 43:
            { return ImpexTypes.DOUBLE_STRING;
            }
          // fall through
          case 118: break;
          case 44:
            { yybegin(BEAN_SHELL); return ImpexTypes.BEAN_SHELL_MARKER;
            }
          // fall through
          case 119: break;
          case 45:
            { return ImpexTypes.MACRO_USAGE;
            }
          // fall through
          case 120: break;
          case 46:
            { yypushback(yylength()); yybegin(WAITING_MACRO_CONFIG_USAGE);
            }
          // fall through
          case 121: break;
          case 47:
            { return ImpexTypes.SINGLE_STRING;
            }
          // fall through
          case 122: break;
          case 48:
            { return ImpexTypes.HEADER_SPECIAL_PARAMETER_NAME;
            }
          // fall through
          case 123: break;
          case 49:
            { return ImpexTypes.DOCUMENT_ID;
            }
          // fall through
          case 124: break;
          case 50:
            { yybegin(HEADER_LINE);
                                                              yypushback(1);
                                                              return ImpexTypes.FUNCTION;
            }
          // fall through
          case 125: break;
          case 51:
            { return ImpexTypes.DEFAULT_KEY_VALUE_DELIMITER;
            }
          // fall through
          case 126: break;
          case 52:
            { yybegin(WAITING_MACRO_VALUE); return ImpexTypes.MACRO_USAGE;
            }
          // fall through
          case 127: break;
          case 53:
            { yybegin(MACRO_DECLARATION);
                                                              /* Push back '='. */
                                                              yypushback(1);
                                                              /* Push back spaces. */
                                                              yypushback(yylength() - yytext().toString().trim().length());
                                                              return ImpexTypes.MACRO_NAME_DECLARATION;
            }
          // fall through
          case 128: break;
          case 54:
            { return ImpexTypes.COLLECTION_APPEND_PREFIX;
            }
          // fall through
          case 129: break;
          case 55:
            { return ImpexTypes.COLLECTION_REMOVE_PREFIX;
            }
          // fall through
          case 130: break;
          case 56:
            { return ImpexTypes.UID;
            }
          // fall through
          case 131: break;
          case 57:
            { return ImpexTypes.BOOLEAN;
            }
          // fall through
          case 132: break;
          case 58:
            { return ImpexTypes.COLLECTION_MERGE_PREFIX;
            }
          // fall through
          case 133: break;
          case 59:
            { return ImpexTypes.FIELD_VALUE_URL;
            }
          // fall through
          case 134: break;
          case 60:
            { return ImpexTypes.TYPE;
            }
          // fall through
          case 135: break;
          case 61:
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_INSERT;
            }
          // fall through
          case 136: break;
          case 62:
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_REMOVE;
            }
          // fall through
          case 137: break;
          case 63:
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_UPDATE;
            }
          // fall through
          case 138: break;
          case 64:
            { return ImpexTypes.HEADER_MODE_INSERT;
            }
          // fall through
          case 139: break;
          case 65:
            { return ImpexTypes.HEADER_MODE_REMOVE;
            }
          // fall through
          case 140: break;
          case 66:
            { return ImpexTypes.HEADER_MODE_UPDATE;
            }
          // fall through
          case 141: break;
          case 67:
            { return ImpexTypes.TARGET;
            }
          // fall through
          case 142: break;
          case 68:
            { return ImpexTypes.FIELD_VALUE_IGNORE;
            }
          // fall through
          case 143: break;
          case 69:
            { return ImpexTypes.PASSWORD;
            }
          // fall through
          case 144: break;
          case 70:
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_INSERT_UPDATE;
            }
          // fall through
          case 145: break;
          case 71:
            { return ImpexTypes.HEADER_MODE_INSERT_UPDATE;
            }
          // fall through
          case 146: break;
          case 72:
            { return ImpexTypes.MEMBEROFGROUPS;
            }
          // fall through
          case 147: break;
          case 73:
            { yybegin(YYINITIAL); return ImpexTypes.END_USERRIGHTS;
            }
          // fall through
          case 148: break;
          case 74:
            { yybegin(USER_RIGHTS_END); return ImpexTypes.END_USERRIGHTS;
            }
          // fall through
          case 149: break;
          case 75:
            { yybegin(USER_RIGHTS_START); return ImpexTypes.START_USERRIGHTS;
            }
          // fall through
          case 150: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
