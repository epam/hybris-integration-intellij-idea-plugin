// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Impex.flex

/*
 * This file is part of "SAP Commerce Developers Toolset" plugin for IntelliJ IDEA.
 * Copyright (C) 2014-2016 Alexander Bartash <AlexanderBartash@gmail.com>
 * Copyright (C) 2019-2024 EPAM Systems <hybrisideaplugin@epam.com> and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

package com.intellij.idea.plugin.hybris.impex;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.idea.plugin.hybris.impex.psi.ImpexTypes;
import com.intellij.psi.TokenType;
import com.intellij.psi.CustomHighlighterTokenType;


class ImpexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_MACRO_VALUE = 2;
  public static final int MACRO_DECLARATION = 4;
  public static final int HEADER_TYPE = 6;
  public static final int HEADER_LINE = 8;
  public static final int FIELD_VALUE = 10;
  public static final int BEAN_SHELL = 12;
  public static final int SCRIPT_BODY = 14;
  public static final int MODIFIERS_BLOCK = 16;
  public static final int WAITING_ATTR_OR_PARAM_VALUE = 18;
  public static final int HEADER_PARAMETERS = 20;
  public static final int MACRO_USAGE = 22;
  public static final int MACRO_CONFIG_USAGE = 24;
  public static final int WAITING_MACRO_CONFIG_USAGE = 26;
  public static final int USER_RIGHTS_START = 28;
  public static final int USER_RIGHTS_END = 30;
  public static final int USER_RIGHTS_HEADER_LINE = 32;
  public static final int USER_RIGHTS_WAIT_FOR_VALUE_LINE = 34;
  public static final int USER_RIGHTS_VALUE_LINE = 36;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9,  6,  6, 10, 10,  6,  6, 11, 11, 12, 12, 13, 13, 
    14, 14, 15, 15, 16, 16
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\2\u2000\1\u2100\7\u2000\1\u2200\1\u2300\1\u2400"+
    "\1\u2000\1\u2500\1\u2600\2\u2000\31\u1100\1\u2700\121\u1100\1\u2800"+
    "\4\u1100\1\u2900\1\u1100\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00"+
    "\1\u2f00\53\u1100\1\u3000\10\u3100\31\u2000\1\u1100\1\u3200\1\u3300"+
    "\1\u1100\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u1100\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u2000\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u2000"+
    "\1\u5000\1\u5100\1\u5200\1\u2000\3\u1100\1\u5300\1\u5400\1\u5500"+
    "\12\u2000\4\u1100\1\u5600\17\u2000\2\u1100\1\u5700\41\u2000\2\u1100"+
    "\1\u5800\1\u5900\2\u2000\1\u5a00\1\u5b00\27\u1100\1\u5c00\2\u1100"+
    "\1\u5d00\45\u2000\1\u1100\1\u5e00\1\u5f00\11\u2000\1\u6000\24\u2000"+
    "\1\u6100\1\u6200\1\u2000\1\u6300\1\u6400\1\u6500\1\u6600\2\u2000"+
    "\1\u6700\5\u2000\1\u6800\1\u6900\1\u6a00\5\u2000\1\u6b00\1\u6c00"+
    "\4\u2000\1\u6d00\2\u2000\1\u6e00\16\u2000\246\u1100\1\u6f00\20\u1100"+
    "\1\u7000\1\u7100\25\u1100\1\u7200\34\u1100\1\u7300\14\u2000\2\u1100"+
    "\1\u7400\u0b06\u2000\1\u2800\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\5"+
    "\1\0\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\2\24\1\27\1\30\3\24\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\60\1\67\1\70\1\71"+
    "\1\72\1\73\1\0\1\74\1\0\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\60\1\67\1\70\1\0"+
    "\1\75\10\0\1\3\32\0\1\76\11\0\1\77\12\0"+
    "\1\77\4\0\1\77\5\0\27\77\1\0\37\77\1\0"+
    "\70\77\2\100\115\77\1\101\u0142\77\4\0\14\77\16\0"+
    "\5\77\7\0\1\77\1\0\1\77\21\0\165\77\1\0"+
    "\2\77\2\0\4\77\1\0\1\77\6\0\1\77\1\0"+
    "\3\77\1\0\1\77\1\0\24\77\1\0\123\77\1\0"+
    "\213\77\1\0\255\77\1\0\46\77\2\0\1\77\6\0"+
    "\51\77\10\0\55\77\1\0\1\77\1\0\2\77\1\0"+
    "\2\77\1\0\1\77\10\0\33\77\4\0\4\77\35\0"+
    "\13\77\5\0\112\77\4\0\146\77\1\0\10\77\2\0"+
    "\12\77\1\0\23\77\2\0\1\77\20\0\73\77\2\0"+
    "\145\77\16\0\66\77\4\0\1\77\2\0\1\77\2\0"+
    "\56\77\22\0\34\77\4\0\13\77\65\0\25\77\1\0"+
    "\10\77\25\0\17\77\1\0\201\77\2\0\12\77\1\0"+
    "\23\77\1\0\10\77\2\0\2\77\2\0\26\77\1\0"+
    "\7\77\1\0\1\77\3\0\4\77\2\0\11\77\2\0"+
    "\2\77\2\0\4\77\10\0\1\77\4\0\2\77\1\0"+
    "\5\77\2\0\14\77\12\0\1\77\1\0\1\77\2\0"+
    "\3\77\1\0\6\77\4\0\2\77\2\0\26\77\1\0"+
    "\7\77\1\0\2\77\1\0\2\77\1\0\2\77\2\0"+
    "\1\77\1\0\5\77\4\0\2\77\2\0\3\77\3\0"+
    "\1\77\7\0\4\77\1\0\1\77\7\0\20\77\13\0"+
    "\3\77\1\0\11\77\1\0\3\77\1\0\26\77\1\0"+
    "\7\77\1\0\2\77\1\0\5\77\2\0\12\77\1\0"+
    "\3\77\1\0\3\77\2\0\1\77\17\0\4\77\2\0"+
    "\12\77\11\0\7\77\1\0\3\77\1\0\10\77\2\0"+
    "\2\77\2\0\26\77\1\0\7\77\1\0\2\77\1\0"+
    "\5\77\2\0\11\77\2\0\2\77\2\0\3\77\10\0"+
    "\2\77\4\0\2\77\1\0\5\77\2\0\12\77\1\0"+
    "\1\77\20\0\2\77\1\0\6\77\3\0\3\77\1\0"+
    "\4\77\3\0\2\77\1\0\1\77\1\0\2\77\3\0"+
    "\2\77\3\0\3\77\3\0\14\77\4\0\5\77\3\0"+
    "\3\77\1\0\4\77\2\0\1\77\6\0\1\77\16\0"+
    "\12\77\20\0\15\77\1\0\3\77\1\0\27\77\1\0"+
    "\20\77\3\0\10\77\1\0\3\77\1\0\4\77\7\0"+
    "\2\77\1\0\3\77\5\0\4\77\2\0\12\77\20\0"+
    "\4\77\1\0\10\77\1\0\3\77\1\0\27\77\1\0"+
    "\12\77\1\0\5\77\2\0\11\77\1\0\3\77\1\0"+
    "\4\77\7\0\2\77\7\0\1\77\1\0\4\77\2\0"+
    "\12\77\1\0\2\77\15\0\4\77\1\0\10\77\1\0"+
    "\3\77\1\0\63\77\1\0\3\77\1\0\5\77\5\0"+
    "\4\77\7\0\5\77\2\0\12\77\12\0\6\77\2\0"+
    "\2\77\1\0\22\77\3\0\30\77\1\0\11\77\1\0"+
    "\1\77\2\0\7\77\3\0\1\77\4\0\6\77\1\0"+
    "\1\77\1\0\10\77\6\0\12\77\2\0\2\77\15\0"+
    "\72\77\5\0\17\77\1\0\12\77\47\0\2\77\1\0"+
    "\1\77\1\0\5\77\1\0\30\77\1\0\1\77\1\0"+
    "\27\77\2\0\5\77\1\0\1\77\1\0\6\77\2\0"+
    "\12\77\2\0\4\77\40\0\1\77\27\0\2\77\6\0"+
    "\12\77\13\0\1\77\1\0\1\77\1\0\1\77\4\0"+
    "\12\77\1\0\44\77\4\0\24\77\1\0\22\77\1\0"+
    "\44\77\11\0\1\77\71\0\112\77\6\0\116\77\2\0"+
    "\46\77\1\0\1\77\5\0\1\77\2\0\53\77\1\0"+
    "\u014d\77\1\0\4\77\2\0\7\77\1\0\1\77\1\0"+
    "\4\77\2\0\51\77\1\0\4\77\2\0\41\77\1\0"+
    "\4\77\2\0\7\77\1\0\1\77\1\0\4\77\2\0"+
    "\17\77\1\0\71\77\1\0\4\77\2\0\103\77\2\0"+
    "\3\77\40\0\20\77\20\0\126\77\2\0\6\77\3\0"+
    "\u016c\77\2\0\21\77\1\76\32\77\5\0\113\77\3\0"+
    "\13\77\7\0\15\77\1\0\7\77\13\0\25\77\13\0"+
    "\24\77\14\0\15\77\1\0\3\77\1\0\2\77\14\0"+
    "\124\77\3\0\1\77\4\0\2\77\2\0\12\77\41\0"+
    "\3\77\2\0\12\77\6\0\131\77\7\0\53\77\5\0"+
    "\106\77\12\0\37\77\1\0\14\77\4\0\14\77\12\0"+
    "\50\77\2\0\5\77\13\0\54\77\4\0\32\77\6\0"+
    "\12\77\46\0\34\77\4\0\77\77\1\0\35\77\2\0"+
    "\13\77\6\0\12\77\15\0\1\77\10\0\17\77\101\0"+
    "\114\77\4\0\12\77\21\0\11\77\14\0\164\77\14\0"+
    "\70\77\10\0\12\77\3\0\61\77\2\0\11\77\7\0"+
    "\53\77\2\0\3\77\20\0\3\77\1\0\47\77\5\0"+
    "\372\77\1\0\33\77\2\0\6\77\2\0\46\77\2\0"+
    "\6\77\2\0\10\77\1\0\1\77\1\0\1\77\1\0"+
    "\1\77\1\0\37\77\2\0\65\77\1\0\7\77\1\0"+
    "\1\77\3\0\3\77\1\0\7\77\3\0\4\77\2\0"+
    "\6\77\4\0\15\77\5\0\3\77\1\0\7\77\3\0"+
    "\13\76\35\0\2\3\5\0\1\76\17\0\2\77\23\0"+
    "\1\77\12\0\1\76\21\0\1\77\15\0\1\77\20\0"+
    "\15\77\63\0\41\77\21\0\1\77\4\0\1\77\2\0"+
    "\12\77\1\0\1\77\3\0\5\77\6\0\1\77\1\0"+
    "\1\77\1\0\1\77\1\0\1\102\3\77\1\0\13\77"+
    "\2\0\4\77\5\0\5\77\4\0\1\77\21\0\51\77"+
    "\u022d\0\64\77\26\0\57\77\1\0\57\77\1\0\205\77"+
    "\6\0\11\77\14\0\46\77\1\0\1\77\5\0\1\77"+
    "\2\0\70\77\7\0\1\77\17\0\30\77\11\0\7\77"+
    "\1\0\7\77\1\0\7\77\1\0\7\77\1\0\7\77"+
    "\1\0\7\77\1\0\7\77\1\0\7\77\1\0\40\77"+
    "\57\0\1\77\320\0\1\76\4\0\3\77\31\0\17\77"+
    "\1\0\5\77\2\0\5\77\4\0\126\77\2\0\2\77"+
    "\2\0\3\77\1\0\132\77\1\0\4\77\5\0\53\77"+
    "\1\0\136\77\21\0\33\77\65\0\306\77\112\0\360\77"+
    "\20\0\215\77\103\0\56\77\2\0\15\77\3\0\34\77"+
    "\24\0\63\77\1\0\12\77\1\0\163\77\45\0\11\77"+
    "\2\0\147\77\2\0\65\77\2\0\5\77\60\0\61\77"+
    "\30\0\64\77\14\0\106\77\12\0\12\77\6\0\30\77"+
    "\3\0\1\77\1\0\61\77\2\0\44\77\14\0\35\77"+
    "\3\0\101\77\16\0\13\77\6\0\37\77\1\0\67\77"+
    "\11\0\16\77\2\0\12\77\6\0\27\77\3\0\111\77"+
    "\30\0\3\77\2\0\20\77\2\0\5\77\12\0\6\77"+
    "\2\0\6\77\2\0\6\77\11\0\7\77\1\0\7\77"+
    "\1\0\53\77\1\0\14\77\10\0\173\77\1\0\2\77"+
    "\2\0\12\77\6\0\244\77\14\0\27\77\4\0\61\77"+
    "\4\0\u0100\103\156\77\2\0\152\77\46\0\7\77\14\0"+
    "\5\77\5\0\14\77\1\0\15\77\1\0\5\77\1\0"+
    "\1\77\1\0\2\77\1\0\2\77\1\0\154\77\41\0"+
    "\153\77\22\0\100\77\2\0\66\77\50\0\14\77\4\0"+
    "\20\77\20\0\20\77\3\0\2\77\30\0\3\77\40\0"+
    "\5\77\1\0\207\77\23\0\12\77\7\0\32\77\4\0"+
    "\1\77\1\0\32\77\13\0\131\77\3\0\6\77\2\0"+
    "\6\77\2\0\6\77\2\0\3\77\43\0\14\77\1\0"+
    "\32\77\1\0\23\77\1\0\2\77\1\0\17\77\2\0"+
    "\16\77\42\0\173\77\105\0\65\77\210\0\1\77\202\0"+
    "\35\77\3\0\61\77\17\0\1\77\37\0\40\77\15\0"+
    "\36\77\5\0\53\77\5\0\36\77\2\0\44\77\4\0"+
    "\10\77\1\0\5\77\52\0\236\77\2\0\12\77\6\0"+
    "\44\77\4\0\44\77\4\0\50\77\10\0\64\77\234\0"+
    "\67\77\11\0\26\77\12\0\10\77\230\0\6\77\2\0"+
    "\1\77\1\0\54\77\1\0\2\77\3\0\1\77\2\0"+
    "\27\77\12\0\27\77\11\0\37\77\101\0\23\77\1\0"+
    "\2\77\12\0\26\77\12\0\32\77\106\0\70\77\6\0"+
    "\2\77\100\0\4\77\1\0\2\77\5\0\10\77\1\0"+
    "\3\77\1\0\35\77\2\0\3\77\4\0\1\77\40\0"+
    "\35\77\3\0\35\77\43\0\10\77\1\0\36\77\31\0"+
    "\66\77\12\0\26\77\12\0\23\77\15\0\22\77\156\0"+
    "\111\77\67\0\63\77\15\0\63\77\15\0\50\77\10\0"+
    "\12\77\306\0\35\77\12\0\1\77\10\0\41\77\217\0"+
    "\27\77\11\0\107\77\37\0\12\77\17\0\74\77\25\0"+
    "\31\77\7\0\12\77\6\0\65\77\1\0\12\77\4\0"+
    "\3\77\11\0\44\77\2\0\1\77\11\0\105\77\4\0"+
    "\4\77\3\0\13\77\1\0\1\77\43\0\22\77\1\0"+
    "\45\77\6\0\1\77\101\0\7\77\1\0\1\77\1\0"+
    "\4\77\1\0\17\77\1\0\12\77\7\0\73\77\5\0"+
    "\12\77\6\0\4\77\1\0\10\77\2\0\2\77\2\0"+
    "\26\77\1\0\7\77\1\0\2\77\1\0\5\77\1\0"+
    "\12\77\2\0\2\77\2\0\3\77\2\0\1\77\6\0"+
    "\1\77\5\0\7\77\2\0\7\77\3\0\5\77\213\0"+
    "\113\77\5\0\12\77\4\0\2\77\40\0\106\77\1\0"+
    "\1\77\10\0\12\77\246\0\66\77\2\0\11\77\27\0"+
    "\6\77\42\0\101\77\3\0\1\77\13\0\12\77\46\0"+
    "\71\77\7\0\12\77\66\0\33\77\2\0\17\77\4\0"+
    "\12\77\306\0\73\77\145\0\112\77\25\0\1\77\240\0"+
    "\10\77\2\0\56\77\2\0\10\77\1\0\2\77\33\0"+
    "\77\77\10\0\1\77\10\0\112\77\3\0\1\77\42\0"+
    "\71\77\7\0\11\77\1\0\55\77\1\0\11\77\17\0"+
    "\12\77\30\0\36\77\2\0\26\77\1\0\16\77\111\0"+
    "\7\77\1\0\2\77\1\0\54\77\3\0\1\77\1\0"+
    "\2\77\1\0\11\77\10\0\12\77\6\0\6\77\1\0"+
    "\2\77\1\0\45\77\1\0\2\77\1\0\6\77\7\0"+
    "\12\77\u0136\0\27\77\11\0\232\77\146\0\157\77\21\0"+
    "\304\77\274\0\57\77\321\0\107\77\271\0\71\77\7\0"+
    "\37\77\1\0\12\77\146\0\36\77\2\0\5\77\13\0"+
    "\67\77\11\0\4\77\14\0\12\77\11\0\25\77\5\0"+
    "\23\77\260\0\100\77\200\0\113\77\4\0\71\77\7\0"+
    "\21\77\100\0\2\77\1\0\1\77\34\0\370\77\10\0"+
    "\363\77\15\0\37\77\61\0\3\77\21\0\4\77\10\0"+
    "\u018c\77\4\0\153\77\5\0\15\77\3\0\11\77\7\0"+
    "\12\77\3\0\2\77\306\0\5\77\3\0\6\77\10\0"+
    "\10\77\2\0\7\77\36\0\4\77\224\0\3\77\273\0"+
    "\125\77\1\0\107\77\1\0\2\77\2\0\1\77\2\0"+
    "\2\77\2\0\4\77\1\0\14\77\1\0\1\77\1\0"+
    "\7\77\1\0\101\77\1\0\4\77\2\0\10\77\1\0"+
    "\7\77\1\0\34\77\1\0\4\77\1\0\5\77\1\0"+
    "\1\77\3\0\7\77\1\0\u0154\77\2\0\31\77\1\0"+
    "\31\77\1\0\37\77\1\0\31\77\1\0\37\77\1\0"+
    "\31\77\1\0\37\77\1\0\31\77\1\0\37\77\1\0"+
    "\31\77\1\0\10\77\2\0\151\77\4\0\62\77\10\0"+
    "\1\77\16\0\1\77\26\0\5\77\1\0\17\77\120\0"+
    "\7\77\1\0\21\77\2\0\7\77\1\0\2\77\1\0"+
    "\5\77\325\0\55\77\3\0\16\77\2\0\12\77\4\0"+
    "\1\77\u0171\0\72\77\6\0\305\77\13\0\7\77\51\0"+
    "\114\77\4\0\12\77\246\0\4\77\1\0\33\77\1\0"+
    "\2\77\1\0\1\77\2\0\1\77\1\0\12\77\1\0"+
    "\4\77\1\0\1\77\1\0\1\77\6\0\1\77\4\0"+
    "\1\77\1\0\1\77\1\0\1\77\1\0\3\77\1\0"+
    "\2\77\1\0\1\77\2\0\1\77\1\0\1\77\1\0"+
    "\1\77\1\0\1\77\1\0\1\77\1\0\2\77\1\0"+
    "\1\77\2\0\4\77\1\0\7\77\1\0\4\77\1\0"+
    "\4\77\1\0\1\77\1\0\12\77\1\0\21\77\5\0"+
    "\3\77\1\0\5\77\1\0\21\77\164\0\32\77\6\0"+
    "\32\77\6\0\32\77\166\0\327\77\51\0\65\77\13\0"+
    "\336\77\2\0\u0182\77\16\0\u0131\77\37\0\36\77\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29952];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\21\0\1\1\1\2\2\3\3\1\1\4\1\5\3\4"+
    "\1\1\4\6\1\7\1\10\1\11\1\12\1\11\1\13"+
    "\1\6\1\14\5\6\1\11\4\6\1\11\1\15\1\6"+
    "\1\16\1\6\1\17\1\20\2\1\1\21\1\22\1\23"+
    "\1\24\1\1\1\25\1\1\1\26\5\27\1\30\1\11"+
    "\1\27\1\13\1\31\1\32\6\27\1\11\4\27\1\11"+
    "\2\27\1\33\1\27\1\34\1\2\1\34\1\1\4\34"+
    "\1\35\1\36\1\37\1\40\4\41\1\11\1\42\1\13"+
    "\2\41\1\11\2\41\1\11\1\1\2\43\2\44\2\45"+
    "\2\1\1\46\1\47\4\46\2\50\1\1\1\51\1\52"+
    "\1\0\1\53\1\54\1\55\1\0\4\56\1\0\3\4"+
    "\1\0\2\57\1\0\1\60\1\13\2\6\2\0\1\61"+
    "\7\6\1\0\2\56\1\62\1\0\1\63\1\0\2\64"+
    "\2\0\1\65\1\66\2\0\2\27\1\0\1\27\1\11"+
    "\10\27\2\0\2\56\4\34\1\53\2\56\1\41\1\60"+
    "\5\41\2\67\2\0\5\46\5\0\1\70\1\0\2\56"+
    "\1\0\1\4\1\0\2\4\2\57\1\60\1\0\1\13"+
    "\2\0\2\6\1\0\1\6\1\0\4\6\2\56\1\71"+
    "\1\0\1\72\1\0\1\13\2\27\1\0\5\27\1\0"+
    "\5\27\2\0\2\56\3\34\1\73\2\56\1\60\1\41"+
    "\1\13\4\41\2\67\2\0\2\46\1\0\2\46\2\74"+
    "\4\0\2\56\1\0\1\4\1\0\2\4\1\57\2\0"+
    "\1\6\1\0\1\6\1\0\1\11\2\6\1\56\1\75"+
    "\1\0\2\27\1\0\1\27\1\76\1\27\1\0\1\27"+
    "\1\0\1\27\1\77\1\0\1\56\2\34\1\56\1\41"+
    "\1\67\2\0\2\46\1\0\1\46\1\100\4\0\2\56"+
    "\1\0\1\4\1\0\2\4\1\57\2\0\1\6\1\0"+
    "\1\6\1\0\2\6\1\56\1\0\1\27\1\101\1\0"+
    "\1\27\2\0\2\27\2\0\1\56\2\34\1\56\1\41"+
    "\1\67\2\0\2\46\1\0\1\46\1\0\1\55\3\0"+
    "\1\56\1\0\2\102\1\103\1\104\2\0\1\105\2\106"+
    "\1\107\1\110\3\0\1\27\1\0\2\34\1\41\2\0"+
    "\2\46\1\0\1\111\4\0\1\56\1\0\1\4\3\0"+
    "\1\6\4\0\2\34\1\41\2\0\2\46\5\0\1\56"+
    "\1\0\1\4\2\0\1\112\1\6\2\0\1\113\1\0"+
    "\2\34\1\41\2\0\1\46\2\114\1\0\1\115\1\0"+
    "\2\56\1\0\1\4\1\0\1\6\1\0\1\116\1\0"+
    "\1\46\2\0\1\56\1\0\1\4\1\0\1\6\2\0"+
    "\1\46\2\0\1\56\1\0\1\4\1\0\1\6\2\0"+
    "\1\46\2\0\1\56\1\0\1\4\1\0\1\6\2\0"+
    "\1\46\1\0\1\117\1\56\1\0\2\120\2\121\1\0"+
    "\1\46\1\0\1\56\2\0\2\122\1\0\1\56\1\0"+
    "\1\123\1\124\1\56\1\0\2\125";

  private static int [] zzUnpackAction() {
    int [] result = new int[545];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\u0484\0\u050c\0\u0550\0\u0594\0\u05d8"+
    "\0\u061c\0\u0484\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0484\0\u0550"+
    "\0\u0770\0\u07b4\0\u0484\0\u0484\0\u07f8\0\u0484\0\u083c\0\u0880"+
    "\0\u08c4\0\u0484\0\u0908\0\u094c\0\u0990\0\u09d4\0\u0a18\0\u0a5c"+
    "\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c\0\u094c\0\u0484\0\u0bb0\0\u0484"+
    "\0\u0bf4\0\u0484\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04\0\u0484\0\u0484"+
    "\0\u0484\0\u0908\0\u0484\0\u0d48\0\u0484\0\u0484\0\u0550\0\u0c7c"+
    "\0\u0d8c\0\u0dd0\0\u0484\0\u0e14\0\u0e58\0\u0e9c\0\u0484\0\u0484"+
    "\0\u08c4\0\u0ee0\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078"+
    "\0\u10bc\0\u1100\0\u1144\0\u0ee0\0\u1188\0\u0d48\0\u0484\0\u11cc"+
    "\0\u1210\0\u1254\0\u1298\0\u07b4\0\u12dc\0\u1320\0\u1364\0\u13a8"+
    "\0\u0484\0\u13ec\0\u0484\0\u0484\0\u1430\0\u1474\0\u14b8\0\u14fc"+
    "\0\u1540\0\u0484\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8"+
    "\0\u1430\0\u171c\0\u0484\0\u1760\0\u0484\0\u17a4\0\u0484\0\u17e8"+
    "\0\u182c\0\u1870\0\u18b4\0\u0484\0\u18f8\0\u193c\0\u1980\0\u19c4"+
    "\0\u0484\0\u1a08\0\u1a4c\0\u0484\0\u0ee0\0\u0550\0\u1a90\0\u1ad4"+
    "\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4"+
    "\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14"+
    "\0\u1f58\0\u1f9c\0\u1fe0\0\u2024\0\u0908\0\u2068\0\u20ac\0\u20f0"+
    "\0\u2134\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2288\0\u22cc\0\u0cc0"+
    "\0\u2310\0\u0484\0\u2354\0\u0484\0\u2398\0\u23dc\0\u2420\0\u0484"+
    "\0\u0484\0\u2464\0\u24a8\0\u24ec\0\u2530\0\u2574\0\u25b8\0\u25fc"+
    "\0\u2640\0\u2684\0\u26c8\0\u270c\0\u2750\0\u2794\0\u27d8\0\u281c"+
    "\0\u2860\0\u28a4\0\u28e8\0\u292c\0\u2970\0\u29b4\0\u29f8\0\u2a3c"+
    "\0\u2a80\0\u2ac4\0\u2b08\0\u2b4c\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c"+
    "\0\u2ca0\0\u2ce4\0\u2d28\0\u2d6c\0\u2db0\0\u2df4\0\u2e38\0\u2e7c"+
    "\0\u2ec0\0\u2f04\0\u2f48\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u309c"+
    "\0\u0484\0\u30e0\0\u3124\0\u3168\0\u31ac\0\u31f0\0\u3234\0\u3278"+
    "\0\u32bc\0\u3300\0\u3344\0\u0484\0\u3388\0\u33cc\0\u3410\0\u3454"+
    "\0\u3498\0\u34dc\0\u3520\0\u3564\0\u35a8\0\u35ec\0\u3630\0\u3674"+
    "\0\u36b8\0\u36fc\0\u3740\0\u0484\0\u3784\0\u0484\0\u37c8\0\u24a8"+
    "\0\u380c\0\u3850\0\u3894\0\u38d8\0\u391c\0\u3960\0\u39a4\0\u39e8"+
    "\0\u3a2c\0\u3a70\0\u3ab4\0\u3af8\0\u3b3c\0\u3b80\0\u3bc4\0\u3c08"+
    "\0\u3c4c\0\u3c90\0\u3cd4\0\u3d18\0\u3d5c\0\u1210\0\u3da0\0\u3de4"+
    "\0\u1430\0\u3e28\0\u2bd4\0\u3e6c\0\u3eb0\0\u3ef4\0\u3f38\0\u3f7c"+
    "\0\u3fc0\0\u4004\0\u4048\0\u408c\0\u40d0\0\u4114\0\u4158\0\u419c"+
    "\0\u18b4\0\u0484\0\u41e0\0\u4224\0\u4268\0\u42ac\0\u42f0\0\u4334"+
    "\0\u4378\0\u43bc\0\u4400\0\u4444\0\u4488\0\u44cc\0\u4510\0\u4554"+
    "\0\u4598\0\u45dc\0\u4620\0\u4664\0\u0484\0\u46a8\0\u46ec\0\u4730"+
    "\0\u0484\0\u4774\0\u47b8\0\u47fc\0\u4840\0\u4884\0\u0484\0\u48c8"+
    "\0\u490c\0\u4950\0\u4994\0\u49d8\0\u0484\0\u4a1c\0\u4a60\0\u4aa4"+
    "\0\u4ae8\0\u4b2c\0\u4b70\0\u4bb4\0\u4bf8\0\u4c3c\0\u4c80\0\u4cc4"+
    "\0\u4d08\0\u4d4c\0\u18b4\0\u4d90\0\u4dd4\0\u4e18\0\u4e5c\0\u4ea0"+
    "\0\u4ee4\0\u4f28\0\u4f6c\0\u4fb0\0\u4ff4\0\u5038\0\u507c\0\u50c0"+
    "\0\u5104\0\u5148\0\u518c\0\u51d0\0\u5214\0\u5258\0\u529c\0\u52e0"+
    "\0\u5324\0\u5368\0\u0484\0\u53ac\0\u53f0\0\u5434\0\u0dd0\0\u5478"+
    "\0\u54bc\0\u5500\0\u5544\0\u5588\0\u55cc\0\u5610\0\u5654\0\u5698"+
    "\0\u56dc\0\u5720\0\u5764\0\u57a8\0\u57ec\0\u5830\0\u5874\0\u58b8"+
    "\0\u0484\0\u58fc\0\u5940\0\u5984\0\u59c8\0\u5a0c\0\u5a50\0\u5a94"+
    "\0\u061c\0\u061c\0\u5ad8\0\u5b1c\0\u0484\0\u5b60\0\u5ba4\0\u094c"+
    "\0\u094c\0\u5be8\0\u5c2c\0\u5c70\0\u5cb4\0\u5cf8\0\u5d3c\0\u5d80"+
    "\0\u5dc4\0\u5e08\0\u5e4c\0\u5e90\0\u5ed4\0\u5f18\0\u18b4\0\u5f5c"+
    "\0\u5fa0\0\u5fe4\0\u6028\0\u606c\0\u60b0\0\u60f4\0\u6138\0\u617c"+
    "\0\u61c0\0\u6204\0\u6248\0\u628c\0\u62d0\0\u6314\0\u6358\0\u639c"+
    "\0\u63e0\0\u6424\0\u6468\0\u64ac\0\u64f0\0\u6534\0\u6578\0\u65bc"+
    "\0\u6600\0\u6644\0\u6688\0\u66cc\0\u6710\0\u6754\0\u3300\0\u0484"+
    "\0\u6798\0\u67dc\0\u36fc\0\u0484\0\u6820\0\u3c4c\0\u6864\0\u3da0"+
    "\0\u3f7c\0\u68a8\0\u68ec\0\u18b4\0\u0484\0\u6930\0\u0484\0\u6974"+
    "\0\u69b8\0\u69fc\0\u6a40\0\u6a84\0\u6ac8\0\u6b0c\0\u6b50\0\u0484"+
    "\0\u6b94\0\u6bd8\0\u6c1c\0\u6c60\0\u6ca4\0\u6ce8\0\u6d2c\0\u6d70"+
    "\0\u6db4\0\u6df8\0\u6e3c\0\u6e80\0\u6ec4\0\u6f08\0\u6f4c\0\u6f90"+
    "\0\u6fd4\0\u7018\0\u705c\0\u70a0\0\u70e4\0\u7128\0\u716c\0\u71b0"+
    "\0\u71f4\0\u7238\0\u727c\0\u72c0\0\u7304\0\u7348\0\u738c\0\u73d0"+
    "\0\u7414\0\u0484\0\u7458\0\u749c\0\u061c\0\u0484\0\u094c\0\u0484"+
    "\0\u74e0\0\u7524\0\u7568\0\u75ac\0\u75f0\0\u7634\0\u18b4\0\u0484"+
    "\0\u7678\0\u76bc\0\u7700\0\u0484\0\u0484\0\u7744\0\u7788\0\u1be4"+
    "\0\u1b5c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[545];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\22\1\23\1\24\1\0\1\25\1\23\1\26\1\27"+
    "\1\30\10\22\1\31\2\22\5\31\1\22\1\32\5\22"+
    "\10\31\1\33\10\31\1\34\2\31\1\35\4\31\3\22"+
    "\1\31\3\22\1\36\2\22\1\0\1\37\1\23\1\24"+
    "\1\37\1\25\1\23\1\40\1\37\1\41\2\37\1\42"+
    "\1\43\1\44\1\37\1\45\1\46\1\47\2\37\5\50"+
    "\2\37\1\51\1\52\2\37\1\53\5\54\1\55\2\54"+
    "\1\56\1\57\3\54\1\60\3\54\1\61\1\54\1\62"+
    "\1\63\1\54\1\64\1\65\1\54\1\66\1\67\1\70"+
    "\1\54\3\37\1\71\3\37\1\22\1\23\1\24\1\0"+
    "\1\25\1\23\26\22\1\72\46\22\1\0\1\22\1\23"+
    "\1\24\1\0\1\25\1\23\13\22\1\73\2\22\5\73"+
    "\7\22\31\73\3\22\1\73\6\22\1\0\1\22\1\23"+
    "\1\24\1\0\1\25\1\23\2\22\1\74\1\22\1\75"+
    "\1\22\1\43\1\44\2\22\1\46\1\76\1\77\1\22"+
    "\5\76\1\22\1\100\1\22\1\101\2\22\1\102\31\76"+
    "\1\103\1\104\1\70\1\76\1\105\5\22\1\0\1\106"+
    "\1\23\1\24\1\106\1\25\1\23\1\107\1\106\1\110"+
    "\3\106\1\111\1\106\1\112\1\45\1\113\1\114\1\106"+
    "\1\115\5\116\1\117\1\120\1\121\4\106\5\122\1\123"+
    "\1\122\1\124\1\122\1\125\2\122\1\126\1\127\1\122"+
    "\1\130\2\122\1\131\1\132\2\122\1\133\1\134\1\135"+
    "\1\106\1\136\1\106\1\122\1\137\3\106\1\140\2\106"+
    "\1\22\1\23\3\0\1\23\75\22\1\0\1\141\1\142"+
    "\1\24\1\141\1\25\1\23\1\26\1\141\1\143\2\141"+
    "\1\144\24\141\1\145\1\146\2\141\1\147\3\141\1\150"+
    "\27\141\1\150\3\141\1\22\1\23\1\24\1\0\1\25"+
    "\1\23\1\26\1\22\1\74\2\22\1\144\4\22\1\151"+
    "\2\152\1\22\5\152\3\22\1\101\3\22\31\152\2\22"+
    "\1\153\1\152\1\154\5\22\1\0\1\155\1\23\1\24"+
    "\1\155\1\25\1\23\1\156\1\155\1\157\2\155\1\160"+
    "\3\155\1\161\1\162\1\161\2\155\5\163\14\155\1\164"+
    "\3\155\1\165\3\155\1\166\5\155\1\167\2\155\1\170"+
    "\1\171\3\155\1\153\10\155\1\22\1\23\1\24\1\0"+
    "\1\25\1\23\2\22\1\172\72\22\1\0\1\173\1\23"+
    "\1\24\1\0\1\25\1\23\2\173\1\174\72\173\1\0"+
    "\1\22\1\23\1\175\1\0\1\176\1\23\24\22\1\100"+
    "\50\22\1\0\1\22\1\23\1\24\1\0\1\25\1\23"+
    "\24\22\1\100\50\22\1\0\1\22\1\23\1\177\1\0"+
    "\1\200\1\23\1\22\1\201\1\202\10\22\1\203\2\22"+
    "\5\203\1\22\1\204\5\22\14\203\1\205\2\203\1\206"+
    "\3\203\1\207\1\210\4\203\3\22\1\203\6\22\1\0"+
    "\1\22\1\23\1\211\1\0\1\212\1\23\2\22\1\202"+
    "\10\22\1\203\2\22\5\203\1\22\1\100\5\22\14\203"+
    "\1\205\2\203\1\206\3\203\1\207\1\210\4\203\3\22"+
    "\1\203\6\22\1\0\1\22\1\23\1\211\1\0\1\212"+
    "\1\23\1\22\1\201\1\213\6\22\1\214\1\46\1\215"+
    "\1\77\1\22\5\122\1\22\1\120\5\22\31\122\3\22"+
    "\1\122\6\22\106\0\1\23\3\0\1\23\100\0\1\24"+
    "\101\0\6\216\1\217\75\216\11\220\1\221\72\220\1\0"+
    "\1\222\3\0\1\222\6\0\2\223\3\0\1\224\1\223"+
    "\1\0\5\224\7\0\2\224\1\225\17\224\1\226\6\224"+
    "\3\0\1\224\2\0\2\222\1\227\1\222\22\0\1\31"+
    "\2\0\5\31\7\0\31\31\3\0\1\31\30\0\1\31"+
    "\2\0\5\31\7\0\15\31\1\230\13\31\3\0\1\31"+
    "\30\0\1\31\2\0\5\31\7\0\4\31\1\231\24\31"+
    "\3\0\1\31\30\0\1\31\2\0\5\31\7\0\17\31"+
    "\1\232\11\31\3\0\1\31\64\0\1\233\47\0\1\234"+
    "\2\0\5\234\7\0\2\234\1\235\26\234\3\0\1\234"+
    "\7\0\2\236\1\0\1\236\1\0\6\236\1\237\70\236"+
    "\24\0\5\240\74\0\1\54\1\241\1\0\5\50\7\0"+
    "\31\54\3\0\1\54\30\0\1\54\1\242\1\0\5\50"+
    "\7\0\31\54\3\0\1\54\57\0\1\243\4\0\1\244"+
    "\22\0\1\243\24\0\1\245\2\0\5\245\7\0\31\245"+
    "\3\0\1\245\30\0\1\54\1\241\1\0\5\54\7\0"+
    "\31\54\3\0\1\54\30\0\1\54\1\241\1\0\5\54"+
    "\7\0\1\246\30\54\3\0\1\54\30\0\1\54\1\241"+
    "\1\0\5\54\7\0\15\54\1\247\13\54\3\0\1\54"+
    "\30\0\1\54\1\241\1\0\5\54\7\0\1\65\30\54"+
    "\3\0\1\54\30\0\1\54\1\241\1\0\5\54\7\0"+
    "\4\54\1\250\24\54\3\0\1\54\30\0\1\54\1\241"+
    "\1\0\5\54\7\0\4\54\1\251\24\54\3\0\1\54"+
    "\30\0\1\54\1\241\1\0\5\54\7\0\21\54\1\252"+
    "\7\54\3\0\1\54\30\0\1\54\1\241\1\0\5\54"+
    "\7\0\17\54\1\253\11\54\3\0\1\54\30\0\1\54"+
    "\1\241\1\0\5\54\7\0\1\254\30\54\3\0\1\54"+
    "\10\0\5\67\64\0\1\67\3\0\1\67\62\0\1\255"+
    "\47\0\1\73\2\0\5\73\7\0\31\73\3\0\1\73"+
    "\30\0\1\256\2\0\5\256\7\0\2\256\1\257\26\256"+
    "\3\0\1\256\30\0\1\260\2\0\5\260\7\0\31\260"+
    "\3\0\1\260\10\0\1\261\3\0\1\261\6\0\1\262"+
    "\4\0\1\76\1\263\1\0\5\76\6\0\1\263\31\76"+
    "\3\0\1\76\11\0\1\264\1\0\1\265\116\0\1\266"+
    "\1\0\1\267\113\0\1\270\73\0\1\122\2\0\5\116"+
    "\4\0\1\271\2\0\31\122\3\0\1\122\63\0\1\272"+
    "\50\0\1\122\1\273\1\0\5\116\7\0\31\122\3\0"+
    "\1\122\30\0\1\122\2\0\5\122\7\0\31\122\3\0"+
    "\1\122\30\0\1\122\2\0\5\122\7\0\1\274\7\122"+
    "\1\275\20\122\3\0\1\122\3\0\1\276\24\0\1\122"+
    "\2\0\5\122\7\0\23\122\1\277\5\122\3\0\1\122"+
    "\30\0\1\122\2\0\5\122\7\0\1\300\30\122\3\0"+
    "\1\122\30\0\1\122\2\0\5\122\7\0\3\122\1\301"+
    "\25\122\3\0\1\122\30\0\1\122\2\0\5\122\7\0"+
    "\4\122\1\302\24\122\3\0\1\122\30\0\1\122\2\0"+
    "\5\122\7\0\1\122\1\303\11\122\1\304\15\122\3\0"+
    "\1\122\30\0\1\122\2\0\5\122\7\0\7\122\1\305"+
    "\21\122\3\0\1\122\30\0\1\122\2\0\5\122\7\0"+
    "\21\122\1\306\7\122\3\0\1\122\30\0\1\122\2\0"+
    "\5\122\7\0\1\307\30\122\3\0\1\122\30\0\1\122"+
    "\2\0\5\122\7\0\10\122\1\310\20\122\3\0\1\122"+
    "\3\0\1\311\52\0\1\312\34\0\2\141\1\0\1\141"+
    "\3\0\4\141\1\0\71\141\1\142\1\0\1\141\1\0"+
    "\1\23\1\0\4\141\1\0\72\141\1\0\1\141\3\0"+
    "\4\141\1\0\5\141\1\313\2\141\5\313\7\141\2\313"+
    "\1\314\26\313\3\141\1\313\11\141\1\0\1\141\3\0"+
    "\4\141\1\0\31\141\1\315\40\141\1\0\1\141\3\0"+
    "\4\141\1\0\30\141\1\316\41\141\1\0\1\141\3\0"+
    "\4\141\1\0\41\141\1\317\30\141\1\0\1\141\3\0"+
    "\4\141\1\0\31\141\1\320\36\141\21\0\2\152\1\0"+
    "\5\152\7\0\31\152\3\0\1\152\7\0\1\155\2\0"+
    "\1\155\2\0\12\155\1\0\52\155\1\0\10\155\1\156"+
    "\2\216\1\156\2\216\1\321\11\156\1\216\52\156\1\216"+
    "\10\156\1\155\2\0\1\155\2\0\12\155\1\0\1\322"+
    "\2\155\5\322\7\155\2\322\1\323\26\322\2\155\1\0"+
    "\1\322\7\155\1\324\1\236\1\0\1\324\1\0\1\236"+
    "\5\324\1\325\4\324\1\236\52\324\1\236\10\324\1\155"+
    "\2\0\1\155\2\0\12\155\1\0\3\155\5\163\42\155"+
    "\1\0\11\155\2\0\1\155\2\0\12\155\1\0\1\155"+
    "\1\326\1\155\5\163\42\155\1\0\11\155\2\0\1\155"+
    "\2\0\12\155\1\0\17\155\1\327\32\155\1\0\11\155"+
    "\2\0\1\155\2\0\12\155\1\0\17\155\1\171\32\155"+
    "\1\0\11\155\2\0\1\155\2\0\12\155\1\0\23\155"+
    "\1\330\26\155\1\0\11\155\2\0\1\155\2\0\12\155"+
    "\1\0\40\155\1\331\11\155\1\0\11\155\2\0\1\155"+
    "\2\0\12\155\1\0\17\155\1\332\32\155\1\0\10\155"+
    "\21\0\1\333\2\0\5\333\7\0\2\333\1\334\26\333"+
    "\3\0\1\333\51\0\1\335\43\0\1\175\103\0\1\177"+
    "\101\0\11\220\1\0\72\220\44\0\1\336\60\0\1\203"+
    "\2\0\5\203\7\0\31\203\3\0\1\203\30\0\1\203"+
    "\2\0\5\203\7\0\4\203\1\337\24\203\3\0\1\203"+
    "\30\0\1\203\2\0\5\203\7\0\1\340\30\203\3\0"+
    "\1\203\30\0\1\203\2\0\5\203\7\0\1\341\26\203"+
    "\1\342\1\203\3\0\1\203\30\0\1\203\2\0\5\203"+
    "\7\0\10\203\1\343\20\203\3\0\1\203\3\0\1\344"+
    "\5\0\1\211\145\0\1\345\45\0\1\216\75\0\2\220"+
    "\1\0\1\220\1\0\77\220\41\0\1\346\4\0\1\347"+
    "\2\0\1\350\33\0\1\222\3\0\1\222\13\0\1\222"+
    "\2\0\5\222\3\0\1\351\3\0\31\222\1\0\1\352"+
    "\1\0\1\222\2\0\4\222\15\0\2\223\3\0\2\223"+
    "\1\0\5\223\7\0\31\223\3\0\1\223\10\0\1\222"+
    "\3\0\1\222\6\0\2\223\3\0\1\224\1\223\1\0"+
    "\5\224\3\0\1\351\3\0\31\224\1\0\1\352\1\0"+
    "\1\224\2\0\4\222\2\0\1\222\3\0\1\222\6\0"+
    "\2\223\3\0\1\224\1\223\1\0\5\224\3\0\1\351"+
    "\3\0\16\224\1\353\12\224\1\0\1\352\1\0\1\224"+
    "\2\0\4\222\2\0\1\222\3\0\1\222\6\0\2\223"+
    "\3\0\1\224\1\223\1\0\5\224\3\0\1\351\3\0"+
    "\23\224\1\354\5\224\1\0\1\352\1\0\1\224\2\0"+
    "\4\222\2\0\1\222\3\0\1\222\13\0\1\222\2\0"+
    "\5\222\3\0\1\351\3\0\23\222\1\355\5\222\1\0"+
    "\1\352\1\0\1\222\2\0\4\222\22\0\1\31\2\0"+
    "\5\31\7\0\22\31\1\356\6\31\3\0\1\31\4\0"+
    "\1\357\23\0\1\31\2\0\5\31\7\0\14\31\1\360"+
    "\14\31\3\0\1\31\30\0\1\31\2\0\5\31\7\0"+
    "\3\31\1\361\25\31\3\0\1\31\71\0\1\357\16\0"+
    "\1\357\23\0\1\234\1\362\1\0\5\234\7\0\31\234"+
    "\3\0\1\234\30\0\1\234\1\362\1\0\5\234\7\0"+
    "\16\234\1\363\12\234\3\0\1\234\7\0\2\236\1\0"+
    "\1\236\1\0\6\236\1\364\70\236\13\0\1\365\112\0"+
    "\1\273\1\0\5\240\74\0\1\54\2\0\5\54\7\0"+
    "\31\54\3\0\1\54\30\0\1\54\2\0\5\366\7\0"+
    "\31\54\3\0\1\54\55\0\1\367\121\0\1\370\40\0"+
    "\1\54\1\241\1\0\5\54\7\0\13\54\1\371\15\54"+
    "\3\0\1\54\30\0\1\54\1\241\1\0\5\54\7\0"+
    "\22\54\1\372\6\54\3\0\1\54\4\0\1\373\23\0"+
    "\1\54\1\241\1\0\5\54\7\0\10\54\1\374\20\54"+
    "\3\0\1\54\3\0\1\375\24\0\1\54\1\241\1\0"+
    "\5\54\7\0\14\54\1\376\14\54\3\0\1\54\30\0"+
    "\1\54\1\241\1\0\5\54\7\0\24\54\1\377\4\54"+
    "\3\0\1\54\30\0\1\54\1\241\1\0\5\54\7\0"+
    "\3\54\1\u0100\25\54\3\0\1\54\30\0\1\54\1\241"+
    "\1\0\5\54\7\0\7\54\1\u0101\21\54\3\0\1\54"+
    "\71\0\1\373\16\0\1\373\23\0\1\256\1\u0102\1\0"+
    "\5\256\7\0\31\256\3\0\1\256\30\0\1\256\1\u0102"+
    "\1\0\5\256\7\0\16\256\1\u0103\12\256\3\0\1\256"+
    "\10\0\1\261\3\0\1\261\6\0\1\262\110\0\1\76"+
    "\2\0\5\76\7\0\31\76\3\0\1\76\11\0\1\264"+
    "\116\0\1\u0104\20\0\1\u0105\62\0\1\u0106\132\0\1\u0107"+
    "\63\0\5\u0108\74\0\1\122\2\0\5\122\7\0\13\122"+
    "\1\u0109\15\122\3\0\1\122\30\0\1\122\2\0\5\122"+
    "\7\0\13\122\1\u010a\15\122\3\0\1\122\62\0\1\u010b"+
    "\51\0\1\122\2\0\5\122\7\0\23\122\1\u010c\5\122"+
    "\3\0\1\122\30\0\1\122\2\0\5\122\7\0\21\122"+
    "\1\u010d\7\122\3\0\1\122\30\0\1\122\2\0\3\122"+
    "\1\u010e\1\122\7\0\31\122\3\0\1\122\30\0\1\122"+
    "\2\0\5\122\7\0\10\122\1\u010f\20\122\3\0\1\122"+
    "\3\0\1\375\24\0\1\122\2\0\5\122\7\0\12\122"+
    "\1\u0110\16\122\3\0\1\122\5\0\1\u0111\22\0\1\122"+
    "\2\0\5\122\7\0\1\u0112\30\122\3\0\1\122\30\0"+
    "\1\122\2\0\5\122\7\0\1\u0113\30\122\3\0\1\122"+
    "\30\0\1\122\2\0\5\122\7\0\24\122\1\u0114\4\122"+
    "\3\0\1\122\30\0\1\122\2\0\5\122\7\0\7\122"+
    "\1\u0115\21\122\3\0\1\122\30\0\1\122\2\0\5\122"+
    "\7\0\17\122\1\u0116\11\122\3\0\1\122\66\0\1\u0117"+
    "\64\0\1\u0118\43\0\2\141\1\0\1\141\3\0\4\141"+
    "\1\0\5\141\1\313\1\u0119\1\141\5\313\7\141\31\313"+
    "\3\141\1\313\11\141\1\0\1\141\3\0\4\141\1\0"+
    "\5\141\1\313\1\u0119\1\141\5\313\7\141\16\313\1\u011a"+
    "\12\313\3\141\1\313\11\141\1\0\1\141\3\0\4\141"+
    "\1\0\47\141\1\u011b\22\141\1\0\1\141\3\0\4\141"+
    "\1\0\31\141\1\u011c\40\141\1\0\1\141\3\0\4\141"+
    "\1\0\27\141\1\u011d\42\141\1\0\1\141\3\0\4\141"+
    "\1\0\15\141\1\u011e\52\141\1\155\2\0\1\155\2\0"+
    "\1\156\11\155\1\0\52\155\1\0\11\155\2\0\1\155"+
    "\2\0\12\155\1\0\1\322\1\u011f\1\155\5\322\7\155"+
    "\31\322\2\155\1\0\1\322\10\155\2\0\1\155\2\0"+
    "\12\155\1\0\1\322\1\u011f\1\155\5\322\7\155\16\322"+
    "\1\u0120\12\322\2\155\1\0\1\322\7\155\1\324\1\236"+
    "\1\0\1\324\1\0\1\236\5\324\1\u0121\4\324\1\236"+
    "\52\324\1\236\10\324\1\155\2\0\1\155\2\0\5\155"+
    "\1\u0122\4\155\1\0\52\155\1\0\11\155\2\0\1\155"+
    "\2\0\12\155\1\0\3\155\5\u0123\42\155\1\0\11\155"+
    "\2\0\1\155\2\0\12\155\1\0\32\155\1\u0124\17\155"+
    "\1\0\11\155\2\0\1\155\2\0\12\155\1\0\27\155"+
    "\1\u0125\22\155\1\0\4\155\1\u0125\4\155\2\0\1\155"+
    "\2\0\12\155\1\0\43\155\1\u0126\6\155\1\0\11\155"+
    "\2\0\1\155\2\0\12\155\1\0\26\155\1\u0127\23\155"+
    "\1\0\10\155\21\0\1\333\1\u0128\1\0\5\333\7\0"+
    "\31\333\3\0\1\333\30\0\1\333\1\u0128\1\0\5\333"+
    "\7\0\16\333\1\u0129\12\333\3\0\1\333\65\0\1\u012a"+
    "\102\0\1\u012b\47\0\1\203\2\0\5\203\7\0\14\203"+
    "\1\u012c\14\203\3\0\1\203\30\0\1\203\2\0\5\203"+
    "\7\0\22\203\1\u012d\6\203\3\0\1\203\4\0\1\u012e"+
    "\23\0\1\203\2\0\5\203\7\0\21\203\1\u012f\7\203"+
    "\3\0\1\203\30\0\1\203\2\0\5\203\7\0\17\203"+
    "\1\u0130\11\203\3\0\1\203\30\0\1\203\2\0\5\203"+
    "\7\0\3\203\1\u0131\25\203\3\0\1\203\52\0\1\u0132"+
    "\115\0\1\u0133\110\0\1\u0134\16\0\1\u0134\63\0\1\u0135"+
    "\62\0\1\u0136\44\0\5\352\13\0\1\222\2\0\5\222"+
    "\3\0\1\351\3\0\31\222\1\0\1\352\1\0\1\222"+
    "\1\0\1\352\4\222\2\0\1\222\3\0\1\222\6\0"+
    "\2\223\3\0\1\224\1\223\1\0\5\224\3\0\1\351"+
    "\3\0\15\224\1\u0137\13\224\1\0\1\352\1\0\1\224"+
    "\2\0\4\222\2\0\1\222\3\0\1\222\6\0\2\223"+
    "\3\0\1\224\1\223\1\0\5\224\3\0\1\351\3\0"+
    "\1\u0138\30\224\1\0\1\352\1\0\1\224\2\0\4\222"+
    "\2\0\1\222\3\0\1\222\13\0\1\222\2\0\5\222"+
    "\3\0\1\351\3\0\1\u0139\30\222\1\0\1\352\1\0"+
    "\1\222\2\0\4\222\22\0\1\31\2\0\5\31\7\0"+
    "\4\31\1\u013a\24\31\3\0\1\31\53\0\1\u013b\60\0"+
    "\1\31\2\0\5\31\7\0\16\31\1\u013c\12\31\3\0"+
    "\1\31\30\0\1\31\2\0\5\31\7\0\1\u013d\30\31"+
    "\3\0\1\31\30\0\1\234\2\0\5\234\7\0\31\234"+
    "\3\0\1\234\30\0\1\234\1\362\1\0\5\234\7\0"+
    "\15\234\1\u013e\13\234\3\0\1\234\22\0\1\364\111\0"+
    "\1\54\1\241\1\0\5\366\7\0\31\54\3\0\1\54"+
    "\64\0\1\u013f\101\0\1\u0140\51\0\1\54\1\241\1\0"+
    "\5\54\7\0\22\54\1\u0141\6\54\3\0\1\54\4\0"+
    "\1\u0142\23\0\1\54\1\241\1\0\5\54\7\0\4\54"+
    "\1\u0143\24\54\3\0\1\54\53\0\1\u0144\60\0\1\54"+
    "\1\241\1\0\5\54\7\0\15\54\1\65\13\54\3\0"+
    "\1\54\64\0\1\u0145\47\0\1\54\1\241\1\0\5\54"+
    "\7\0\16\54\1\u0146\12\54\3\0\1\54\30\0\1\54"+
    "\1\241\1\0\5\54\7\0\4\54\1\65\24\54\3\0"+
    "\1\54\30\0\1\54\1\241\1\0\5\54\7\0\1\u0147"+
    "\30\54\3\0\1\54\30\0\1\54\1\241\1\0\5\54"+
    "\7\0\21\54\1\65\7\54\3\0\1\54\30\0\1\256"+
    "\2\0\5\256\7\0\31\256\3\0\1\256\30\0\1\256"+
    "\1\u0102\1\0\5\256\7\0\15\256\1\u0148\13\256\3\0"+
    "\1\256\24\0\1\u0149\131\0\1\u014a\61\0\1\122\2\0"+
    "\5\122\7\0\22\122\1\u014b\6\122\3\0\1\122\4\0"+
    "\1\u0142\23\0\1\122\2\0\5\122\7\0\4\122\1\u014c"+
    "\24\122\3\0\1\122\53\0\1\u014d\60\0\1\122\2\0"+
    "\5\122\7\0\17\122\1\u014e\11\122\3\0\1\122\30\0"+
    "\1\122\2\0\5\122\1\u014f\6\0\31\122\3\0\1\122"+
    "\30\0\1\122\2\0\5\122\1\270\6\0\31\122\3\0"+
    "\1\122\30\0\1\122\2\0\5\122\7\0\15\122\1\134"+
    "\13\122\3\0\1\122\30\0\1\122\2\0\5\122\7\0"+
    "\3\122\1\u0150\25\122\3\0\1\122\52\0\1\u0151\61\0"+
    "\1\122\2\0\5\122\7\0\10\122\1\u0152\20\122\3\0"+
    "\1\122\3\0\1\u0153\24\0\1\u0154\2\0\5\122\7\0"+
    "\31\122\3\0\1\122\30\0\1\122\2\0\5\122\7\0"+
    "\4\122\1\134\24\122\3\0\1\122\30\0\1\122\2\0"+
    "\5\122\7\0\21\122\1\134\7\122\3\0\1\122\30\0"+
    "\1\122\2\0\5\122\1\u0155\6\0\31\122\3\0\1\122"+
    "\40\0\1\u0155\73\0\1\u0156\62\0\2\141\1\0\1\141"+
    "\3\0\4\141\1\0\5\141\1\313\2\141\5\313\7\141"+
    "\31\313\3\141\1\313\11\141\1\0\1\141\3\0\4\141"+
    "\1\0\5\141\1\313\1\u0119\1\141\5\313\7\141\15\313"+
    "\1\u0157\13\313\3\141\1\313\11\141\1\0\1\141\3\0"+
    "\4\141\1\0\30\141\1\u0158\41\141\1\0\1\141\3\0"+
    "\4\141\1\0\42\141\1\u0159\27\141\1\0\1\141\3\0"+
    "\4\141\1\0\34\141\1\150\27\141\1\150\3\141\1\155"+
    "\2\0\1\155\2\0\12\155\1\0\1\322\2\155\5\322"+
    "\7\155\31\322\2\155\1\0\1\322\10\155\2\0\1\155"+
    "\2\0\12\155\1\0\1\322\1\u011f\1\155\5\322\7\155"+
    "\15\322\1\u015a\13\322\2\155\1\0\1\322\10\155\2\0"+
    "\1\155\2\0\5\155\1\u0121\4\155\1\0\52\155\1\0"+
    "\11\155\2\0\1\155\2\0\12\155\1\0\41\155\1\u015b"+
    "\10\155\1\0\5\155\1\u015b\3\155\2\0\1\155\2\0"+
    "\12\155\1\0\34\155\1\171\15\155\1\0\11\155\2\0"+
    "\1\155\2\0\12\155\1\0\23\155\1\171\26\155\1\0"+
    "\11\155\2\0\1\155\2\0\12\155\1\0\40\155\1\171"+
    "\11\155\1\0\10\155\21\0\1\333\2\0\5\333\7\0"+
    "\31\333\3\0\1\333\30\0\1\333\1\u0128\1\0\5\333"+
    "\7\0\15\333\1\u015c\13\333\3\0\1\333\64\0\1\u015d"+
    "\71\0\1\u015e\61\0\1\203\2\0\5\203\7\0\1\203"+
    "\1\u015f\27\203\3\0\1\203\30\0\1\203\2\0\5\203"+
    "\7\0\22\203\1\u0160\6\203\3\0\1\203\4\0\1\u0161"+
    "\64\0\1\u0161\16\0\1\u0161\23\0\1\203\2\0\5\203"+
    "\7\0\6\203\1\u0162\22\203\3\0\1\203\30\0\1\203"+
    "\2\0\5\203\7\0\4\203\1\u0163\24\203\3\0\1\203"+
    "\52\0\1\u0164\107\0\1\u0165\112\0\1\u0166\112\0\1\u0167"+
    "\17\0\1\222\3\0\1\222\6\0\2\223\3\0\1\224"+
    "\1\223\1\0\5\224\3\0\1\351\3\0\5\224\1\u0168"+
    "\23\224\1\0\1\352\1\0\1\224\2\0\4\222\2\0"+
    "\1\222\3\0\1\222\6\0\2\223\3\0\1\224\1\223"+
    "\1\0\5\224\3\0\1\351\3\0\21\224\1\u0169\7\224"+
    "\1\0\1\352\1\0\1\224\2\0\4\222\2\0\1\222"+
    "\3\0\1\222\13\0\1\222\2\0\5\222\3\0\1\351"+
    "\3\0\21\222\1\u016a\7\222\1\0\1\352\1\0\1\222"+
    "\2\0\4\222\22\0\1\31\2\0\5\31\7\0\21\31"+
    "\1\u016b\7\31\3\0\1\31\70\0\1\u016c\43\0\1\31"+
    "\2\0\5\31\7\0\25\31\1\u016d\3\31\3\0\1\31"+
    "\30\0\1\31\2\0\5\31\7\0\23\31\1\u016e\5\31"+
    "\3\0\1\31\30\0\1\234\1\362\1\0\5\234\7\0"+
    "\5\234\1\u016f\23\234\3\0\1\234\65\0\1\u0170\100\0"+
    "\1\u0171\51\0\1\54\1\241\1\0\5\54\7\0\2\54"+
    "\1\u0172\1\54\1\65\24\54\3\0\1\54\51\0\1\u0173"+
    "\1\0\1\u0145\60\0\1\54\1\241\1\0\5\54\7\0"+
    "\21\54\1\u0174\7\54\3\0\1\54\70\0\1\u0175\43\0"+
    "\1\54\1\241\1\0\5\54\7\0\25\54\1\u0176\3\54"+
    "\3\0\1\54\30\0\1\54\1\241\1\0\5\54\7\0"+
    "\23\54\1\u0177\5\54\3\0\1\54\30\0\1\256\1\u0102"+
    "\1\0\5\256\7\0\5\256\1\u0178\23\256\3\0\1\256"+
    "\57\0\1\u0179\27\0\1\u0179\24\0\1\122\2\0\5\122"+
    "\7\0\2\122\1\u017a\1\122\1\134\24\122\3\0\1\122"+
    "\30\0\1\122\2\0\5\122\1\u017b\6\0\31\122\3\0"+
    "\1\122\40\0\1\u017b\73\0\1\122\2\0\5\122\1\u017c"+
    "\6\0\31\122\3\0\1\122\30\0\1\122\2\0\5\122"+
    "\7\0\5\122\1\u017d\23\122\3\0\1\122\54\0\1\u017e"+
    "\57\0\1\122\2\0\5\122\7\0\15\122\1\u010e\13\122"+
    "\3\0\1\122\64\0\1\u017f\47\0\1\122\2\0\2\122"+
    "\1\u0180\1\u0181\1\122\7\0\31\122\3\0\1\122\35\0"+
    "\1\u0182\1\u0183\54\0\2\141\1\0\1\141\3\0\4\141"+
    "\1\0\5\141\1\313\1\u0119\1\141\5\313\7\141\5\313"+
    "\1\u0184\23\313\3\141\1\313\11\141\1\0\1\141\3\0"+
    "\4\141\1\0\45\141\1\u0185\24\141\1\0\1\141\3\0"+
    "\4\141\1\0\45\141\1\u0186\22\141\1\155\2\0\1\155"+
    "\2\0\12\155\1\0\1\322\1\u011f\1\155\5\322\7\155"+
    "\5\322\1\u0187\23\322\2\155\1\0\1\322\10\155\2\0"+
    "\1\155\2\0\12\155\1\0\21\155\1\u0188\1\155\1\171"+
    "\26\155\1\0\10\155\21\0\1\333\1\u0128\1\0\5\333"+
    "\7\0\5\333\1\u0189\23\333\3\0\1\333\54\0\1\u018a"+
    "\132\0\1\u018b\30\0\1\203\2\0\5\203\7\0\4\203"+
    "\1\u018c\24\203\3\0\1\203\30\0\1\203\2\0\5\203"+
    "\7\0\26\203\1\u018d\2\203\3\0\1\203\75\0\1\u018e"+
    "\36\0\1\203\2\0\5\203\7\0\4\203\1\u018f\24\203"+
    "\3\0\1\203\103\0\1\u0190\20\0\1\u0191\150\0\1\u0192"+
    "\65\0\1\u0193\44\0\1\222\3\0\1\222\6\0\2\223"+
    "\3\0\1\224\1\223\1\0\5\224\3\0\1\351\3\0"+
    "\31\224\1\0\1\352\1\0\1\224\2\0\1\222\1\u0194"+
    "\2\222\2\0\1\222\3\0\1\222\6\0\2\223\3\0"+
    "\1\224\1\223\1\0\5\224\3\0\1\351\3\0\23\224"+
    "\1\u0195\5\224\1\0\1\352\1\0\1\224\2\0\4\222"+
    "\2\0\1\222\3\0\1\222\13\0\1\222\2\0\5\222"+
    "\3\0\1\351\3\0\23\222\1\u0196\5\222\1\0\1\352"+
    "\1\0\1\222\2\0\4\222\22\0\1\31\2\0\5\31"+
    "\7\0\23\31\1\u0197\5\31\3\0\1\31\72\0\1\u0198"+
    "\41\0\1\31\2\0\5\31\7\0\4\31\1\u0199\24\31"+
    "\3\0\1\31\30\0\1\31\2\0\5\31\7\0\4\31"+
    "\1\u019a\24\31\3\0\1\31\30\0\1\234\1\362\1\0"+
    "\5\234\7\0\31\234\3\0\1\234\3\0\1\u019b\64\0"+
    "\1\u019c\57\0\1\u019d\67\0\1\54\1\241\1\0\5\54"+
    "\7\0\7\54\1\65\21\54\3\0\1\54\56\0\1\u0145"+
    "\55\0\1\54\1\241\1\0\5\54\7\0\23\54\1\u019e"+
    "\5\54\3\0\1\54\72\0\1\u019f\41\0\1\54\1\241"+
    "\1\0\5\54\7\0\4\54\1\u01a0\24\54\3\0\1\54"+
    "\30\0\1\54\1\241\1\0\5\54\7\0\4\54\1\u01a1"+
    "\24\54\3\0\1\54\30\0\1\256\1\u0102\1\0\5\256"+
    "\7\0\31\256\3\0\1\256\3\0\1\u01a2\43\0\1\u01a3"+
    "\64\0\1\122\2\0\5\122\7\0\7\122\1\134\21\122"+
    "\3\0\1\122\56\0\1\u01a4\55\0\1\122\2\0\2\122"+
    "\1\u010e\2\122\7\0\31\122\3\0\1\122\35\0\1\u017f"+
    "\76\0\1\122\2\0\3\122\1\u01a5\1\122\7\0\31\122"+
    "\3\0\1\122\30\0\1\122\2\0\1\122\1\u017d\3\122"+
    "\7\0\31\122\3\0\1\122\36\0\1\u01a6\101\0\1\u017e"+
    "\56\0\2\141\1\0\1\141\3\0\4\141\1\0\5\141"+
    "\1\313\1\u0119\1\141\5\313\7\141\31\313\3\141\1\313"+
    "\3\141\1\u01a7\5\141\1\0\1\141\3\0\4\141\1\0"+
    "\30\141\1\u01a8\41\141\1\0\1\141\3\0\4\141\1\0"+
    "\30\141\1\u0185\37\141\1\155\2\0\1\155\2\0\12\155"+
    "\1\0\1\322\1\u011f\1\155\5\322\7\155\31\322\2\155"+
    "\1\0\1\322\3\155\1\u01a9\4\155\2\0\1\155\2\0"+
    "\12\155\1\0\26\155\1\171\23\155\1\0\10\155\21\0"+
    "\1\333\1\u0128\1\0\5\333\7\0\31\333\3\0\1\333"+
    "\3\0\1\u01aa\53\0\1\u01aa\27\0\1\u01aa\67\0\1\u01ab"+
    "\40\0\1\203\2\0\5\203\7\0\21\203\1\u01ac\7\203"+
    "\3\0\1\203\30\0\1\203\2\0\5\203\7\0\16\203"+
    "\1\u01ad\12\203\3\0\1\203\65\0\1\u01ae\46\0\1\203"+
    "\2\0\5\203\7\0\23\203\1\u01af\5\203\3\0\1\203"+
    "\73\0\1\u01b0\104\0\1\u01b1\100\0\1\u01b2\16\0\1\u01b2"+
    "\3\0\1\222\3\0\1\222\13\0\1\222\2\0\5\222"+
    "\3\0\1\351\3\0\6\222\1\u01b3\22\222\1\0\1\352"+
    "\1\0\1\222\2\0\4\222\2\0\1\222\3\0\1\222"+
    "\6\0\2\223\3\0\1\224\1\223\1\0\5\224\3\0"+
    "\1\351\3\0\31\224\1\0\1\352\1\0\1\u01b4\2\0"+
    "\4\222\2\0\1\222\3\0\1\222\13\0\1\222\2\0"+
    "\5\222\3\0\1\351\3\0\31\222\1\0\1\352\1\0"+
    "\1\u01b5\2\0\4\222\22\0\1\31\2\0\5\31\7\0"+
    "\31\31\3\0\1\u01b6\103\0\1\u01b7\55\0\1\u01b8\101\0"+
    "\1\u01b9\60\0\1\54\1\241\1\0\5\54\7\0\31\54"+
    "\3\0\1\u01ba\103\0\1\u01bb\55\0\1\u01bc\117\0\1\u01bd"+
    "\16\0\1\u01bd\65\0\1\u01be\41\0\1\122\2\0\4\122"+
    "\1\u010e\7\0\31\122\3\0\1\122\37\0\1\u017f\53\0"+
    "\2\141\1\0\1\141\3\0\4\141\1\0\32\141\1\u01bf"+
    "\37\141\1\0\1\141\3\0\4\141\1\0\24\141\1\u01c0"+
    "\43\141\1\155\2\0\1\155\2\0\12\155\1\0\25\155"+
    "\1\u01c1\24\155\1\0\10\155\46\0\1\u01c2\117\0\1\u01c3"+
    "\16\0\1\u01c3\23\0\1\203\2\0\5\203\7\0\16\203"+
    "\1\u01c4\12\203\3\0\1\203\30\0\1\203\2\0\5\203"+
    "\7\0\21\203\1\u01c5\7\203\3\0\1\203\70\0\1\u01c6"+
    "\104\0\1\u01c7\16\0\1\u01c7\71\0\1\u01c8\56\0\1\u01c9"+
    "\42\0\1\222\3\0\1\222\13\0\1\u01ca\2\0\5\222"+
    "\3\0\1\351\3\0\31\222\1\0\1\352\1\0\1\222"+
    "\2\0\4\222\2\0\1\222\3\0\1\222\6\0\2\223"+
    "\3\0\1\224\1\223\1\0\5\224\3\0\1\351\3\0"+
    "\24\224\1\u01cb\4\224\1\0\1\352\1\0\1\224\2\0"+
    "\4\222\2\0\1\222\3\0\1\222\13\0\1\222\2\0"+
    "\5\222\3\0\1\351\3\0\24\222\1\u01cc\4\222\1\0"+
    "\1\352\1\0\1\222\2\0\4\222\22\0\1\31\2\0"+
    "\5\31\7\0\24\31\1\u01cd\4\31\3\0\1\31\73\0"+
    "\1\u01ce\40\0\1\u01cf\117\0\1\u01d0\67\0\1\54\1\241"+
    "\1\0\5\54\7\0\24\54\1\u01d1\4\54\3\0\1\54"+
    "\73\0\1\u01d2\40\0\1\u01d3\105\0\1\u01d4\143\0\1\u01d5"+
    "\20\0\2\141\1\0\1\141\3\0\4\141\1\0\5\141"+
    "\1\u01d6\64\141\1\0\1\141\3\0\4\141\1\0\26\141"+
    "\1\u01d7\41\141\1\155\2\0\1\155\2\0\12\155\1\0"+
    "\1\u01d8\51\155\1\0\10\155\21\0\1\u01d9\126\0\1\u01da"+
    "\60\0\1\203\2\0\5\203\7\0\5\203\1\u01db\23\203"+
    "\3\0\1\203\30\0\1\203\2\0\5\203\7\0\3\203"+
    "\1\u01dc\25\203\3\0\1\203\52\0\1\u01dd\104\0\1\u01de"+
    "\50\0\1\u01df\153\0\1\u01e0\23\0\1\222\3\0\1\222"+
    "\13\0\1\u01e1\2\0\5\u01e1\3\0\1\351\3\0\31\u01e1"+
    "\1\0\1\352\1\0\1\u01e1\2\0\4\222\2\0\1\222"+
    "\3\0\1\222\6\0\2\223\3\0\1\224\1\223\1\0"+
    "\5\224\3\0\1\351\3\0\22\224\1\u01e2\6\224\1\0"+
    "\1\352\1\0\1\224\2\0\2\222\1\u01e3\1\222\2\0"+
    "\1\222\3\0\1\222\13\0\1\222\2\0\5\222\3\0"+
    "\1\351\3\0\22\222\1\u01e3\6\222\1\0\1\352\1\0"+
    "\1\222\2\0\2\222\1\u01e3\1\222\22\0\1\31\2\0"+
    "\5\31\7\0\17\31\1\u01e4\11\31\3\0\1\31\66\0"+
    "\1\u01e5\45\0\1\54\1\241\1\0\5\54\7\0\17\54"+
    "\1\u01e6\11\54\3\0\1\54\66\0\1\u01e7\103\0\1\u01e8"+
    "\24\0\2\141\1\0\1\141\3\0\4\141\1\0\33\141"+
    "\1\320\34\141\61\0\1\u01e9\43\0\1\203\2\0\5\203"+
    "\7\0\6\203\1\u01ea\22\203\3\0\1\203\70\0\1\u01eb"+
    "\72\0\1\u01ec\27\0\1\u01ec\4\0\1\222\3\0\1\222"+
    "\13\0\1\u01e1\1\u0102\1\0\5\u01e1\3\0\1\351\3\0"+
    "\31\u01e1\1\0\1\352\1\0\1\u01e1\2\0\4\222\2\0"+
    "\1\222\3\0\1\222\6\0\2\223\3\0\1\224\1\223"+
    "\1\0\5\224\3\0\1\351\3\0\4\224\1\u01ed\24\224"+
    "\1\0\1\352\1\0\1\224\2\0\4\222\2\0\1\222"+
    "\3\0\1\222\13\0\1\222\2\0\5\222\3\0\1\351"+
    "\3\0\4\222\1\u01ee\24\222\1\0\1\352\1\0\1\222"+
    "\2\0\4\222\22\0\1\31\2\0\5\31\7\0\3\31"+
    "\1\u01ef\25\31\3\0\1\31\52\0\1\u01f0\61\0\1\54"+
    "\1\241\1\0\5\54\7\0\3\54\1\u01f1\25\54\3\0"+
    "\1\54\52\0\1\u01f2\121\0\1\u01f3\43\0\1\203\2\0"+
    "\5\203\7\0\21\203\1\u01f4\7\203\3\0\1\203\70\0"+
    "\1\u01f5\101\0\1\u01f6\25\0\1\222\3\0\1\222\6\0"+
    "\2\223\3\0\1\224\1\223\1\0\5\224\3\0\1\351"+
    "\3\0\21\224\1\u01f7\7\224\1\0\1\352\1\0\1\224"+
    "\2\0\4\222\2\0\1\222\3\0\1\222\13\0\1\222"+
    "\2\0\5\222\3\0\1\351\3\0\21\222\1\u01f8\7\222"+
    "\1\0\1\352\1\0\1\222\2\0\4\222\22\0\1\31"+
    "\2\0\5\31\7\0\1\u01f9\30\31\3\0\1\31\47\0"+
    "\1\u01fa\64\0\1\54\1\241\1\0\5\54\7\0\1\u01fb"+
    "\30\54\3\0\1\54\47\0\1\u01fc\113\0\1\u01fd\27\0"+
    "\1\u01fd\24\0\1\203\2\0\5\203\7\0\16\203\1\u01fe"+
    "\12\203\3\0\1\203\57\0\1\u01ff\27\0\1\u01ff\66\0"+
    "\1\u0200\21\0\1\222\3\0\1\222\6\0\2\223\3\0"+
    "\1\224\1\223\1\0\5\224\3\0\1\351\3\0\21\224"+
    "\1\u0201\7\224\1\0\1\352\1\0\1\224\2\0\4\222"+
    "\2\0\1\222\3\0\1\222\13\0\1\222\2\0\5\222"+
    "\3\0\1\351\3\0\21\222\1\u0202\7\222\1\0\1\352"+
    "\1\0\1\222\2\0\4\222\22\0\1\31\2\0\5\31"+
    "\7\0\23\31\1\u0203\5\31\3\0\1\31\72\0\1\u0204"+
    "\41\0\1\54\1\241\1\0\5\54\7\0\23\54\1\u0205"+
    "\5\54\3\0\1\54\72\0\1\u0206\66\0\1\u0207\56\0"+
    "\1\203\2\0\5\203\7\0\24\203\1\u0208\4\203\3\0"+
    "\1\203\55\0\1\u0209\46\0\1\u020a\73\0\1\222\3\0"+
    "\1\222\6\0\2\223\3\0\1\224\1\223\1\0\5\224"+
    "\3\0\1\351\3\0\10\224\1\u020b\20\224\1\0\1\352"+
    "\1\0\1\224\2\0\1\222\1\u020c\2\222\2\0\1\222"+
    "\3\0\1\222\13\0\1\222\2\0\5\222\3\0\1\351"+
    "\3\0\10\222\1\u020c\20\222\1\0\1\352\1\0\1\222"+
    "\2\0\1\222\1\u020c\2\222\22\0\1\31\2\0\5\31"+
    "\7\0\4\31\1\u020d\24\31\3\0\1\31\53\0\1\u020e"+
    "\60\0\1\54\1\241\1\0\5\54\7\0\4\54\1\u020f"+
    "\24\54\3\0\1\54\53\0\1\u0210\106\0\1\u0211\55\0"+
    "\1\203\2\0\5\203\7\0\17\203\1\u0212\11\203\3\0"+
    "\1\203\56\0\1\u0213\35\0\1\222\3\0\1\222\6\0"+
    "\2\223\3\0\1\224\1\223\1\0\5\224\3\0\1\351"+
    "\3\0\6\224\1\u0214\22\224\1\0\1\352\1\0\1\224"+
    "\2\0\4\222\2\0\1\222\3\0\1\222\13\0\1\222"+
    "\2\0\5\222\3\0\1\351\3\0\6\222\1\u0215\22\222"+
    "\1\0\1\352\1\0\1\222\2\0\4\222\64\0\1\u0216"+
    "\41\0\1\203\2\0\5\203\7\0\22\203\1\u0217\6\203"+
    "\3\0\1\203\4\0\1\u0218\65\0\1\u0219\21\0\1\222"+
    "\3\0\1\222\6\0\2\223\3\0\1\224\1\223\1\0"+
    "\5\224\3\0\1\351\3\0\7\224\1\u021a\21\224\1\0"+
    "\1\352\1\0\1\224\2\0\4\222\2\0\1\222\3\0"+
    "\1\222\13\0\1\222\2\0\5\222\3\0\1\351\3\0"+
    "\7\222\1\u021b\21\222\1\0\1\352\1\0\1\222\2\0"+
    "\4\222\63\0\1\u021c\16\0\1\u021c\64\0\1\u021d\16\0"+
    "\1\u021d\3\0\1\222\3\0\1\222\6\0\2\223\3\0"+
    "\1\224\1\223\1\0\5\224\3\0\1\351\3\0\23\224"+
    "\1\u021e\5\224\1\0\1\352\1\0\1\224\2\0\4\222"+
    "\2\0\1\222\3\0\1\222\13\0\1\222\2\0\5\222"+
    "\3\0\1\351\3\0\23\222\1\u021f\5\222\1\0\1\352"+
    "\1\0\1\222\2\0\4\222\2\0\1\222\3\0\1\222"+
    "\6\0\2\223\3\0\1\224\1\223\1\0\5\224\3\0"+
    "\1\351\3\0\22\224\1\u0220\6\224\1\0\1\352\1\0"+
    "\1\224\2\0\2\222\1\u0221\1\222\2\0\1\222\3\0"+
    "\1\222\13\0\1\222\2\0\5\222\3\0\1\351\3\0"+
    "\22\222\1\u0221\6\222\1\0\1\352\1\0\1\222\2\0"+
    "\2\222\1\u0221\1\222\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[30668];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\21\0\1\11\1\1\1\11\5\1\1\11\4\1\1\11"+
    "\3\1\2\11\1\1\1\11\3\1\1\11\13\1\1\11"+
    "\1\1\1\11\1\1\1\11\4\1\3\11\1\1\1\11"+
    "\1\1\2\11\4\1\1\11\3\1\2\11\16\1\1\11"+
    "\11\1\1\11\1\1\2\11\5\1\1\11\10\1\1\11"+
    "\1\1\1\11\1\1\1\11\4\1\1\11\4\1\1\11"+
    "\2\1\1\11\1\1\1\0\3\1\1\0\4\1\1\0"+
    "\3\1\1\0\2\1\1\0\4\1\2\0\10\1\1\0"+
    "\3\1\1\0\1\11\1\0\1\11\1\1\2\0\2\11"+
    "\2\0\2\1\1\0\12\1\2\0\22\1\2\0\5\1"+
    "\5\0\1\11\1\0\2\1\1\0\1\1\1\0\4\1"+
    "\1\11\1\0\1\1\2\0\2\1\1\0\1\1\1\0"+
    "\6\1\1\11\1\0\1\11\1\0\3\1\1\0\5\1"+
    "\1\0\5\1\2\0\21\1\2\0\2\1\1\0\3\1"+
    "\1\11\4\0\2\1\1\0\1\1\1\0\3\1\2\0"+
    "\1\1\1\0\1\1\1\0\1\11\3\1\1\11\1\0"+
    "\2\1\1\0\1\1\1\11\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\0\6\1\2\0\2\1\1\0\2\1"+
    "\4\0\2\1\1\0\1\1\1\0\3\1\2\0\1\1"+
    "\1\0\1\1\1\0\3\1\1\0\1\1\1\11\1\0"+
    "\1\1\2\0\2\1\2\0\6\1\2\0\2\1\1\0"+
    "\1\1\1\0\1\11\3\0\1\1\1\0\4\1\2\0"+
    "\1\11\4\1\3\0\1\1\1\0\3\1\2\0\2\1"+
    "\1\0\1\1\4\0\1\1\1\0\1\1\3\0\1\1"+
    "\4\0\3\1\2\0\2\1\5\0\1\1\1\0\1\1"+
    "\2\0\1\11\1\1\2\0\1\11\1\0\3\1\2\0"+
    "\2\1\1\11\1\0\1\11\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\11\1\0\1\1\2\0\1\1"+
    "\1\0\1\1\1\0\1\1\2\0\1\1\2\0\1\1"+
    "\1\0\1\1\1\0\1\1\2\0\1\1\2\0\1\1"+
    "\1\0\1\1\1\0\1\1\2\0\1\1\1\0\1\11"+
    "\1\1\1\0\1\1\1\11\1\1\1\11\1\0\1\1"+
    "\1\0\1\1\2\0\1\1\1\11\1\0\1\1\1\0"+
    "\2\11\1\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[545];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ImpexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 86: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 87: break;
          case 3:
            { yybegin(YYINITIAL); return ImpexTypes.CRLF;
            }
          // fall through
          case 88: break;
          case 4:
            { yybegin(FIELD_VALUE); return ImpexTypes.VALUE_SUBTYPE;
            }
          // fall through
          case 89: break;
          case 5:
            { yybegin(FIELD_VALUE); return ImpexTypes.FIELD_VALUE_SEPARATOR;
            }
          // fall through
          case 90: break;
          case 6:
            { return ImpexTypes.MACRO_VALUE;
            }
          // fall through
          case 91: break;
          case 7:
            { return ImpexTypes.LEFT_ROUND_BRACKET;
            }
          // fall through
          case 92: break;
          case 8:
            { return ImpexTypes.RIGHT_ROUND_BRACKET;
            }
          // fall through
          case 93: break;
          case 9:
            { return ImpexTypes.BOOLEAN;
            }
          // fall through
          case 94: break;
          case 10:
            { return ImpexTypes.COMMA;
            }
          // fall through
          case 95: break;
          case 11:
            { return ImpexTypes.DIGIT;
            }
          // fall through
          case 96: break;
          case 12:
            { return ImpexTypes.ASSIGN_VALUE;
            }
          // fall through
          case 97: break;
          case 13:
            { return ImpexTypes.LEFT_SQUARE_BRACKET;
            }
          // fall through
          case 98: break;
          case 14:
            { return ImpexTypes.RIGHT_SQUARE_BRACKET;
            }
          // fall through
          case 99: break;
          case 15:
            { yybegin(WAITING_MACRO_VALUE); return ImpexTypes.ASSIGN_VALUE;
            }
          // fall through
          case 100: break;
          case 16:
            { yybegin(HEADER_LINE); return ImpexTypes.HEADER_TYPE;
            }
          // fall through
          case 101: break;
          case 17:
            { return ImpexTypes.HEADER_PARAMETER_NAME;
            }
          // fall through
          case 102: break;
          case 18:
            { return ImpexTypes.DOT;
            }
          // fall through
          case 103: break;
          case 19:
            { return ImpexTypes.PARAMETERS_SEPARATOR;
            }
          // fall through
          case 104: break;
          case 20:
            { yybegin(WAITING_ATTR_OR_PARAM_VALUE); return ImpexTypes.ASSIGN_VALUE;
            }
          // fall through
          case 105: break;
          case 21:
            { yybegin(MODIFIERS_BLOCK); return ImpexTypes.LEFT_SQUARE_BRACKET;
            }
          // fall through
          case 106: break;
          case 22:
            { return ImpexTypes.ALTERNATIVE_PATTERN;
            }
          // fall through
          case 107: break;
          case 23:
            { return ImpexTypes.FIELD_VALUE;
            }
          // fall through
          case 108: break;
          case 24:
            { return ImpexTypes.FIELD_LIST_ITEM_SEPARATOR;
            }
          // fall through
          case 109: break;
          case 25:
            { return ImpexTypes.DEFAULT_PATH_DELIMITER;
            }
          // fall through
          case 110: break;
          case 26:
            { return ImpexTypes.FIELD_VALUE_SEPARATOR;
            }
          // fall through
          case 111: break;
          case 27:
            { return ImpexTypes.ALTERNATIVE_MAP_DELIMITER;
            }
          // fall through
          case 112: break;
          case 28:
            { return ImpexTypes.SCRIPT_BODY_VALUE;
            }
          // fall through
          case 113: break;
          case 29:
            { return ImpexTypes.ATTRIBUTE_SEPARATOR;
            }
          // fall through
          case 114: break;
          case 30:
            { return ImpexTypes.ATTRIBUTE_NAME;
            }
          // fall through
          case 115: break;
          case 31:
            { yybegin(HEADER_LINE); return ImpexTypes.RIGHT_SQUARE_BRACKET;
            }
          // fall through
          case 116: break;
          case 32:
            { yybegin(MODIFIERS_BLOCK); return ImpexTypes.ALTERNATIVE_MAP_DELIMITER;
            }
          // fall through
          case 117: break;
          case 33:
            { return ImpexTypes.ATTRIBUTE_VALUE;
            }
          // fall through
          case 118: break;
          case 34:
            { yybegin(MODIFIERS_BLOCK); return ImpexTypes.ATTRIBUTE_SEPARATOR;
            }
          // fall through
          case 119: break;
          case 35:
            { yypushback(yylength()); yybegin(MACRO_USAGE);
            }
          // fall through
          case 120: break;
          case 36:
            { yybegin(USER_RIGHTS_HEADER_LINE); return ImpexTypes.CRLF;
            }
          // fall through
          case 121: break;
          case 37:
            { return ImpexTypes.CRLF;
            }
          // fall through
          case 122: break;
          case 38:
            { return ImpexTypes.PERMISSION;
            }
          // fall through
          case 123: break;
          case 39:
            { yybegin(USER_RIGHTS_WAIT_FOR_VALUE_LINE); return ImpexTypes.PARAMETERS_SEPARATOR;
            }
          // fall through
          case 124: break;
          case 40:
            { yybegin(USER_RIGHTS_VALUE_LINE); return ImpexTypes.CRLF;
            }
          // fall through
          case 125: break;
          case 41:
            { return ImpexTypes.PERMISSION_ALLOWED;
            }
          // fall through
          case 126: break;
          case 42:
            { return ImpexTypes.PERMISSION_DENIED;
            }
          // fall through
          case 127: break;
          case 43:
            { return ImpexTypes.DOUBLE_STRING;
            }
          // fall through
          case 128: break;
          case 44:
            { return ImpexTypes.LINE_COMMENT;
            }
          // fall through
          case 129: break;
          case 45:
            { yybegin(SCRIPT_BODY); return ImpexTypes.BEAN_SHELL_MARKER;
            }
          // fall through
          case 130: break;
          case 46:
            { return ImpexTypes.MACRO_USAGE;
            }
          // fall through
          case 131: break;
          case 47:
            { yypushback(yylength()); yybegin(WAITING_MACRO_CONFIG_USAGE);
            }
          // fall through
          case 132: break;
          case 48:
            { return ImpexTypes.SINGLE_STRING;
            }
          // fall through
          case 133: break;
          case 49:
            { return ImpexTypes.HEADER_SPECIAL_PARAMETER_NAME;
            }
          // fall through
          case 134: break;
          case 50:
            { return ImpexTypes.DOCUMENT_ID;
            }
          // fall through
          case 135: break;
          case 51:
            { yybegin(HEADER_LINE);
                                                              yypushback(1);
                                                              return ImpexTypes.FUNCTION;
            }
          // fall through
          case 136: break;
          case 52:
            { return ImpexTypes.MULTILINE_SEPARATOR;
            }
          // fall through
          case 137: break;
          case 53:
            { return ImpexTypes.FIELD_VALUE_PASSWORD_ENCODING_PREFIX;
            }
          // fall through
          case 138: break;
          case 54:
            { return ImpexTypes.DEFAULT_KEY_VALUE_DELIMITER;
            }
          // fall through
          case 139: break;
          case 55:
            { yybegin(WAITING_MACRO_VALUE); return ImpexTypes.MACRO_USAGE;
            }
          // fall through
          case 140: break;
          case 56:
            { yybegin(MACRO_DECLARATION);
                                                              /* Push back '='. */
                                                              yypushback(1);
                                                              /* Push back spaces. */
                                                              yypushback(yylength() - yytext().toString().trim().length());
                                                              return ImpexTypes.MACRO_NAME_DECLARATION;
            }
          // fall through
          case 141: break;
          case 57:
            { return ImpexTypes.COLLECTION_APPEND_PREFIX;
            }
          // fall through
          case 142: break;
          case 58:
            { return ImpexTypes.COLLECTION_REMOVE_PREFIX;
            }
          // fall through
          case 143: break;
          case 59:
            { return ImpexTypes.SCRIPT_ACTION;
            }
          // fall through
          case 144: break;
          case 60:
            { return ImpexTypes.UID;
            }
          // fall through
          case 145: break;
          case 61:
            { return ImpexTypes.COLLECTION_MERGE_PREFIX;
            }
          // fall through
          case 146: break;
          case 62:
            { return ImpexTypes.FIELD_VALUE_JAR_PREFIX;
            }
          // fall through
          case 147: break;
          case 63:
            { return ImpexTypes.FIELD_VALUE_ZIP_PREFIX;
            }
          // fall through
          case 148: break;
          case 64:
            { return ImpexTypes.TYPE;
            }
          // fall through
          case 149: break;
          case 65:
            { return ImpexTypes.FIELD_VALUE_FILE_PREFIX;
            }
          // fall through
          case 150: break;
          case 66:
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_INSERT;
            }
          // fall through
          case 151: break;
          case 67:
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_REMOVE;
            }
          // fall through
          case 152: break;
          case 68:
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_UPDATE;
            }
          // fall through
          case 153: break;
          case 69:
            { return ImpexTypes.FIELD_VALUE_NULL;
            }
          // fall through
          case 154: break;
          case 70:
            { return ImpexTypes.HEADER_MODE_INSERT;
            }
          // fall through
          case 155: break;
          case 71:
            { return ImpexTypes.HEADER_MODE_REMOVE;
            }
          // fall through
          case 156: break;
          case 72:
            { return ImpexTypes.HEADER_MODE_UPDATE;
            }
          // fall through
          case 157: break;
          case 73:
            { return ImpexTypes.TARGET;
            }
          // fall through
          case 158: break;
          case 74:
            { return ImpexTypes.FIELD_VALUE_IGNORE;
            }
          // fall through
          case 159: break;
          case 75:
            { return ImpexTypes.FIELD_VALUE_EXPLODED_JAR_PREFIX;
            }
          // fall through
          case 160: break;
          case 76:
            { return ImpexTypes.PASSWORD;
            }
          // fall through
          case 161: break;
          case 77:
            { yybegin(SCRIPT_BODY); return ImpexTypes.GROOVY_MARKER;
            }
          // fall through
          case 162: break;
          case 78:
            { yypushback(4);
                                                                return ImpexTypes.FIELD_VALUE_HTTP_PREFIX;
            }
          // fall through
          case 163: break;
          case 79:
            { yybegin(SCRIPT_BODY); return ImpexTypes.JAVASCRIPT_MARKER;
            }
          // fall through
          case 164: break;
          case 80:
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_INSERT_UPDATE;
            }
          // fall through
          case 165: break;
          case 81:
            { return ImpexTypes.HEADER_MODE_INSERT_UPDATE;
            }
          // fall through
          case 166: break;
          case 82:
            { return ImpexTypes.MEMBEROFGROUPS;
            }
          // fall through
          case 167: break;
          case 83:
            { yybegin(YYINITIAL); return ImpexTypes.END_USERRIGHTS;
            }
          // fall through
          case 168: break;
          case 84:
            { yybegin(USER_RIGHTS_END); return ImpexTypes.END_USERRIGHTS;
            }
          // fall through
          case 169: break;
          case 85:
            { yybegin(USER_RIGHTS_START); return ImpexTypes.START_USERRIGHTS;
            }
          // fall through
          case 170: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
