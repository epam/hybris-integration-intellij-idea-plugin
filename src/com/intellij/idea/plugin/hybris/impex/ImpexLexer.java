// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Impex.flex

/*
 * This file is part of "hybris integration" plugin for Intellij IDEA.
 * Copyright (C) 2014-2016 Alexander Bartash <AlexanderBartash@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

package com.intellij.idea.plugin.hybris.impex;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.idea.plugin.hybris.impex.psi.ImpexTypes;
import com.intellij.psi.TokenType;
import com.intellij.psi.CustomHighlighterTokenType;


class ImpexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_MACRO_VALUE = 2;
  public static final int MACRO_DECLARATION = 4;
  public static final int HEADER_TYPE = 6;
  public static final int HEADER_LINE = 8;
  public static final int FIELD_VALUE = 10;
  public static final int BEAN_SHELL = 12;
  public static final int MODIFIERS_BLOCK = 14;
  public static final int WAITING_ATTR_OR_PARAM_VALUE = 16;
  public static final int HEADER_PARAMETERS = 18;
  public static final int MACRO_USAGE = 20;
  public static final int MACRO_CONFIG_USAGE = 22;
  public static final int WAITING_MACRO_CONFIG_USAGE = 24;
  public static final int USER_RIGHTS_START = 26;
  public static final int USER_RIGHTS_END = 28;
  public static final int USER_RIGHTS_HEADER_LINE = 30;
  public static final int USER_RIGHTS_WAIT_FOR_VALUE_LINE = 32;
  public static final int USER_RIGHTS_VALUE_LINE = 34;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10,  9,  9, 11, 11, 12, 12, 13, 13, 14, 14, 
    15, 15, 16, 16
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\2\u2000\1\u2100\7\u2000\1\u2200\1\u2300\1\u2400"+
    "\1\u2000\1\u2500\1\u2600\2\u2000\31\u1100\1\u2700\121\u1100\1\u2800"+
    "\4\u1100\1\u2900\1\u1100\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00"+
    "\1\u2f00\53\u1100\1\u3000\10\u3100\31\u2000\1\u1100\1\u3200\1\u3300"+
    "\1\u1100\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u1100\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u2000\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u2000"+
    "\1\u5000\1\u5100\1\u5200\1\u2000\3\u1100\1\u5300\1\u5400\1\u5500"+
    "\12\u2000\4\u1100\1\u5600\17\u2000\2\u1100\1\u5700\41\u2000\2\u1100"+
    "\1\u5800\1\u5900\2\u2000\1\u5a00\1\u5b00\27\u1100\1\u5c00\2\u1100"+
    "\1\u5d00\45\u2000\1\u1100\1\u5e00\1\u5f00\11\u2000\1\u6000\24\u2000"+
    "\1\u6100\1\u6200\1\u2000\1\u6300\1\u6400\1\u6500\1\u6600\2\u2000"+
    "\1\u6700\5\u2000\1\u6800\1\u6900\1\u6a00\5\u2000\1\u6b00\1\u6c00"+
    "\4\u2000\1\u6d00\2\u2000\1\u6e00\16\u2000\246\u1100\1\u6f00\20\u1100"+
    "\1\u7000\1\u7100\25\u1100\1\u7200\34\u1100\1\u7300\14\u2000\2\u1100"+
    "\1\u7400\u0b06\u2000\1\u2800\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\0\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\0\1\15\1\16\1\17\1\20\1\21\12\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\44"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\44\1\60"+
    "\1\61\1\62\1\63\1\64\1\0\1\65\1\0\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\44"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\44\1\60"+
    "\1\61\1\0\1\66\10\0\1\3\32\0\1\67\11\0"+
    "\1\70\12\0\1\70\4\0\1\70\5\0\27\70\1\0"+
    "\37\70\1\0\70\70\2\71\115\70\1\72\u0142\70\4\0"+
    "\14\70\16\0\5\70\7\0\1\70\1\0\1\70\21\0"+
    "\165\70\1\0\2\70\2\0\4\70\1\0\1\70\6\0"+
    "\1\70\1\0\3\70\1\0\1\70\1\0\24\70\1\0"+
    "\123\70\1\0\213\70\1\0\255\70\1\0\46\70\2\0"+
    "\1\70\6\0\51\70\10\0\55\70\1\0\1\70\1\0"+
    "\2\70\1\0\2\70\1\0\1\70\10\0\33\70\4\0"+
    "\4\70\35\0\13\70\5\0\112\70\4\0\146\70\1\0"+
    "\10\70\2\0\12\70\1\0\23\70\2\0\1\70\20\0"+
    "\73\70\2\0\145\70\16\0\66\70\4\0\1\70\2\0"+
    "\1\70\2\0\56\70\22\0\34\70\4\0\13\70\65\0"+
    "\25\70\1\0\10\70\25\0\17\70\1\0\201\70\2\0"+
    "\12\70\1\0\23\70\1\0\10\70\2\0\2\70\2\0"+
    "\26\70\1\0\7\70\1\0\1\70\3\0\4\70\2\0"+
    "\11\70\2\0\2\70\2\0\4\70\10\0\1\70\4\0"+
    "\2\70\1\0\5\70\2\0\14\70\12\0\1\70\1\0"+
    "\1\70\2\0\3\70\1\0\6\70\4\0\2\70\2\0"+
    "\26\70\1\0\7\70\1\0\2\70\1\0\2\70\1\0"+
    "\2\70\2\0\1\70\1\0\5\70\4\0\2\70\2\0"+
    "\3\70\3\0\1\70\7\0\4\70\1\0\1\70\7\0"+
    "\20\70\13\0\3\70\1\0\11\70\1\0\3\70\1\0"+
    "\26\70\1\0\7\70\1\0\2\70\1\0\5\70\2\0"+
    "\12\70\1\0\3\70\1\0\3\70\2\0\1\70\17\0"+
    "\4\70\2\0\12\70\11\0\7\70\1\0\3\70\1\0"+
    "\10\70\2\0\2\70\2\0\26\70\1\0\7\70\1\0"+
    "\2\70\1\0\5\70\2\0\11\70\2\0\2\70\2\0"+
    "\3\70\10\0\2\70\4\0\2\70\1\0\5\70\2\0"+
    "\12\70\1\0\1\70\20\0\2\70\1\0\6\70\3\0"+
    "\3\70\1\0\4\70\3\0\2\70\1\0\1\70\1\0"+
    "\2\70\3\0\2\70\3\0\3\70\3\0\14\70\4\0"+
    "\5\70\3\0\3\70\1\0\4\70\2\0\1\70\6\0"+
    "\1\70\16\0\12\70\20\0\15\70\1\0\3\70\1\0"+
    "\27\70\1\0\20\70\3\0\10\70\1\0\3\70\1\0"+
    "\4\70\7\0\2\70\1\0\3\70\5\0\4\70\2\0"+
    "\12\70\20\0\4\70\1\0\10\70\1\0\3\70\1\0"+
    "\27\70\1\0\12\70\1\0\5\70\2\0\11\70\1\0"+
    "\3\70\1\0\4\70\7\0\2\70\7\0\1\70\1\0"+
    "\4\70\2\0\12\70\1\0\2\70\15\0\4\70\1\0"+
    "\10\70\1\0\3\70\1\0\63\70\1\0\3\70\1\0"+
    "\5\70\5\0\4\70\7\0\5\70\2\0\12\70\12\0"+
    "\6\70\2\0\2\70\1\0\22\70\3\0\30\70\1\0"+
    "\11\70\1\0\1\70\2\0\7\70\3\0\1\70\4\0"+
    "\6\70\1\0\1\70\1\0\10\70\6\0\12\70\2\0"+
    "\2\70\15\0\72\70\5\0\17\70\1\0\12\70\47\0"+
    "\2\70\1\0\1\70\1\0\5\70\1\0\30\70\1\0"+
    "\1\70\1\0\27\70\2\0\5\70\1\0\1\70\1\0"+
    "\6\70\2\0\12\70\2\0\4\70\40\0\1\70\27\0"+
    "\2\70\6\0\12\70\13\0\1\70\1\0\1\70\1\0"+
    "\1\70\4\0\12\70\1\0\44\70\4\0\24\70\1\0"+
    "\22\70\1\0\44\70\11\0\1\70\71\0\112\70\6\0"+
    "\116\70\2\0\46\70\1\0\1\70\5\0\1\70\2\0"+
    "\53\70\1\0\u014d\70\1\0\4\70\2\0\7\70\1\0"+
    "\1\70\1\0\4\70\2\0\51\70\1\0\4\70\2\0"+
    "\41\70\1\0\4\70\2\0\7\70\1\0\1\70\1\0"+
    "\4\70\2\0\17\70\1\0\71\70\1\0\4\70\2\0"+
    "\103\70\2\0\3\70\40\0\20\70\20\0\126\70\2\0"+
    "\6\70\3\0\u016c\70\2\0\21\70\1\67\32\70\5\0"+
    "\113\70\3\0\13\70\7\0\15\70\1\0\7\70\13\0"+
    "\25\70\13\0\24\70\14\0\15\70\1\0\3\70\1\0"+
    "\2\70\14\0\124\70\3\0\1\70\4\0\2\70\2\0"+
    "\12\70\41\0\3\70\2\0\12\70\6\0\131\70\7\0"+
    "\53\70\5\0\106\70\12\0\37\70\1\0\14\70\4\0"+
    "\14\70\12\0\50\70\2\0\5\70\13\0\54\70\4\0"+
    "\32\70\6\0\12\70\46\0\34\70\4\0\77\70\1\0"+
    "\35\70\2\0\13\70\6\0\12\70\15\0\1\70\10\0"+
    "\17\70\101\0\114\70\4\0\12\70\21\0\11\70\14\0"+
    "\164\70\14\0\70\70\10\0\12\70\3\0\61\70\2\0"+
    "\11\70\7\0\53\70\2\0\3\70\20\0\3\70\1\0"+
    "\47\70\5\0\372\70\1\0\33\70\2\0\6\70\2\0"+
    "\46\70\2\0\6\70\2\0\10\70\1\0\1\70\1\0"+
    "\1\70\1\0\1\70\1\0\37\70\2\0\65\70\1\0"+
    "\7\70\1\0\1\70\3\0\3\70\1\0\7\70\3\0"+
    "\4\70\2\0\6\70\4\0\15\70\5\0\3\70\1\0"+
    "\7\70\3\0\13\67\35\0\2\3\5\0\1\67\17\0"+
    "\2\70\23\0\1\70\12\0\1\67\21\0\1\70\15\0"+
    "\1\70\20\0\15\70\63\0\41\70\21\0\1\70\4\0"+
    "\1\70\2\0\12\70\1\0\1\70\3\0\5\70\6\0"+
    "\1\70\1\0\1\70\1\0\1\70\1\0\4\70\1\0"+
    "\13\70\2\0\4\70\5\0\5\70\4\0\1\70\21\0"+
    "\51\70\u022d\0\64\70\26\0\57\70\1\0\57\70\1\0"+
    "\205\70\6\0\11\70\14\0\46\70\1\0\1\70\5\0"+
    "\1\70\2\0\70\70\7\0\1\70\17\0\30\70\11\0"+
    "\7\70\1\0\7\70\1\0\7\70\1\0\7\70\1\0"+
    "\7\70\1\0\7\70\1\0\7\70\1\0\7\70\1\0"+
    "\40\70\57\0\1\70\320\0\1\67\4\0\3\70\31\0"+
    "\17\70\1\0\5\70\2\0\5\70\4\0\126\70\2\0"+
    "\2\70\2\0\3\70\1\0\132\70\1\0\4\70\5\0"+
    "\53\70\1\0\136\70\21\0\33\70\65\0\306\70\112\0"+
    "\360\70\20\0\215\70\103\0\56\70\2\0\15\70\3\0"+
    "\34\70\24\0\63\70\1\0\12\70\1\0\163\70\45\0"+
    "\11\70\2\0\147\70\2\0\65\70\2\0\5\70\60\0"+
    "\61\70\30\0\64\70\14\0\106\70\12\0\12\70\6\0"+
    "\30\70\3\0\1\70\1\0\61\70\2\0\44\70\14\0"+
    "\35\70\3\0\101\70\16\0\13\70\6\0\37\70\1\0"+
    "\67\70\11\0\16\70\2\0\12\70\6\0\27\70\3\0"+
    "\111\70\30\0\3\70\2\0\20\70\2\0\5\70\12\0"+
    "\6\70\2\0\6\70\2\0\6\70\11\0\7\70\1\0"+
    "\7\70\1\0\53\70\1\0\14\70\10\0\173\70\1\0"+
    "\2\70\2\0\12\70\6\0\244\70\14\0\27\70\4\0"+
    "\61\70\4\0\u0100\73\156\70\2\0\152\70\46\0\7\70"+
    "\14\0\5\70\5\0\14\70\1\0\15\70\1\0\5\70"+
    "\1\0\1\70\1\0\2\70\1\0\2\70\1\0\154\70"+
    "\41\0\153\70\22\0\100\70\2\0\66\70\50\0\14\70"+
    "\4\0\20\70\20\0\20\70\3\0\2\70\30\0\3\70"+
    "\40\0\5\70\1\0\207\70\23\0\12\70\7\0\32\70"+
    "\4\0\1\70\1\0\32\70\13\0\131\70\3\0\6\70"+
    "\2\0\6\70\2\0\6\70\2\0\3\70\43\0\14\70"+
    "\1\0\32\70\1\0\23\70\1\0\2\70\1\0\17\70"+
    "\2\0\16\70\42\0\173\70\105\0\65\70\210\0\1\70"+
    "\202\0\35\70\3\0\61\70\17\0\1\70\37\0\40\70"+
    "\15\0\36\70\5\0\53\70\5\0\36\70\2\0\44\70"+
    "\4\0\10\70\1\0\5\70\52\0\236\70\2\0\12\70"+
    "\6\0\44\70\4\0\44\70\4\0\50\70\10\0\64\70"+
    "\234\0\67\70\11\0\26\70\12\0\10\70\230\0\6\70"+
    "\2\0\1\70\1\0\54\70\1\0\2\70\3\0\1\70"+
    "\2\0\27\70\12\0\27\70\11\0\37\70\101\0\23\70"+
    "\1\0\2\70\12\0\26\70\12\0\32\70\106\0\70\70"+
    "\6\0\2\70\100\0\4\70\1\0\2\70\5\0\10\70"+
    "\1\0\3\70\1\0\35\70\2\0\3\70\4\0\1\70"+
    "\40\0\35\70\3\0\35\70\43\0\10\70\1\0\36\70"+
    "\31\0\66\70\12\0\26\70\12\0\23\70\15\0\22\70"+
    "\156\0\111\70\67\0\63\70\15\0\63\70\15\0\50\70"+
    "\10\0\12\70\306\0\35\70\12\0\1\70\10\0\41\70"+
    "\217\0\27\70\11\0\107\70\37\0\12\70\17\0\74\70"+
    "\25\0\31\70\7\0\12\70\6\0\65\70\1\0\12\70"+
    "\4\0\3\70\11\0\44\70\2\0\1\70\11\0\105\70"+
    "\4\0\4\70\3\0\13\70\1\0\1\70\43\0\22\70"+
    "\1\0\45\70\6\0\1\70\101\0\7\70\1\0\1\70"+
    "\1\0\4\70\1\0\17\70\1\0\12\70\7\0\73\70"+
    "\5\0\12\70\6\0\4\70\1\0\10\70\2\0\2\70"+
    "\2\0\26\70\1\0\7\70\1\0\2\70\1\0\5\70"+
    "\1\0\12\70\2\0\2\70\2\0\3\70\2\0\1\70"+
    "\6\0\1\70\5\0\7\70\2\0\7\70\3\0\5\70"+
    "\213\0\113\70\5\0\12\70\4\0\2\70\40\0\106\70"+
    "\1\0\1\70\10\0\12\70\246\0\66\70\2\0\11\70"+
    "\27\0\6\70\42\0\101\70\3\0\1\70\13\0\12\70"+
    "\46\0\71\70\7\0\12\70\66\0\33\70\2\0\17\70"+
    "\4\0\12\70\306\0\73\70\145\0\112\70\25\0\1\70"+
    "\240\0\10\70\2\0\56\70\2\0\10\70\1\0\2\70"+
    "\33\0\77\70\10\0\1\70\10\0\112\70\3\0\1\70"+
    "\42\0\71\70\7\0\11\70\1\0\55\70\1\0\11\70"+
    "\17\0\12\70\30\0\36\70\2\0\26\70\1\0\16\70"+
    "\111\0\7\70\1\0\2\70\1\0\54\70\3\0\1\70"+
    "\1\0\2\70\1\0\11\70\10\0\12\70\6\0\6\70"+
    "\1\0\2\70\1\0\45\70\1\0\2\70\1\0\6\70"+
    "\7\0\12\70\u0136\0\27\70\11\0\232\70\146\0\157\70"+
    "\21\0\304\70\274\0\57\70\321\0\107\70\271\0\71\70"+
    "\7\0\37\70\1\0\12\70\146\0\36\70\2\0\5\70"+
    "\13\0\67\70\11\0\4\70\14\0\12\70\11\0\25\70"+
    "\5\0\23\70\260\0\100\70\200\0\113\70\4\0\71\70"+
    "\7\0\21\70\100\0\2\70\1\0\1\70\34\0\370\70"+
    "\10\0\363\70\15\0\37\70\61\0\3\70\21\0\4\70"+
    "\10\0\u018c\70\4\0\153\70\5\0\15\70\3\0\11\70"+
    "\7\0\12\70\3\0\2\70\306\0\5\70\3\0\6\70"+
    "\10\0\10\70\2\0\7\70\36\0\4\70\224\0\3\70"+
    "\273\0\125\70\1\0\107\70\1\0\2\70\2\0\1\70"+
    "\2\0\2\70\2\0\4\70\1\0\14\70\1\0\1\70"+
    "\1\0\7\70\1\0\101\70\1\0\4\70\2\0\10\70"+
    "\1\0\7\70\1\0\34\70\1\0\4\70\1\0\5\70"+
    "\1\0\1\70\3\0\7\70\1\0\u0154\70\2\0\31\70"+
    "\1\0\31\70\1\0\37\70\1\0\31\70\1\0\37\70"+
    "\1\0\31\70\1\0\37\70\1\0\31\70\1\0\37\70"+
    "\1\0\31\70\1\0\10\70\2\0\151\70\4\0\62\70"+
    "\10\0\1\70\16\0\1\70\26\0\5\70\1\0\17\70"+
    "\120\0\7\70\1\0\21\70\2\0\7\70\1\0\2\70"+
    "\1\0\5\70\325\0\55\70\3\0\16\70\2\0\12\70"+
    "\4\0\1\70\u0171\0\72\70\6\0\305\70\13\0\7\70"+
    "\51\0\114\70\4\0\12\70\246\0\4\70\1\0\33\70"+
    "\1\0\2\70\1\0\1\70\2\0\1\70\1\0\12\70"+
    "\1\0\4\70\1\0\1\70\1\0\1\70\6\0\1\70"+
    "\4\0\1\70\1\0\1\70\1\0\1\70\1\0\3\70"+
    "\1\0\2\70\1\0\1\70\2\0\1\70\1\0\1\70"+
    "\1\0\1\70\1\0\1\70\1\0\1\70\1\0\2\70"+
    "\1\0\1\70\2\0\4\70\1\0\7\70\1\0\4\70"+
    "\1\0\4\70\1\0\1\70\1\0\12\70\1\0\21\70"+
    "\5\0\3\70\1\0\5\70\1\0\21\70\164\0\32\70"+
    "\6\0\32\70\6\0\32\70\166\0\327\70\51\0\65\70"+
    "\13\0\336\70\2\0\u0182\70\16\0\u0131\70\37\0\36\70"+
    "\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29952];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\12\0\1\2\1\3\2\4\1\2\1\5"+
    "\1\2\1\6\1\7\3\6\1\2\4\10\1\11\1\12"+
    "\1\13\1\14\1\13\1\15\1\10\1\16\5\10\1\13"+
    "\4\10\1\13\1\17\1\10\1\20\1\10\1\21\1\22"+
    "\2\2\1\23\1\24\1\25\1\26\1\2\1\27\1\2"+
    "\1\30\4\31\1\32\1\13\1\31\1\15\1\33\1\34"+
    "\4\31\1\13\2\31\1\13\2\31\1\35\1\1\1\3"+
    "\1\1\1\2\1\36\1\37\1\40\1\41\4\42\1\13"+
    "\1\43\1\15\2\42\1\13\2\42\1\13\1\2\2\44"+
    "\2\45\2\46\1\5\1\2\1\47\1\50\4\47\2\51"+
    "\1\2\1\52\1\53\1\0\1\54\1\55\1\0\4\56"+
    "\1\0\3\6\1\0\2\57\1\0\1\60\1\15\2\10"+
    "\2\0\1\61\7\10\1\0\2\56\1\62\1\0\1\63"+
    "\1\0\2\64\2\0\1\65\2\0\2\31\1\0\1\13"+
    "\4\31\2\0\1\1\1\54\2\56\1\42\1\60\5\42"+
    "\2\66\2\0\5\47\2\0\1\67\1\0\2\56\1\0"+
    "\1\6\1\0\2\6\2\57\1\60\1\0\1\15\2\0"+
    "\2\10\1\0\1\10\1\0\4\10\2\56\1\70\1\0"+
    "\1\71\2\0\1\15\2\31\1\0\5\31\1\0\1\1"+
    "\2\56\1\60\1\42\1\15\4\42\2\66\2\0\2\47"+
    "\1\0\2\47\2\72\1\0\2\56\1\0\1\6\1\0"+
    "\2\6\1\57\2\0\1\10\1\0\1\10\1\0\1\13"+
    "\2\10\1\56\1\73\1\74\2\31\1\0\1\75\1\76"+
    "\1\56\1\42\1\66\2\0\2\47\1\0\1\47\1\77"+
    "\1\0\2\56\1\0\1\6\1\0\2\6\1\57\2\0"+
    "\1\10\1\0\1\10\1\0\2\10\1\56\1\31\1\100"+
    "\1\56\1\42\1\66\2\0\2\47\1\0\1\47\2\0"+
    "\1\56\1\0\2\101\1\102\1\103\2\0\1\104\2\105"+
    "\1\106\1\107\1\0\1\42\2\0\2\47\1\0\1\110"+
    "\2\0\1\56\1\0\1\6\3\0\1\10\2\0\1\42"+
    "\2\0\2\47\3\0\1\56\1\0\1\6\2\0\1\111"+
    "\1\10\2\0\1\42\2\0\1\47\2\112\1\0\2\56"+
    "\1\0\1\6\1\0\1\10\2\0\1\47\1\0\1\56"+
    "\1\0\1\6\1\0\1\10\2\0\1\47\1\0\1\56"+
    "\1\0\1\6\1\0\1\10\2\0\1\47\1\0\1\56"+
    "\1\0\1\6\1\0\1\10\2\0\1\47\1\0\1\56"+
    "\1\0\2\113\2\114\1\0\1\47\1\0\1\56\2\0"+
    "\2\115\1\0\1\56\1\0\1\116\1\117\1\56\1\0"+
    "\2\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[453];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384"+
    "\0\u03c0\0\u03fc\0\u0438\0\u03fc\0\u0474\0\u04b0\0\u04ec\0\u0528"+
    "\0\u0564\0\u03fc\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u03fc\0\u04b0"+
    "\0\u0690\0\u06cc\0\u03fc\0\u03fc\0\u0708\0\u03fc\0\u0744\0\u0780"+
    "\0\u07bc\0\u03fc\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u08e8\0\u0924"+
    "\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0834\0\u03fc\0\u0a50\0\u03fc"+
    "\0\u0a8c\0\u03fc\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u03fc\0\u03fc"+
    "\0\u03fc\0\u07f8\0\u03fc\0\u0bb8\0\u03fc\0\u03fc\0\u04b0\0\u0b04"+
    "\0\u0bf4\0\u03fc\0\u0c30\0\u0c6c\0\u0ca8\0\u03fc\0\u03fc\0\u07bc"+
    "\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0ce4\0\u0e4c"+
    "\0\u0bb8\0\u03fc\0\u0e88\0\u0ec4\0\u0f00\0\u06cc\0\u03fc\0\u0f3c"+
    "\0\u03fc\0\u03fc\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u03fc"+
    "\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u0f78\0\u120c"+
    "\0\u03fc\0\u1248\0\u03fc\0\u1284\0\u03fc\0\u12c0\0\u12fc\0\u1338"+
    "\0\u1374\0\u03fc\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u03fc\0\u14a0"+
    "\0\u14dc\0\u03fc\0\u0ce4\0\u04b0\0\u1518\0\u12fc\0\u1554\0\u1590"+
    "\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770"+
    "\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c\0\u18d8\0\u1914\0\u1950"+
    "\0\u198c\0\u07f8\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4"+
    "\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u0b40\0\u1c20\0\u03fc\0\u1c5c"+
    "\0\u03fc\0\u1c98\0\u1cd4\0\u1d10\0\u03fc\0\u1d4c\0\u1d88\0\u1dc4"+
    "\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4"+
    "\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184"+
    "\0\u21c0\0\u21fc\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u2364"+
    "\0\u23a0\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508\0\u03fc"+
    "\0\u2544\0\u2580\0\u25bc\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u26e8"+
    "\0\u2724\0\u2760\0\u03fc\0\u279c\0\u27d8\0\u2814\0\u2850\0\u288c"+
    "\0\u28c8\0\u2904\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c"+
    "\0\u2aa8\0\u2ae4\0\u03fc\0\u2b20\0\u03fc\0\u2b5c\0\u0c6c\0\u1d88"+
    "\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c"+
    "\0\u2d78\0\u2db4\0\u2df0\0\u2e2c\0\u0f78\0\u2e68\0\u2184\0\u2ea4"+
    "\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0\0\u300c\0\u3048\0\u3084"+
    "\0\u30c0\0\u30fc\0\u3138\0\u3174\0\u1374\0\u03fc\0\u31b0\0\u31ec"+
    "\0\u3228\0\u3264\0\u32a0\0\u32dc\0\u3318\0\u3354\0\u3390\0\u33cc"+
    "\0\u3408\0\u3444\0\u3480\0\u34bc\0\u34f8\0\u03fc\0\u3534\0\u3570"+
    "\0\u35ac\0\u03fc\0\u2b5c\0\u35e8\0\u3624\0\u3660\0\u03fc\0\u03fc"+
    "\0\u369c\0\u36d8\0\u3714\0\u3750\0\u378c\0\u37c8\0\u3804\0\u3840"+
    "\0\u387c\0\u1374\0\u38b8\0\u38f4\0\u3930\0\u396c\0\u39a8\0\u39e4"+
    "\0\u3a20\0\u3a5c\0\u3a98\0\u3ad4\0\u3b10\0\u3b4c\0\u3b88\0\u3bc4"+
    "\0\u3c00\0\u3c3c\0\u3c78\0\u3cb4\0\u3cf0\0\u03fc\0\u3d2c\0\u3d68"+
    "\0\u3da4\0\u3de0\0\u3e1c\0\u3e58\0\u3e94\0\u3ed0\0\u3f0c\0\u3f48"+
    "\0\u3f84\0\u3fc0\0\u3ffc\0\u4038\0\u4074\0\u0564\0\u0564\0\u40b0"+
    "\0\u40ec\0\u03fc\0\u4128\0\u4164\0\u0834\0\u0834\0\u41a0\0\u41dc"+
    "\0\u4218\0\u4254\0\u4290\0\u42cc\0\u4308\0\u1374\0\u4344\0\u4380"+
    "\0\u43bc\0\u43f8\0\u4434\0\u4470\0\u44ac\0\u44e8\0\u4524\0\u4560"+
    "\0\u459c\0\u45d8\0\u4614\0\u4650\0\u468c\0\u46c8\0\u4704\0\u4740"+
    "\0\u477c\0\u47b8\0\u47f4\0\u4830\0\u486c\0\u2724\0\u03fc\0\u48a8"+
    "\0\u48e4\0\u2aa8\0\u2df0\0\u2f94\0\u4920\0\u495c\0\u1374\0\u03fc"+
    "\0\u4998\0\u49d4\0\u4a10\0\u4a4c\0\u4a88\0\u4ac4\0\u4b00\0\u4b3c"+
    "\0\u4b78\0\u4bb4\0\u4bf0\0\u4c2c\0\u4c68\0\u4ca4\0\u4ce0\0\u4d1c"+
    "\0\u4d58\0\u4d94\0\u4dd0\0\u4e0c\0\u4e48\0\u4e84\0\u4ec0\0\u4efc"+
    "\0\u4f38\0\u4f74\0\u4fb0\0\u4fec\0\u5028\0\u5064\0\u50a0\0\u50dc"+
    "\0\u5118\0\u5154\0\u5190\0\u51cc\0\u5208\0\u5244\0\u5280\0\u52bc"+
    "\0\u0564\0\u03fc\0\u0834\0\u03fc\0\u52f8\0\u5334\0\u5370\0\u53ac"+
    "\0\u53e8\0\u5424\0\u1374\0\u03fc\0\u5460\0\u549c\0\u54d8\0\u03fc"+
    "\0\u03fc\0\u5514\0\u5550\0\u15cc\0\u1554";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[453];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\22\1\23\1\24\1\0\1\25\1\26\1\27\1\30"+
    "\7\22\1\31\2\22\1\31\1\22\1\32\5\22\10\31"+
    "\1\33\7\31\1\34\2\31\1\35\4\31\3\22\1\31"+
    "\3\22\1\36\1\22\1\0\1\37\1\23\1\24\1\37"+
    "\1\25\1\40\1\37\1\41\2\37\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\2\37\1\50\2\37\1\51\1\52"+
    "\2\37\1\53\5\54\1\55\2\54\1\56\1\57\3\54"+
    "\1\60\2\54\1\61\1\54\1\62\1\63\1\54\1\64"+
    "\1\65\1\54\1\66\1\67\1\70\1\54\3\37\1\71"+
    "\2\37\1\22\1\23\1\24\1\0\1\25\21\22\1\72"+
    "\44\22\1\0\1\22\1\23\1\24\1\0\1\25\12\22"+
    "\1\73\2\22\1\73\7\22\30\73\3\22\1\73\5\22"+
    "\1\0\1\22\1\23\1\24\1\0\1\25\2\22\1\74"+
    "\1\22\1\75\1\22\1\43\1\44\1\22\1\46\1\76"+
    "\1\77\1\22\1\76\1\22\1\100\1\22\1\101\2\22"+
    "\1\102\30\76\1\103\1\104\1\70\1\76\1\105\4\22"+
    "\1\0\1\106\1\23\1\24\1\106\1\25\1\107\1\106"+
    "\1\110\3\106\1\111\1\106\1\45\1\112\1\113\1\106"+
    "\1\114\1\115\1\116\1\117\1\120\4\106\5\121\1\122"+
    "\3\121\1\123\3\121\1\124\4\121\1\125\2\121\1\126"+
    "\1\127\1\130\1\106\1\131\1\106\1\121\1\132\5\106"+
    "\1\133\1\134\1\24\1\133\1\25\1\135\66\133\1\22"+
    "\1\23\1\24\1\0\1\25\1\26\1\22\1\74\2\22"+
    "\1\136\3\22\1\137\2\140\1\22\1\140\3\22\1\101"+
    "\3\22\30\140\2\22\1\141\1\140\1\142\4\22\1\0"+
    "\1\143\1\23\1\24\1\143\1\25\1\144\1\143\1\145"+
    "\2\143\1\146\2\143\1\147\1\150\1\147\2\143\1\151"+
    "\14\143\1\152\3\143\1\153\3\143\1\154\4\143\1\155"+
    "\2\143\1\156\1\157\3\143\1\141\7\143\1\22\1\23"+
    "\3\0\66\22\1\0\1\22\1\23\1\24\1\0\1\25"+
    "\2\22\1\160\63\22\1\0\1\161\1\23\1\24\1\0"+
    "\1\25\2\161\1\162\63\161\1\0\1\22\1\23\1\163"+
    "\1\0\1\164\17\22\1\100\46\22\1\0\1\22\1\23"+
    "\1\24\1\0\1\25\17\22\1\100\46\22\1\0\1\22"+
    "\1\23\1\165\1\0\1\166\1\22\1\167\1\170\7\22"+
    "\1\171\2\22\1\171\1\22\1\172\5\22\14\171\1\173"+
    "\2\171\1\174\2\171\1\175\1\176\4\171\3\22\1\171"+
    "\5\22\1\0\1\22\1\23\1\177\1\0\1\200\2\22"+
    "\1\170\7\22\1\171\2\22\1\171\1\22\1\100\5\22"+
    "\14\171\1\173\2\171\1\174\2\171\1\175\1\176\4\171"+
    "\3\22\1\171\5\22\1\0\1\22\1\23\1\177\1\0"+
    "\1\200\1\22\1\167\1\201\5\22\1\202\1\46\1\203"+
    "\1\77\1\22\1\121\1\22\1\117\5\22\30\121\3\22"+
    "\1\121\5\22\76\0\1\23\74\0\1\24\71\0\5\204"+
    "\1\205\66\204\2\167\1\0\1\167\1\0\3\167\1\206"+
    "\63\167\1\0\1\207\11\0\2\210\2\0\1\211\1\210"+
    "\1\0\1\211\7\0\2\211\1\212\16\211\1\213\6\211"+
    "\3\0\1\211\2\0\2\207\1\214\20\0\1\31\2\0"+
    "\1\31\7\0\30\31\3\0\1\31\25\0\1\31\2\0"+
    "\1\31\7\0\15\31\1\215\12\31\3\0\1\31\25\0"+
    "\1\31\2\0\1\31\7\0\4\31\1\216\23\31\3\0"+
    "\1\31\25\0\1\31\2\0\1\31\7\0\17\31\1\217"+
    "\10\31\3\0\1\31\55\0\1\220\43\0\1\221\2\0"+
    "\1\221\7\0\2\221\1\222\25\221\3\0\1\221\6\0"+
    "\2\223\1\0\1\223\1\0\5\223\1\224\61\223\22\0"+
    "\1\225\70\0\1\54\1\226\1\0\1\50\7\0\30\54"+
    "\3\0\1\54\25\0\1\54\1\227\1\0\1\50\7\0"+
    "\30\54\3\0\1\54\50\0\1\230\4\0\1\231\21\0"+
    "\1\230\21\0\1\232\2\0\1\232\7\0\30\232\3\0"+
    "\1\232\25\0\1\54\1\226\1\0\1\54\7\0\30\54"+
    "\3\0\1\54\25\0\1\54\1\226\1\0\1\54\7\0"+
    "\1\233\27\54\3\0\1\54\25\0\1\54\1\226\1\0"+
    "\1\54\7\0\15\54\1\234\12\54\3\0\1\54\25\0"+
    "\1\54\1\226\1\0\1\54\7\0\1\65\27\54\3\0"+
    "\1\54\25\0\1\54\1\226\1\0\1\54\7\0\4\54"+
    "\1\235\23\54\3\0\1\54\25\0\1\54\1\226\1\0"+
    "\1\54\7\0\4\54\1\236\23\54\3\0\1\54\25\0"+
    "\1\54\1\226\1\0\1\54\7\0\20\54\1\237\7\54"+
    "\3\0\1\54\25\0\1\54\1\226\1\0\1\54\7\0"+
    "\17\54\1\240\10\54\3\0\1\54\25\0\1\54\1\226"+
    "\1\0\1\54\7\0\1\241\27\54\3\0\1\54\7\0"+
    "\4\67\56\0\1\67\3\0\1\67\53\0\1\242\43\0"+
    "\1\73\2\0\1\73\7\0\30\73\3\0\1\73\25\0"+
    "\1\243\2\0\1\243\7\0\2\243\1\244\25\243\3\0"+
    "\1\243\25\0\1\245\2\0\1\245\7\0\30\245\3\0"+
    "\1\245\7\0\1\246\11\0\1\247\3\0\1\76\1\250"+
    "\1\0\1\76\6\0\1\250\30\76\3\0\1\76\10\0"+
    "\1\251\1\0\1\252\104\0\1\253\1\0\1\254\73\0"+
    "\1\121\2\0\1\115\4\0\1\255\2\0\30\121\3\0"+
    "\1\121\25\0\1\256\2\0\1\256\7\0\30\256\3\0"+
    "\1\256\25\0\1\121\1\257\1\0\1\115\7\0\30\121"+
    "\3\0\1\121\25\0\1\121\2\0\1\121\7\0\30\121"+
    "\3\0\1\121\25\0\1\121\2\0\1\121\7\0\1\260"+
    "\7\121\1\261\17\121\3\0\1\121\3\0\1\262\21\0"+
    "\1\121\2\0\1\121\7\0\1\263\27\121\3\0\1\121"+
    "\25\0\1\121\2\0\1\121\7\0\4\121\1\264\23\121"+
    "\3\0\1\121\25\0\1\121\2\0\1\121\7\0\20\121"+
    "\1\265\7\121\3\0\1\121\25\0\1\121\2\0\1\121"+
    "\7\0\1\266\27\121\3\0\1\121\25\0\1\121\2\0"+
    "\1\121\7\0\10\121\1\267\17\121\3\0\1\121\3\0"+
    "\1\270\2\0\2\133\1\0\1\133\1\0\70\133\1\134"+
    "\1\0\1\133\1\0\67\133\2\135\1\271\1\135\1\271"+
    "\1\272\66\135\17\0\2\140\1\0\1\140\7\0\30\140"+
    "\3\0\1\140\6\0\1\143\2\0\1\143\1\0\11\143"+
    "\1\0\45\143\1\0\7\143\1\144\2\204\1\144\1\204"+
    "\1\273\10\144\1\204\45\144\1\204\7\144\1\143\2\0"+
    "\1\143\1\0\11\143\1\0\1\274\2\143\1\274\7\143"+
    "\2\274\1\275\25\274\2\143\1\0\1\274\6\143\1\276"+
    "\1\223\1\0\1\276\1\0\5\276\1\277\3\276\1\223"+
    "\45\276\1\223\7\276\1\143\2\0\1\143\1\0\11\143"+
    "\1\0\3\143\1\151\41\143\1\0\10\143\2\0\1\143"+
    "\1\0\11\143\1\0\1\143\1\300\1\143\1\151\41\143"+
    "\1\0\10\143\2\0\1\143\1\0\11\143\1\0\13\143"+
    "\1\301\31\143\1\0\10\143\2\0\1\143\1\0\11\143"+
    "\1\0\13\143\1\157\31\143\1\0\10\143\2\0\1\143"+
    "\1\0\11\143\1\0\17\143\1\302\25\143\1\0\10\143"+
    "\2\0\1\143\1\0\11\143\1\0\33\143\1\303\11\143"+
    "\1\0\10\143\2\0\1\143\1\0\11\143\1\0\13\143"+
    "\1\304\31\143\1\0\7\143\17\0\1\305\2\0\1\305"+
    "\7\0\2\305\1\306\25\305\3\0\1\305\42\0\1\307"+
    "\41\0\1\163\73\0\1\165\71\0\2\167\1\0\1\167"+
    "\1\0\67\167\36\0\1\310\54\0\1\171\2\0\1\171"+
    "\7\0\30\171\3\0\1\171\25\0\1\171\2\0\1\171"+
    "\7\0\4\171\1\311\23\171\3\0\1\171\25\0\1\171"+
    "\2\0\1\171\7\0\1\312\27\171\3\0\1\171\25\0"+
    "\1\171\2\0\1\171\7\0\1\313\25\171\1\314\1\171"+
    "\3\0\1\171\25\0\1\171\2\0\1\171\7\0\10\171"+
    "\1\315\17\171\3\0\1\171\3\0\1\316\4\0\1\177"+
    "\127\0\1\317\42\0\1\204\67\0\1\207\15\0\1\207"+
    "\2\0\1\207\3\0\1\320\3\0\30\207\1\0\1\321"+
    "\1\0\1\207\2\0\3\207\14\0\2\210\2\0\2\210"+
    "\1\0\1\210\7\0\30\210\3\0\1\210\7\0\1\207"+
    "\11\0\2\210\2\0\1\211\1\210\1\0\1\211\3\0"+
    "\1\320\3\0\30\211\1\0\1\321\1\0\1\211\2\0"+
    "\3\207\2\0\1\207\11\0\2\210\2\0\1\211\1\210"+
    "\1\0\1\211\3\0\1\320\3\0\16\211\1\322\11\211"+
    "\1\0\1\321\1\0\1\211\2\0\3\207\2\0\1\207"+
    "\11\0\2\210\2\0\1\211\1\210\1\0\1\211\3\0"+
    "\1\320\3\0\22\211\1\323\5\211\1\0\1\321\1\0"+
    "\1\211\2\0\3\207\2\0\1\207\15\0\1\207\2\0"+
    "\1\207\3\0\1\320\3\0\22\207\1\324\5\207\1\0"+
    "\1\321\1\0\1\207\2\0\3\207\20\0\1\31\2\0"+
    "\1\31\7\0\21\31\1\325\6\31\3\0\1\31\4\0"+
    "\1\326\20\0\1\31\2\0\1\31\7\0\14\31\1\327"+
    "\13\31\3\0\1\31\25\0\1\31\2\0\1\31\7\0"+
    "\3\31\1\330\24\31\3\0\1\31\61\0\1\326\16\0"+
    "\1\326\20\0\1\221\1\331\1\0\1\221\7\0\30\221"+
    "\3\0\1\221\25\0\1\221\1\331\1\0\1\221\7\0"+
    "\16\221\1\332\11\221\3\0\1\221\6\0\2\223\1\0"+
    "\1\223\1\0\5\223\1\333\61\223\12\0\1\334\101\0"+
    "\1\257\1\0\1\225\70\0\1\54\2\0\1\54\7\0"+
    "\30\54\3\0\1\54\25\0\1\54\2\0\1\335\7\0"+
    "\30\54\3\0\1\54\46\0\1\336\110\0\1\337\35\0"+
    "\1\54\1\226\1\0\1\54\7\0\13\54\1\340\14\54"+
    "\3\0\1\54\25\0\1\54\1\226\1\0\1\54\7\0"+
    "\21\54\1\341\6\54\3\0\1\54\4\0\1\342\20\0"+
    "\1\54\1\226\1\0\1\54\7\0\10\54\1\343\17\54"+
    "\3\0\1\54\3\0\1\344\21\0\1\54\1\226\1\0"+
    "\1\54\7\0\14\54\1\345\13\54\3\0\1\54\25\0"+
    "\1\54\1\226\1\0\1\54\7\0\23\54\1\346\4\54"+
    "\3\0\1\54\25\0\1\54\1\226\1\0\1\54\7\0"+
    "\3\54\1\347\24\54\3\0\1\54\25\0\1\54\1\226"+
    "\1\0\1\54\7\0\7\54\1\350\20\54\3\0\1\54"+
    "\61\0\1\342\16\0\1\342\20\0\1\243\1\351\1\0"+
    "\1\243\7\0\30\243\3\0\1\243\25\0\1\243\1\351"+
    "\1\0\1\243\7\0\16\243\1\352\11\243\3\0\1\243"+
    "\7\0\1\246\11\0\1\247\77\0\1\76\2\0\1\76"+
    "\7\0\30\76\3\0\1\76\10\0\1\251\105\0\1\353"+
    "\13\0\1\354\57\0\1\355\76\0\1\256\1\356\1\357"+
    "\1\256\7\0\30\256\3\0\1\256\30\0\1\360\70\0"+
    "\1\121\2\0\1\121\7\0\13\121\1\361\14\121\3\0"+
    "\1\121\25\0\1\121\2\0\1\121\7\0\13\121\1\362"+
    "\14\121\3\0\1\121\53\0\1\363\45\0\1\121\2\0"+
    "\1\121\7\0\20\121\1\364\7\121\3\0\1\121\25\0"+
    "\1\121\2\0\1\121\7\0\10\121\1\365\17\121\3\0"+
    "\1\121\3\0\1\344\21\0\1\121\2\0\1\121\7\0"+
    "\23\121\1\366\4\121\3\0\1\121\25\0\1\121\2\0"+
    "\1\121\7\0\7\121\1\367\20\121\3\0\1\121\25\0"+
    "\1\121\2\0\1\121\7\0\17\121\1\370\10\121\3\0"+
    "\1\121\57\0\1\371\22\0\5\271\1\372\66\271\2\133"+
    "\1\0\1\133\1\0\1\135\66\133\1\143\2\0\1\143"+
    "\1\0\1\144\10\143\1\0\45\143\1\0\10\143\2\0"+
    "\1\143\1\0\11\143\1\0\1\274\1\373\1\143\1\274"+
    "\7\143\30\274\2\143\1\0\1\274\7\143\2\0\1\143"+
    "\1\0\11\143\1\0\1\274\1\373\1\143\1\274\7\143"+
    "\16\274\1\374\11\274\2\143\1\0\1\274\6\143\1\276"+
    "\1\223\1\0\1\276\1\0\5\276\1\375\3\276\1\223"+
    "\45\276\1\223\7\276\1\143\2\0\1\143\1\0\5\143"+
    "\1\376\3\143\1\0\45\143\1\0\10\143\2\0\1\143"+
    "\1\0\11\143\1\0\3\143\1\377\41\143\1\0\10\143"+
    "\2\0\1\143\1\0\11\143\1\0\26\143\1\u0100\16\143"+
    "\1\0\10\143\2\0\1\143\1\0\11\143\1\0\23\143"+
    "\1\u0101\21\143\1\0\4\143\1\u0101\3\143\2\0\1\143"+
    "\1\0\11\143\1\0\36\143\1\u0102\6\143\1\0\10\143"+
    "\2\0\1\143\1\0\11\143\1\0\22\143\1\u0103\22\143"+
    "\1\0\7\143\17\0\1\305\1\u0104\1\0\1\305\7\0"+
    "\30\305\3\0\1\305\25\0\1\305\1\u0104\1\0\1\305"+
    "\7\0\16\305\1\u0105\11\305\3\0\1\305\56\0\1\u0106"+
    "\72\0\1\u0107\43\0\1\171\2\0\1\171\7\0\14\171"+
    "\1\u0108\13\171\3\0\1\171\25\0\1\171\2\0\1\171"+
    "\7\0\21\171\1\u0109\6\171\3\0\1\171\4\0\1\u010a"+
    "\20\0\1\171\2\0\1\171\7\0\20\171\1\u010b\7\171"+
    "\3\0\1\171\25\0\1\171\2\0\1\171\7\0\17\171"+
    "\1\u010c\10\171\3\0\1\171\25\0\1\171\2\0\1\171"+
    "\7\0\3\171\1\u010d\24\171\3\0\1\171\43\0\1\u010e"+
    "\105\0\1\u010f\25\0\4\321\12\0\1\207\2\0\1\207"+
    "\3\0\1\320\3\0\30\207\1\0\1\321\1\0\1\207"+
    "\1\0\1\321\3\207\2\0\1\207\11\0\2\210\2\0"+
    "\1\211\1\210\1\0\1\211\3\0\1\320\3\0\15\211"+
    "\1\u0110\12\211\1\0\1\321\1\0\1\211\2\0\3\207"+
    "\2\0\1\207\11\0\2\210\2\0\1\211\1\210\1\0"+
    "\1\211\3\0\1\320\3\0\1\u0111\27\211\1\0\1\321"+
    "\1\0\1\211\2\0\3\207\2\0\1\207\15\0\1\207"+
    "\2\0\1\207\3\0\1\320\3\0\1\u0112\27\207\1\0"+
    "\1\321\1\0\1\207\2\0\3\207\20\0\1\31\2\0"+
    "\1\31\7\0\4\31\1\u0113\23\31\3\0\1\31\44\0"+
    "\1\u0114\54\0\1\31\2\0\1\31\7\0\16\31\1\u0115"+
    "\11\31\3\0\1\31\25\0\1\31\2\0\1\31\7\0"+
    "\1\u0116\27\31\3\0\1\31\25\0\1\221\2\0\1\221"+
    "\7\0\30\221\3\0\1\221\25\0\1\221\1\331\1\0"+
    "\1\221\7\0\15\221\1\u0117\12\221\3\0\1\221\20\0"+
    "\1\333\100\0\1\54\1\226\1\0\1\335\7\0\30\54"+
    "\3\0\1\54\55\0\1\u0118\71\0\1\u0119\45\0\1\54"+
    "\1\226\1\0\1\54\7\0\21\54\1\u011a\6\54\3\0"+
    "\1\54\4\0\1\u011b\20\0\1\54\1\226\1\0\1\54"+
    "\7\0\4\54\1\u011c\23\54\3\0\1\54\44\0\1\u011d"+
    "\54\0\1\54\1\226\1\0\1\54\7\0\15\54\1\65"+
    "\12\54\3\0\1\54\55\0\1\u011e\43\0\1\54\1\226"+
    "\1\0\1\54\7\0\16\54\1\u011f\11\54\3\0\1\54"+
    "\25\0\1\54\1\226\1\0\1\54\7\0\4\54\1\65"+
    "\23\54\3\0\1\54\25\0\1\54\1\226\1\0\1\54"+
    "\7\0\1\u0120\27\54\3\0\1\54\25\0\1\54\1\226"+
    "\1\0\1\54\7\0\20\54\1\65\7\54\3\0\1\54"+
    "\25\0\1\243\2\0\1\243\7\0\30\243\3\0\1\243"+
    "\25\0\1\243\1\351\1\0\1\243\7\0\15\243\1\u0121"+
    "\12\243\3\0\1\243\22\0\1\u0122\76\0\1\u0123\2\0"+
    "\1\u0123\7\0\30\u0123\3\0\1\u0123\25\0\1\121\2\0"+
    "\1\121\7\0\21\121\1\u0124\6\121\3\0\1\121\4\0"+
    "\1\u011b\20\0\1\121\2\0\1\121\7\0\4\121\1\u0125"+
    "\23\121\3\0\1\121\44\0\1\u0126\54\0\1\121\2\0"+
    "\1\121\1\u0127\6\0\30\121\3\0\1\121\25\0\1\121"+
    "\2\0\1\121\7\0\15\121\1\127\12\121\3\0\1\121"+
    "\25\0\1\121\2\0\1\121\7\0\4\121\1\127\23\121"+
    "\3\0\1\121\25\0\1\121\2\0\1\121\7\0\20\121"+
    "\1\127\7\121\3\0\1\121\25\0\1\121\2\0\1\121"+
    "\1\u0128\6\0\30\121\3\0\1\121\31\0\1\u0128\55\0"+
    "\1\271\66\0\1\143\2\0\1\143\1\0\11\143\1\0"+
    "\1\274\2\143\1\274\7\143\30\274\2\143\1\0\1\274"+
    "\7\143\2\0\1\143\1\0\11\143\1\0\1\274\1\373"+
    "\1\143\1\274\7\143\15\274\1\u0129\12\274\2\143\1\0"+
    "\1\274\7\143\2\0\1\143\1\0\5\143\1\375\3\143"+
    "\1\0\45\143\1\0\10\143\2\0\1\143\1\0\11\143"+
    "\1\0\34\143\1\u012a\10\143\1\0\5\143\1\u012a\2\143"+
    "\2\0\1\143\1\0\11\143\1\0\30\143\1\157\14\143"+
    "\1\0\10\143\2\0\1\143\1\0\11\143\1\0\17\143"+
    "\1\157\25\143\1\0\10\143\2\0\1\143\1\0\11\143"+
    "\1\0\33\143\1\157\11\143\1\0\7\143\17\0\1\305"+
    "\2\0\1\305\7\0\30\305\3\0\1\305\25\0\1\305"+
    "\1\u0104\1\0\1\305\7\0\15\305\1\u012b\12\305\3\0"+
    "\1\305\55\0\1\u012c\61\0\1\u012d\55\0\1\171\2\0"+
    "\1\171\7\0\1\171\1\u012e\26\171\3\0\1\171\25\0"+
    "\1\171\2\0\1\171\7\0\21\171\1\u012f\6\171\3\0"+
    "\1\171\4\0\1\u0130\54\0\1\u0130\16\0\1\u0130\20\0"+
    "\1\171\2\0\1\171\7\0\6\171\1\u0131\21\171\3\0"+
    "\1\171\25\0\1\171\2\0\1\171\7\0\4\171\1\u0132"+
    "\23\171\3\0\1\171\43\0\1\u0133\37\0\1\207\11\0"+
    "\2\210\2\0\1\211\1\210\1\0\1\211\3\0\1\320"+
    "\3\0\5\211\1\u0134\22\211\1\0\1\321\1\0\1\211"+
    "\2\0\3\207\2\0\1\207\11\0\2\210\2\0\1\211"+
    "\1\210\1\0\1\211\3\0\1\320\3\0\20\211\1\u0135"+
    "\7\211\1\0\1\321\1\0\1\211\2\0\3\207\2\0"+
    "\1\207\15\0\1\207\2\0\1\207\3\0\1\320\3\0"+
    "\20\207\1\u0136\7\207\1\0\1\321\1\0\1\207\2\0"+
    "\3\207\20\0\1\31\2\0\1\31\7\0\20\31\1\u0137"+
    "\7\31\3\0\1\31\60\0\1\u0138\40\0\1\31\2\0"+
    "\1\31\7\0\24\31\1\u0139\3\31\3\0\1\31\25\0"+
    "\1\31\2\0\1\31\7\0\22\31\1\u013a\5\31\3\0"+
    "\1\31\25\0\1\221\1\331\1\0\1\221\7\0\5\221"+
    "\1\u013b\22\221\3\0\1\221\56\0\1\u013c\70\0\1\u013d"+
    "\45\0\1\54\1\226\1\0\1\54\7\0\2\54\1\u013e"+
    "\1\54\1\65\23\54\3\0\1\54\42\0\1\u013f\1\0"+
    "\1\u011e\54\0\1\54\1\226\1\0\1\54\7\0\20\54"+
    "\1\u0140\7\54\3\0\1\54\60\0\1\u0141\40\0\1\54"+
    "\1\226\1\0\1\54\7\0\24\54\1\u0142\3\54\3\0"+
    "\1\54\25\0\1\54\1\226\1\0\1\54\7\0\22\54"+
    "\1\u0143\5\54\3\0\1\54\25\0\1\243\1\351\1\0"+
    "\1\243\7\0\5\243\1\u0144\22\243\3\0\1\243\25\0"+
    "\1\121\2\0\1\121\7\0\2\121\1\u0145\1\121\1\127"+
    "\23\121\3\0\1\121\25\0\1\121\2\0\1\121\1\u0146"+
    "\6\0\30\121\3\0\1\121\31\0\1\u0146\50\0\1\143"+
    "\2\0\1\143\1\0\11\143\1\0\1\274\1\373\1\143"+
    "\1\274\7\143\5\274\1\u0147\22\274\2\143\1\0\1\274"+
    "\7\143\2\0\1\143\1\0\11\143\1\0\15\143\1\u0148"+
    "\1\143\1\157\25\143\1\0\7\143\17\0\1\305\1\u0104"+
    "\1\0\1\305\7\0\5\305\1\u0149\22\305\3\0\1\305"+
    "\45\0\1\u014a\121\0\1\u014b\25\0\1\171\2\0\1\171"+
    "\7\0\4\171\1\u014c\23\171\3\0\1\171\25\0\1\171"+
    "\2\0\1\171\7\0\25\171\1\u014d\2\171\3\0\1\171"+
    "\65\0\1\u014e\33\0\1\171\2\0\1\171\7\0\4\171"+
    "\1\u014f\23\171\3\0\1\171\73\0\1\u0150\7\0\1\207"+
    "\11\0\2\210\2\0\1\211\1\210\1\0\1\211\3\0"+
    "\1\320\3\0\30\211\1\0\1\321\1\0\1\211\2\0"+
    "\1\207\1\u0151\1\207\2\0\1\207\11\0\2\210\2\0"+
    "\1\211\1\210\1\0\1\211\3\0\1\320\3\0\22\211"+
    "\1\u0152\5\211\1\0\1\321\1\0\1\211\2\0\3\207"+
    "\2\0\1\207\15\0\1\207\2\0\1\207\3\0\1\320"+
    "\3\0\22\207\1\u0153\5\207\1\0\1\321\1\0\1\207"+
    "\2\0\3\207\20\0\1\31\2\0\1\31\7\0\22\31"+
    "\1\u0154\5\31\3\0\1\31\62\0\1\u0155\36\0\1\31"+
    "\2\0\1\31\7\0\4\31\1\u0156\23\31\3\0\1\31"+
    "\25\0\1\31\2\0\1\31\7\0\4\31\1\u0157\23\31"+
    "\3\0\1\31\25\0\1\221\1\331\1\0\1\221\7\0"+
    "\30\221\3\0\1\221\3\0\1\u0158\54\0\1\u0159\50\0"+
    "\1\u015a\63\0\1\54\1\226\1\0\1\54\7\0\7\54"+
    "\1\65\20\54\3\0\1\54\47\0\1\u011e\51\0\1\54"+
    "\1\226\1\0\1\54\7\0\22\54\1\u015b\5\54\3\0"+
    "\1\54\62\0\1\u015c\36\0\1\54\1\226\1\0\1\54"+
    "\7\0\4\54\1\u015d\23\54\3\0\1\54\25\0\1\54"+
    "\1\226\1\0\1\54\7\0\4\54\1\u015e\23\54\3\0"+
    "\1\54\25\0\1\243\1\351\1\0\1\243\7\0\30\243"+
    "\3\0\1\243\3\0\1\u015f\21\0\1\121\2\0\1\121"+
    "\7\0\7\121\1\127\20\121\3\0\1\121\6\0\1\143"+
    "\2\0\1\143\1\0\11\143\1\0\1\274\1\373\1\143"+
    "\1\274\7\143\30\274\2\143\1\0\1\274\3\143\1\u0160"+
    "\3\143\2\0\1\143\1\0\11\143\1\0\22\143\1\157"+
    "\22\143\1\0\7\143\17\0\1\305\1\u0104\1\0\1\305"+
    "\7\0\30\305\3\0\1\305\3\0\1\u0161\44\0\1\u0161"+
    "\26\0\1\u0161\57\0\1\u0162\35\0\1\171\2\0\1\171"+
    "\7\0\20\171\1\u0163\7\171\3\0\1\171\25\0\1\171"+
    "\2\0\1\171\7\0\16\171\1\u0164\11\171\3\0\1\171"+
    "\56\0\1\u0165\42\0\1\171\2\0\1\171\7\0\22\171"+
    "\1\u0166\5\171\3\0\1\171\63\0\1\u0167\17\0\1\207"+
    "\15\0\1\207\2\0\1\207\3\0\1\320\3\0\6\207"+
    "\1\u0168\21\207\1\0\1\321\1\0\1\207\2\0\3\207"+
    "\2\0\1\207\11\0\2\210\2\0\1\211\1\210\1\0"+
    "\1\211\3\0\1\320\3\0\30\211\1\0\1\321\1\0"+
    "\1\u0169\2\0\3\207\2\0\1\207\15\0\1\207\2\0"+
    "\1\207\3\0\1\320\3\0\30\207\1\0\1\321\1\0"+
    "\1\u016a\2\0\3\207\20\0\1\31\2\0\1\31\7\0"+
    "\30\31\3\0\1\u016b\73\0\1\u016c\46\0\1\u016d\71\0"+
    "\1\u016e\54\0\1\54\1\226\1\0\1\54\7\0\30\54"+
    "\3\0\1\u016f\73\0\1\u0170\46\0\1\u0171\33\0\1\143"+
    "\2\0\1\143\1\0\11\143\1\0\21\143\1\u0172\23\143"+
    "\1\0\7\143\40\0\1\u0173\106\0\1\u0174\16\0\1\u0174"+
    "\20\0\1\171\2\0\1\171\7\0\16\171\1\u0175\11\171"+
    "\3\0\1\171\25\0\1\171\2\0\1\171\7\0\20\171"+
    "\1\u0176\7\171\3\0\1\171\60\0\1\u0177\74\0\1\u0178"+
    "\16\0\1\u0178\2\0\1\207\15\0\1\u0179\2\0\1\207"+
    "\3\0\1\320\3\0\30\207\1\0\1\321\1\0\1\207"+
    "\2\0\3\207\2\0\1\207\11\0\2\210\2\0\1\211"+
    "\1\210\1\0\1\211\3\0\1\320\3\0\23\211\1\u017a"+
    "\4\211\1\0\1\321\1\0\1\211\2\0\3\207\2\0"+
    "\1\207\15\0\1\207\2\0\1\207\3\0\1\320\3\0"+
    "\23\207\1\u017b\4\207\1\0\1\321\1\0\1\207\2\0"+
    "\3\207\20\0\1\31\2\0\1\31\7\0\23\31\1\u017c"+
    "\4\31\3\0\1\31\63\0\1\u017d\35\0\1\u017e\103\0"+
    "\1\u017f\63\0\1\54\1\226\1\0\1\54\7\0\23\54"+
    "\1\u0180\4\54\3\0\1\54\63\0\1\u0181\35\0\1\u0182"+
    "\54\0\1\143\2\0\1\143\1\0\11\143\1\0\1\u0183"+
    "\44\143\1\0\7\143\17\0\1\u0184\112\0\1\u0185\54\0"+
    "\1\171\2\0\1\171\7\0\5\171\1\u0186\22\171\3\0"+
    "\1\171\25\0\1\171\2\0\1\171\7\0\3\171\1\u0187"+
    "\24\171\3\0\1\171\43\0\1\u0188\74\0\1\u0189\36\0"+
    "\1\207\15\0\1\u018a\2\0\1\u018a\3\0\1\320\3\0"+
    "\30\u018a\1\0\1\321\1\0\1\u018a\2\0\3\207\2\0"+
    "\1\207\11\0\2\210\2\0\1\211\1\210\1\0\1\211"+
    "\3\0\1\320\3\0\21\211\1\u018b\6\211\1\0\1\321"+
    "\1\0\1\211\2\0\2\207\1\u018c\2\0\1\207\15\0"+
    "\1\207\2\0\1\207\3\0\1\320\3\0\21\207\1\u018c"+
    "\6\207\1\0\1\321\1\0\1\207\2\0\2\207\1\u018c"+
    "\20\0\1\31\2\0\1\31\7\0\17\31\1\u018d\10\31"+
    "\3\0\1\31\57\0\1\u018e\41\0\1\54\1\226\1\0"+
    "\1\54\7\0\17\54\1\u018f\10\54\3\0\1\54\57\0"+
    "\1\u0190\74\0\1\u0191\40\0\1\171\2\0\1\171\7\0"+
    "\6\171\1\u0192\21\171\3\0\1\171\60\0\1\u0193\22\0"+
    "\1\207\15\0\1\u018a\1\351\1\0\1\u018a\3\0\1\320"+
    "\3\0\30\u018a\1\0\1\321\1\0\1\u018a\2\0\3\207"+
    "\2\0\1\207\11\0\2\210\2\0\1\211\1\210\1\0"+
    "\1\211\3\0\1\320\3\0\4\211\1\u0194\23\211\1\0"+
    "\1\321\1\0\1\211\2\0\3\207\2\0\1\207\15\0"+
    "\1\207\2\0\1\207\3\0\1\320\3\0\4\207\1\u0195"+
    "\23\207\1\0\1\321\1\0\1\207\2\0\3\207\20\0"+
    "\1\31\2\0\1\31\7\0\3\31\1\u0196\24\31\3\0"+
    "\1\31\43\0\1\u0197\55\0\1\54\1\226\1\0\1\54"+
    "\7\0\3\54\1\u0198\24\54\3\0\1\54\43\0\1\u0199"+
    "\110\0\1\u019a\40\0\1\171\2\0\1\171\7\0\20\171"+
    "\1\u019b\7\171\3\0\1\171\60\0\1\u019c\22\0\1\207"+
    "\11\0\2\210\2\0\1\211\1\210\1\0\1\211\3\0"+
    "\1\320\3\0\20\211\1\u019d\7\211\1\0\1\321\1\0"+
    "\1\211\2\0\3\207\2\0\1\207\15\0\1\207\2\0"+
    "\1\207\3\0\1\320\3\0\20\207\1\u019e\7\207\1\0"+
    "\1\321\1\0\1\207\2\0\3\207\20\0\1\31\2\0"+
    "\1\31\7\0\1\u019f\27\31\3\0\1\31\40\0\1\u01a0"+
    "\60\0\1\54\1\226\1\0\1\54\7\0\1\u01a1\27\54"+
    "\3\0\1\54\40\0\1\u01a2\103\0\1\u01a3\26\0\1\u01a3"+
    "\21\0\1\171\2\0\1\171\7\0\16\171\1\u01a4\11\171"+
    "\3\0\1\171\50\0\1\u01a5\26\0\1\u01a5\3\0\1\207"+
    "\11\0\2\210\2\0\1\211\1\210\1\0\1\211\3\0"+
    "\1\320\3\0\20\211\1\u01a6\7\211\1\0\1\321\1\0"+
    "\1\211\2\0\3\207\2\0\1\207\15\0\1\207\2\0"+
    "\1\207\3\0\1\320\3\0\20\207\1\u01a7\7\207\1\0"+
    "\1\321\1\0\1\207\2\0\3\207\20\0\1\31\2\0"+
    "\1\31\7\0\22\31\1\u01a8\5\31\3\0\1\31\62\0"+
    "\1\u01a9\36\0\1\54\1\226\1\0\1\54\7\0\22\54"+
    "\1\u01aa\5\54\3\0\1\54\62\0\1\u01ab\57\0\1\u01ac"+
    "\52\0\1\171\2\0\1\171\7\0\23\171\1\u01ad\4\171"+
    "\3\0\1\171\46\0\1\u01ae\34\0\1\207\11\0\2\210"+
    "\2\0\1\211\1\210\1\0\1\211\3\0\1\320\3\0"+
    "\10\211\1\u01af\17\211\1\0\1\321\1\0\1\211\2\0"+
    "\1\207\1\u01b0\1\207\2\0\1\207\15\0\1\207\2\0"+
    "\1\207\3\0\1\320\3\0\10\207\1\u01b0\17\207\1\0"+
    "\1\321\1\0\1\207\2\0\1\207\1\u01b0\1\207\20\0"+
    "\1\31\2\0\1\31\7\0\4\31\1\u01b1\23\31\3\0"+
    "\1\31\44\0\1\u01b2\54\0\1\54\1\226\1\0\1\54"+
    "\7\0\4\54\1\u01b3\23\54\3\0\1\54\44\0\1\u01b4"+
    "\76\0\1\u01b5\51\0\1\171\2\0\1\171\7\0\17\171"+
    "\1\u01b6\10\171\3\0\1\171\47\0\1\u01b7\33\0\1\207"+
    "\11\0\2\210\2\0\1\211\1\210\1\0\1\211\3\0"+
    "\1\320\3\0\6\211\1\u01b8\21\211\1\0\1\321\1\0"+
    "\1\211\2\0\3\207\2\0\1\207\15\0\1\207\2\0"+
    "\1\207\3\0\1\320\3\0\6\207\1\u01b9\21\207\1\0"+
    "\1\321\1\0\1\207\2\0\3\207\55\0\1\u01ba\36\0"+
    "\1\171\2\0\1\171\7\0\21\171\1\u01bb\6\171\3\0"+
    "\1\171\4\0\1\u01bc\55\0\1\u01bd\20\0\1\207\11\0"+
    "\2\210\2\0\1\211\1\210\1\0\1\211\3\0\1\320"+
    "\3\0\7\211\1\u01be\20\211\1\0\1\321\1\0\1\211"+
    "\2\0\3\207\2\0\1\207\15\0\1\207\2\0\1\207"+
    "\3\0\1\320\3\0\7\207\1\u01bf\20\207\1\0\1\321"+
    "\1\0\1\207\2\0\3\207\54\0\1\u01c0\16\0\1\u01c0"+
    "\54\0\1\u01c1\16\0\1\u01c1\2\0\1\207\11\0\2\210"+
    "\2\0\1\211\1\210\1\0\1\211\3\0\1\320\3\0"+
    "\22\211\1\u01c2\5\211\1\0\1\321\1\0\1\211\2\0"+
    "\3\207\2\0\1\207\15\0\1\207\2\0\1\207\3\0"+
    "\1\320\3\0\22\207\1\u01c3\5\207\1\0\1\321\1\0"+
    "\1\207\2\0\3\207\2\0\1\207\11\0\2\210\2\0"+
    "\1\211\1\210\1\0\1\211\3\0\1\320\3\0\21\211"+
    "\1\u01c4\6\211\1\0\1\321\1\0\1\211\2\0\2\207"+
    "\1\u01c5\2\0\1\207\15\0\1\207\2\0\1\207\3\0"+
    "\1\320\3\0\21\207\1\u01c5\6\207\1\0\1\321\1\0"+
    "\1\207\2\0\2\207\1\u01c5\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[21900];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\1\12\0\1\11\1\1\1\11\5\1\1\11"+
    "\4\1\1\11\3\1\2\11\1\1\1\11\3\1\1\11"+
    "\13\1\1\11\1\1\1\11\1\1\1\11\4\1\3\11"+
    "\1\1\1\11\1\1\2\11\3\1\1\11\3\1\2\11"+
    "\12\1\1\11\4\1\1\11\1\1\2\11\5\1\1\11"+
    "\10\1\1\11\1\1\1\11\1\1\1\11\4\1\1\11"+
    "\4\1\1\11\2\1\1\11\1\1\1\0\2\1\1\0"+
    "\4\1\1\0\3\1\1\0\2\1\1\0\4\1\2\0"+
    "\10\1\1\0\3\1\1\0\1\11\1\0\1\11\1\1"+
    "\2\0\1\11\2\0\2\1\1\0\5\1\2\0\15\1"+
    "\2\0\5\1\2\0\1\11\1\0\2\1\1\0\1\1"+
    "\1\0\4\1\1\11\1\0\1\1\2\0\2\1\1\0"+
    "\1\1\1\0\6\1\1\11\1\0\1\11\2\0\3\1"+
    "\1\0\5\1\1\0\14\1\2\0\2\1\1\0\3\1"+
    "\1\11\1\0\2\1\1\0\1\1\1\0\3\1\2\0"+
    "\1\1\1\0\1\1\1\0\1\11\3\1\1\11\3\1"+
    "\1\0\2\11\3\1\2\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\1\1\1\0\3\1\2\0\1\1\1\0"+
    "\1\1\1\0\4\1\1\11\3\1\2\0\2\1\1\0"+
    "\1\1\2\0\1\1\1\0\4\1\2\0\1\11\4\1"+
    "\1\0\1\1\2\0\2\1\1\0\1\1\2\0\1\1"+
    "\1\0\1\1\3\0\1\1\2\0\1\1\2\0\2\1"+
    "\3\0\1\1\1\0\1\1\2\0\1\11\1\1\2\0"+
    "\1\1\2\0\2\1\1\11\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\2\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\2\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\2\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\2\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\11\1\0\1\1\1\0\1\1\2\0"+
    "\1\1\1\11\1\0\1\1\1\0\2\11\1\1\1\0"+
    "\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[453];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ImpexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ImpexTypes.BEAN_SHELL_BODY;
            }
          // fall through
          case 81: break;
          case 2:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 82: break;
          case 3:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 83: break;
          case 4:
            { yybegin(YYINITIAL); return ImpexTypes.CRLF;
            }
          // fall through
          case 84: break;
          case 5:
            { return ImpexTypes.LINE_COMMENT;
            }
          // fall through
          case 85: break;
          case 6:
            { yybegin(FIELD_VALUE); return ImpexTypes.VALUE_SUBTYPE;
            }
          // fall through
          case 86: break;
          case 7:
            { yybegin(FIELD_VALUE); return ImpexTypes.FIELD_VALUE_SEPARATOR;
            }
          // fall through
          case 87: break;
          case 8:
            { return ImpexTypes.MACRO_VALUE;
            }
          // fall through
          case 88: break;
          case 9:
            { return ImpexTypes.LEFT_ROUND_BRACKET;
            }
          // fall through
          case 89: break;
          case 10:
            { return ImpexTypes.RIGHT_ROUND_BRACKET;
            }
          // fall through
          case 90: break;
          case 11:
            { return ImpexTypes.BOOLEAN;
            }
          // fall through
          case 91: break;
          case 12:
            { return ImpexTypes.COMMA;
            }
          // fall through
          case 92: break;
          case 13:
            { return ImpexTypes.DIGIT;
            }
          // fall through
          case 93: break;
          case 14:
            { return ImpexTypes.ASSIGN_VALUE;
            }
          // fall through
          case 94: break;
          case 15:
            { return ImpexTypes.LEFT_SQUARE_BRACKET;
            }
          // fall through
          case 95: break;
          case 16:
            { return ImpexTypes.RIGHT_SQUARE_BRACKET;
            }
          // fall through
          case 96: break;
          case 17:
            { yybegin(WAITING_MACRO_VALUE); return ImpexTypes.ASSIGN_VALUE;
            }
          // fall through
          case 97: break;
          case 18:
            { yybegin(HEADER_LINE); return ImpexTypes.HEADER_TYPE;
            }
          // fall through
          case 98: break;
          case 19:
            { return ImpexTypes.HEADER_PARAMETER_NAME;
            }
          // fall through
          case 99: break;
          case 20:
            { return ImpexTypes.DOT;
            }
          // fall through
          case 100: break;
          case 21:
            { return ImpexTypes.PARAMETERS_SEPARATOR;
            }
          // fall through
          case 101: break;
          case 22:
            { yybegin(WAITING_ATTR_OR_PARAM_VALUE); return ImpexTypes.ASSIGN_VALUE;
            }
          // fall through
          case 102: break;
          case 23:
            { yybegin(MODIFIERS_BLOCK); return ImpexTypes.LEFT_SQUARE_BRACKET;
            }
          // fall through
          case 103: break;
          case 24:
            { return ImpexTypes.ALTERNATIVE_PATTERN;
            }
          // fall through
          case 104: break;
          case 25:
            { return ImpexTypes.FIELD_VALUE;
            }
          // fall through
          case 105: break;
          case 26:
            { return ImpexTypes.FIELD_LIST_ITEM_SEPARATOR;
            }
          // fall through
          case 106: break;
          case 27:
            { return ImpexTypes.DEFAULT_PATH_DELIMITER;
            }
          // fall through
          case 107: break;
          case 28:
            { return ImpexTypes.FIELD_VALUE_SEPARATOR;
            }
          // fall through
          case 108: break;
          case 29:
            { return ImpexTypes.ALTERNATIVE_MAP_DELIMITER;
            }
          // fall through
          case 109: break;
          case 30:
            { return ImpexTypes.ATTRIBUTE_SEPARATOR;
            }
          // fall through
          case 110: break;
          case 31:
            { return ImpexTypes.ATTRIBUTE_NAME;
            }
          // fall through
          case 111: break;
          case 32:
            { yybegin(HEADER_LINE); return ImpexTypes.RIGHT_SQUARE_BRACKET;
            }
          // fall through
          case 112: break;
          case 33:
            { yybegin(MODIFIERS_BLOCK); return ImpexTypes.ALTERNATIVE_MAP_DELIMITER;
            }
          // fall through
          case 113: break;
          case 34:
            { return ImpexTypes.ATTRIBUTE_VALUE;
            }
          // fall through
          case 114: break;
          case 35:
            { yybegin(MODIFIERS_BLOCK); return ImpexTypes.ATTRIBUTE_SEPARATOR;
            }
          // fall through
          case 115: break;
          case 36:
            { yypushback(yylength()); yybegin(MACRO_USAGE);
            }
          // fall through
          case 116: break;
          case 37:
            { yybegin(USER_RIGHTS_HEADER_LINE); return ImpexTypes.CRLF;
            }
          // fall through
          case 117: break;
          case 38:
            { return ImpexTypes.CRLF;
            }
          // fall through
          case 118: break;
          case 39:
            { return ImpexTypes.PERMISSION;
            }
          // fall through
          case 119: break;
          case 40:
            { yybegin(USER_RIGHTS_WAIT_FOR_VALUE_LINE); return ImpexTypes.PARAMETERS_SEPARATOR;
            }
          // fall through
          case 120: break;
          case 41:
            { yybegin(USER_RIGHTS_VALUE_LINE); return ImpexTypes.CRLF;
            }
          // fall through
          case 121: break;
          case 42:
            { return ImpexTypes.PERMISSION_ALLOWED;
            }
          // fall through
          case 122: break;
          case 43:
            { return ImpexTypes.PERMISSION_DENIED;
            }
          // fall through
          case 123: break;
          case 44:
            { return ImpexTypes.DOUBLE_STRING;
            }
          // fall through
          case 124: break;
          case 45:
            { yybegin(BEAN_SHELL); return ImpexTypes.BEAN_SHELL_MARKER;
            }
          // fall through
          case 125: break;
          case 46:
            { return ImpexTypes.MACRO_USAGE;
            }
          // fall through
          case 126: break;
          case 47:
            { yypushback(yylength()); yybegin(WAITING_MACRO_CONFIG_USAGE);
            }
          // fall through
          case 127: break;
          case 48:
            { return ImpexTypes.SINGLE_STRING;
            }
          // fall through
          case 128: break;
          case 49:
            { return ImpexTypes.HEADER_SPECIAL_PARAMETER_NAME;
            }
          // fall through
          case 129: break;
          case 50:
            { return ImpexTypes.DOCUMENT_ID;
            }
          // fall through
          case 130: break;
          case 51:
            { yybegin(HEADER_LINE);
                                                              yypushback(1);
                                                              return ImpexTypes.FUNCTION;
            }
          // fall through
          case 131: break;
          case 52:
            { return ImpexTypes.MULTILINE_SEPARATOR;
            }
          // fall through
          case 132: break;
          case 53:
            { return ImpexTypes.DEFAULT_KEY_VALUE_DELIMITER;
            }
          // fall through
          case 133: break;
          case 54:
            { yybegin(WAITING_MACRO_VALUE); return ImpexTypes.MACRO_USAGE;
            }
          // fall through
          case 134: break;
          case 55:
            { yybegin(MACRO_DECLARATION);
                                                              /* Push back '='. */
                                                              yypushback(1);
                                                              /* Push back spaces. */
                                                              yypushback(yylength() - yytext().toString().trim().length());
                                                              return ImpexTypes.MACRO_NAME_DECLARATION;
            }
          // fall through
          case 135: break;
          case 56:
            { return ImpexTypes.COLLECTION_APPEND_PREFIX;
            }
          // fall through
          case 136: break;
          case 57:
            { return ImpexTypes.COLLECTION_REMOVE_PREFIX;
            }
          // fall through
          case 137: break;
          case 58:
            { return ImpexTypes.UID;
            }
          // fall through
          case 138: break;
          case 59:
            { return ImpexTypes.COLLECTION_MERGE_PREFIX;
            }
          // fall through
          case 139: break;
          case 60:
            { return ImpexTypes.FIELD_VALUE_URL;
            }
          // fall through
          case 140: break;
          case 61:
            { return ImpexTypes.FIELD_VALUE_JAR_PREFIX;
            }
          // fall through
          case 141: break;
          case 62:
            { return ImpexTypes.FIELD_VALUE_ZIP_PREFIX;
            }
          // fall through
          case 142: break;
          case 63:
            { return ImpexTypes.TYPE;
            }
          // fall through
          case 143: break;
          case 64:
            { return ImpexTypes.FIELD_VALUE_FILE_PREFIX;
            }
          // fall through
          case 144: break;
          case 65:
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_INSERT;
            }
          // fall through
          case 145: break;
          case 66:
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_REMOVE;
            }
          // fall through
          case 146: break;
          case 67:
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_UPDATE;
            }
          // fall through
          case 147: break;
          case 68:
            { return ImpexTypes.FIELD_VALUE_NULL;
            }
          // fall through
          case 148: break;
          case 69:
            { return ImpexTypes.HEADER_MODE_INSERT;
            }
          // fall through
          case 149: break;
          case 70:
            { return ImpexTypes.HEADER_MODE_REMOVE;
            }
          // fall through
          case 150: break;
          case 71:
            { return ImpexTypes.HEADER_MODE_UPDATE;
            }
          // fall through
          case 151: break;
          case 72:
            { return ImpexTypes.TARGET;
            }
          // fall through
          case 152: break;
          case 73:
            { return ImpexTypes.FIELD_VALUE_IGNORE;
            }
          // fall through
          case 153: break;
          case 74:
            { return ImpexTypes.PASSWORD;
            }
          // fall through
          case 154: break;
          case 75:
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_INSERT_UPDATE;
            }
          // fall through
          case 155: break;
          case 76:
            { return ImpexTypes.HEADER_MODE_INSERT_UPDATE;
            }
          // fall through
          case 156: break;
          case 77:
            { return ImpexTypes.MEMBEROFGROUPS;
            }
          // fall through
          case 157: break;
          case 78:
            { yybegin(YYINITIAL); return ImpexTypes.END_USERRIGHTS;
            }
          // fall through
          case 158: break;
          case 79:
            { yybegin(USER_RIGHTS_END); return ImpexTypes.END_USERRIGHTS;
            }
          // fall through
          case 159: break;
          case 80:
            { yybegin(USER_RIGHTS_START); return ImpexTypes.START_USERRIGHTS;
            }
          // fall through
          case 160: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
