// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Impex.flex

/*
 * This file is part of "hybris integration" plugin for Intellij IDEA.
 * Copyright (C) 2014-2016 Alexander Bartash <AlexanderBartash@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

package com.intellij.idea.plugin.hybris.impex;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.idea.plugin.hybris.impex.psi.ImpexTypes;
import com.intellij.psi.TokenType;
import com.intellij.psi.CustomHighlighterTokenType;


class ImpexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_MACRO_VALUE = 2;
  public static final int MACRO_DECLARATION = 4;
  public static final int HEADER_TYPE = 6;
  public static final int HEADER_LINE = 8;
  public static final int FIELD_VALUE = 10;
  public static final int BEAN_SHELL = 12;
  public static final int MODIFIERS_BLOCK = 14;
  public static final int WAITING_ATTR_OR_PARAM_VALUE = 16;
  public static final int HEADER_PARAMETERS = 18;
  public static final int MACRO_USAGE = 20;
  public static final int MACRO_CONFIG_USAGE = 22;
  public static final int WAITING_MACRO_CONFIG_USAGE = 24;
  public static final int USER_RIGHTS_START = 26;
  public static final int USER_RIGHTS_END = 28;
  public static final int USER_RIGHTS_HEADER_LINE = 30;
  public static final int USER_RIGHTS_WAIT_FOR_VALUE_LINE = 32;
  public static final int USER_RIGHTS_VALUE_LINE = 34;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10,  9,  9, 11, 11, 12, 12, 13, 13, 14, 14, 
    15, 15, 16, 16
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\0\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\0\1\15\1\16\1\17\1\20\1\21\12\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\44"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\44\1\60"+
    "\1\44\1\61\1\0\1\62\1\0\1\63\1\0\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\44"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\44\1\60"+
    "\1\44\1\0\1\64\10\0\1\3\252\0\2\65\115\0"+
    "\1\66\u01a8\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\12\0\1\2\1\3\2\4\1\2\1\5"+
    "\1\2\1\6\1\7\3\6\1\2\4\10\1\11\1\12"+
    "\1\13\1\14\1\13\1\15\1\10\1\16\5\10\1\13"+
    "\4\10\1\13\1\17\1\20\1\10\1\21\1\22\2\2"+
    "\1\23\1\24\1\25\1\26\1\2\1\27\1\30\4\31"+
    "\1\32\1\13\1\31\1\15\1\33\1\34\4\31\1\13"+
    "\2\31\1\13\1\35\1\1\1\3\1\1\1\2\1\36"+
    "\1\37\1\40\1\41\4\42\1\13\1\43\1\15\2\42"+
    "\1\13\2\42\1\13\1\2\2\44\2\45\2\46\1\5"+
    "\1\2\1\47\1\50\4\47\2\51\1\2\1\52\1\53"+
    "\1\0\1\54\1\55\4\56\1\0\3\6\1\0\2\57"+
    "\1\0\1\60\1\15\2\10\2\0\1\61\7\10\1\0"+
    "\2\56\1\62\1\0\1\63\3\0\1\64\2\0\4\31"+
    "\1\0\1\1\1\54\2\56\1\42\1\60\5\42\2\65"+
    "\2\0\5\47\3\0\1\66\3\56\1\0\1\6\1\0"+
    "\2\6\2\57\1\60\1\0\1\15\2\0\2\10\1\0"+
    "\1\10\1\0\4\10\2\56\1\67\1\0\1\70\2\0"+
    "\1\15\4\31\1\1\2\56\1\60\1\42\1\15\4\42"+
    "\2\65\2\0\2\47\1\0\2\47\2\71\1\0\3\56"+
    "\1\0\1\6\1\0\2\6\1\57\2\0\1\10\1\0"+
    "\1\10\1\0\1\13\2\10\1\56\1\72\1\73\1\31"+
    "\1\56\1\42\1\65\2\0\2\47\1\0\1\47\1\74"+
    "\1\0\3\56\1\0\1\6\1\0\2\6\1\57\2\0"+
    "\1\10\1\0\1\10\1\0\2\10\1\56\1\31\1\56"+
    "\1\42\1\65\2\0\2\47\1\0\1\47\1\0\1\56"+
    "\1\0\1\56\1\0\2\75\1\76\1\77\2\0\1\100"+
    "\2\101\1\102\1\103\1\0\1\42\2\0\2\47\1\0"+
    "\1\104\3\0\1\56\1\0\1\6\3\0\1\10\2\0"+
    "\1\42\2\0\2\47\4\0\1\56\1\0\1\6\2\0"+
    "\1\105\1\10\2\0\1\42\2\0\1\47\2\106\2\0"+
    "\3\56\1\0\1\6\1\0\1\10\2\0\1\47\2\0"+
    "\2\56\1\0\1\6\1\0\1\10\2\0\1\47\2\0"+
    "\2\56\1\0\1\6\1\0\1\10\2\0\1\47\2\0"+
    "\2\56\1\0\1\6\1\0\1\10\2\0\1\47\2\0"+
    "\1\56\1\0\2\107\2\110\1\0\1\47\1\0\1\56"+
    "\2\0\2\111\1\0\1\56\1\0\1\112\1\113\1\56"+
    "\1\0\2\114";

  private static int [] zzUnpackAction() {
    int [] result = new int[446];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\u03a7\0\u0415\0\u044c\0\u0483\0\u04ba"+
    "\0\u04f1\0\u03a7\0\u0528\0\u055f\0\u0596\0\u05cd\0\u03a7\0\u044c"+
    "\0\u0604\0\u063b\0\u03a7\0\u03a7\0\u0672\0\u03a7\0\u06a9\0\u06e0"+
    "\0\u0717\0\u03a7\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u082a\0\u0861"+
    "\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0785\0\u03a7\0\u03a7\0\u0974"+
    "\0\u03a7\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u03a7\0\u03a7\0\u03a7"+
    "\0\u074e\0\u03a7\0\u03a7\0\u03a7\0\u044c\0\u09e2\0\u0a87\0\u03a7"+
    "\0\u0abe\0\u0af5\0\u0b2c\0\u03a7\0\u03a7\0\u0717\0\u0b63\0\u0b9a"+
    "\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0b63\0\u03a7\0\u0cad\0\u0ce4"+
    "\0\u0d1b\0\u063b\0\u03a7\0\u0d52\0\u03a7\0\u03a7\0\u0d89\0\u0dc0"+
    "\0\u0df7\0\u0e2e\0\u0e65\0\u03a7\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41"+
    "\0\u0f78\0\u0faf\0\u0d89\0\u0fe6\0\u03a7\0\u101d\0\u03a7\0\u1054"+
    "\0\u03a7\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u03a7\0\u1167\0\u119e"+
    "\0\u11d5\0\u120c\0\u03a7\0\u1243\0\u127a\0\u03a7\0\u0b63\0\u044c"+
    "\0\u12b1\0\u10c2\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb"+
    "\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3"+
    "\0\u15ea\0\u1621\0\u1658\0\u168f\0\u074e\0\u16c6\0\u16fd\0\u1734"+
    "\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1847\0\u187e\0\u18b5\0\u0a19"+
    "\0\u18ec\0\u03a7\0\u1923\0\u195a\0\u1991\0\u03a7\0\u19c8\0\u19ff"+
    "\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u1b80\0\u1bb7"+
    "\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u1d01\0\u1d38\0\u1d6f"+
    "\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27"+
    "\0\u1f5e\0\u1f95\0\u1fcc\0\u2003\0\u03a7\0\u203a\0\u2071\0\u20a8"+
    "\0\u20df\0\u2116\0\u214d\0\u2184\0\u21bb\0\u21f2\0\u2229\0\u03a7"+
    "\0\u2260\0\u2297\0\u22ce\0\u2305\0\u233c\0\u2373\0\u23aa\0\u23e1"+
    "\0\u2418\0\u244f\0\u2486\0\u24bd\0\u24f4\0\u252b\0\u2562\0\u03a7"+
    "\0\u2599\0\u03a7\0\u25d0\0\u0af5\0\u19ff\0\u2607\0\u263e\0\u2675"+
    "\0\u26ac\0\u26e3\0\u271a\0\u2751\0\u0d89\0\u2788\0\u1c93\0\u27bf"+
    "\0\u27f6\0\u282d\0\u2864\0\u289b\0\u28d2\0\u2909\0\u2940\0\u2977"+
    "\0\u29ae\0\u29e5\0\u2a1c\0\u2a53\0\u1130\0\u03a7\0\u2a8a\0\u2ac1"+
    "\0\u2af8\0\u2b2f\0\u2b66\0\u2b9d\0\u2bd4\0\u2c0b\0\u2c42\0\u2c79"+
    "\0\u2cb0\0\u2ce7\0\u2d1e\0\u2d55\0\u2d8c\0\u2dc3\0\u03a7\0\u2dfa"+
    "\0\u2e31\0\u2e68\0\u03a7\0\u25d0\0\u2e9f\0\u2ed6\0\u2f0d\0\u2f44"+
    "\0\u2f7b\0\u2fb2\0\u2fe9\0\u3020\0\u3057\0\u308e\0\u1130\0\u30c5"+
    "\0\u30fc\0\u3133\0\u316a\0\u31a1\0\u31d8\0\u320f\0\u3246\0\u327d"+
    "\0\u32b4\0\u32eb\0\u3322\0\u3359\0\u3390\0\u33c7\0\u33fe\0\u3435"+
    "\0\u346c\0\u34a3\0\u34da\0\u3511\0\u3548\0\u357f\0\u35b6\0\u35ed"+
    "\0\u3624\0\u365b\0\u3692\0\u36c9\0\u3700\0\u3737\0\u376e\0\u37a5"+
    "\0\u37dc\0\u3813\0\u384a\0\u04f1\0\u04f1\0\u3881\0\u38b8\0\u03a7"+
    "\0\u38ef\0\u3926\0\u0785\0\u0785\0\u395d\0\u3994\0\u39cb\0\u3a02"+
    "\0\u3a39\0\u3a70\0\u3aa7\0\u1130\0\u3ade\0\u3b15\0\u3b4c\0\u3b83"+
    "\0\u3bba\0\u3bf1\0\u3c28\0\u3c5f\0\u3c96\0\u3ccd\0\u3d04\0\u3d3b"+
    "\0\u3d72\0\u3da9\0\u3de0\0\u3e17\0\u3e4e\0\u3e85\0\u3ebc\0\u3ef3"+
    "\0\u3f2a\0\u3f61\0\u3f98\0\u3fcf\0\u4006\0\u21f2\0\u03a7\0\u403d"+
    "\0\u4074\0\u252b\0\u271a\0\u289b\0\u40ab\0\u40e2\0\u1130\0\u03a7"+
    "\0\u4119\0\u4150\0\u4187\0\u41be\0\u41f5\0\u422c\0\u4263\0\u429a"+
    "\0\u42d1\0\u4308\0\u433f\0\u4376\0\u43ad\0\u43e4\0\u441b\0\u4452"+
    "\0\u4489\0\u44c0\0\u44f7\0\u452e\0\u4565\0\u459c\0\u45d3\0\u460a"+
    "\0\u4641\0\u4678\0\u46af\0\u46e6\0\u471d\0\u4754\0\u478b\0\u47c2"+
    "\0\u47f9\0\u4830\0\u4867\0\u489e\0\u48d5\0\u490c\0\u4943\0\u497a"+
    "\0\u49b1\0\u49e8\0\u4a1f\0\u4a56\0\u4a8d\0\u4ac4\0\u4afb\0\u4b32"+
    "\0\u4b69\0\u04f1\0\u03a7\0\u0785\0\u03a7\0\u4ba0\0\u4bd7\0\u4c0e"+
    "\0\u4c45\0\u4c7c\0\u4cb3\0\u1130\0\u03a7\0\u4cea\0\u4d21\0\u4d58"+
    "\0\u03a7\0\u03a7\0\u4d8f\0\u4dc6\0\u131f\0\u03a7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[446];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\22\1\23\1\24\1\0\1\25\1\26\1\27\1\30"+
    "\7\22\1\31\2\22\1\31\1\22\1\32\5\22\10\31"+
    "\1\33\7\31\1\34\2\31\1\35\3\31\2\22\1\31"+
    "\1\22\1\36\1\22\1\37\1\23\1\24\1\37\1\25"+
    "\1\40\1\37\1\41\2\37\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\2\37\1\50\2\37\1\51\1\52\2\37"+
    "\1\53\5\54\1\55\2\54\1\56\1\57\3\54\1\60"+
    "\2\54\1\61\1\54\1\62\1\63\1\54\1\64\1\65"+
    "\1\66\1\67\1\54\1\37\1\70\1\37\1\22\1\23"+
    "\1\24\1\0\1\25\21\22\1\71\41\22\1\23\1\24"+
    "\1\0\1\25\12\22\1\72\2\22\1\72\7\22\27\72"+
    "\2\22\1\72\4\22\1\23\1\24\1\0\1\25\2\22"+
    "\1\73\1\22\1\74\1\22\1\43\1\44\1\22\1\46"+
    "\1\75\1\76\1\22\1\75\1\22\1\77\1\22\1\100"+
    "\2\22\1\101\27\75\1\102\1\67\1\75\1\103\2\22"+
    "\1\104\1\23\1\24\1\104\1\25\1\105\1\104\1\106"+
    "\3\104\1\107\1\104\1\45\1\110\1\111\1\104\1\112"+
    "\1\113\1\114\1\115\1\116\4\104\5\117\1\120\3\117"+
    "\1\121\3\117\1\122\4\117\1\123\2\117\1\124\1\125"+
    "\2\104\1\117\1\126\2\104\1\127\1\130\1\24\1\127"+
    "\1\25\1\131\61\127\1\22\1\23\1\24\1\0\1\25"+
    "\1\26\1\22\1\73\2\22\1\132\3\22\1\133\2\134"+
    "\1\22\1\134\3\22\1\100\3\22\27\134\1\22\1\135"+
    "\1\134\1\136\2\22\1\137\1\23\1\24\1\137\1\25"+
    "\1\140\1\137\1\141\2\137\1\142\2\137\1\143\1\144"+
    "\1\143\2\137\1\145\14\137\1\146\3\137\1\147\3\137"+
    "\1\150\4\137\1\151\2\137\1\152\1\153\1\137\1\135"+
    "\4\137\1\22\1\23\3\0\63\22\1\23\1\24\1\0"+
    "\1\25\2\22\1\154\57\22\1\155\1\23\1\24\1\0"+
    "\1\25\2\155\1\156\57\155\1\22\1\23\1\157\1\0"+
    "\1\160\17\22\1\77\43\22\1\23\1\24\1\0\1\25"+
    "\17\22\1\77\43\22\1\23\1\161\1\0\1\162\1\22"+
    "\1\163\1\164\7\22\1\165\2\22\1\165\1\22\1\166"+
    "\5\22\14\165\1\167\2\165\1\170\2\165\1\171\1\172"+
    "\3\165\2\22\1\165\4\22\1\23\1\173\1\0\1\174"+
    "\2\22\1\164\7\22\1\165\2\22\1\165\1\22\1\77"+
    "\5\22\14\165\1\167\2\165\1\170\2\165\1\171\1\172"+
    "\3\165\2\22\1\165\4\22\1\23\1\173\1\0\1\174"+
    "\1\22\1\163\1\175\5\22\1\176\1\46\1\177\1\76"+
    "\1\22\1\117\1\22\1\115\5\22\27\117\2\22\1\117"+
    "\3\22\70\0\1\23\67\0\1\24\64\0\5\200\1\201"+
    "\61\200\2\163\1\0\1\163\1\0\3\163\1\202\56\163"+
    "\13\0\2\203\2\0\1\204\1\203\1\0\1\204\7\0"+
    "\2\204\1\205\16\204\1\206\5\204\2\0\1\204\2\0"+
    "\1\207\17\0\1\31\2\0\1\31\7\0\27\31\2\0"+
    "\1\31\22\0\1\31\2\0\1\31\7\0\15\31\1\210"+
    "\11\31\2\0\1\31\22\0\1\31\2\0\1\31\7\0"+
    "\4\31\1\211\22\31\2\0\1\31\22\0\1\31\2\0"+
    "\1\31\7\0\17\31\1\212\7\31\2\0\1\31\52\0"+
    "\1\213\36\0\1\214\2\0\1\214\7\0\2\214\1\215"+
    "\24\214\2\0\1\214\3\0\2\216\1\0\1\216\1\0"+
    "\5\216\1\217\54\216\22\0\1\220\63\0\1\54\1\221"+
    "\1\0\1\50\7\0\27\54\2\0\1\54\22\0\1\54"+
    "\1\222\1\0\1\50\7\0\27\54\2\0\1\54\45\0"+
    "\1\223\4\0\1\224\15\0\1\223\20\0\1\225\2\0"+
    "\1\225\7\0\27\225\2\0\1\225\22\0\1\54\1\221"+
    "\1\0\1\54\7\0\27\54\2\0\1\54\22\0\1\54"+
    "\1\221\1\0\1\54\7\0\1\226\26\54\2\0\1\54"+
    "\22\0\1\54\1\221\1\0\1\54\7\0\15\54\1\227"+
    "\11\54\2\0\1\54\22\0\1\54\1\221\1\0\1\54"+
    "\7\0\1\65\26\54\2\0\1\54\22\0\1\54\1\221"+
    "\1\0\1\54\7\0\4\54\1\230\22\54\2\0\1\54"+
    "\22\0\1\54\1\221\1\0\1\54\7\0\4\54\1\231"+
    "\22\54\2\0\1\54\22\0\1\54\1\221\1\0\1\54"+
    "\7\0\20\54\1\232\6\54\2\0\1\54\22\0\1\54"+
    "\1\221\1\0\1\54\7\0\17\54\1\233\7\54\2\0"+
    "\1\54\22\0\1\54\1\221\1\0\1\54\7\0\1\234"+
    "\26\54\2\0\1\54\52\0\1\235\36\0\1\72\2\0"+
    "\1\72\7\0\27\72\2\0\1\72\22\0\1\236\2\0"+
    "\1\236\7\0\2\236\1\237\24\236\2\0\1\236\22\0"+
    "\1\240\2\0\1\240\7\0\27\240\2\0\1\240\4\0"+
    "\1\241\11\0\1\242\3\0\1\75\1\243\1\0\1\75"+
    "\6\0\1\243\27\75\2\0\1\75\20\0\1\244\1\0"+
    "\1\245\66\0\1\117\2\0\1\113\4\0\1\246\2\0"+
    "\27\117\2\0\1\117\22\0\1\247\2\0\1\247\7\0"+
    "\27\247\2\0\1\247\22\0\1\117\1\250\1\0\1\113"+
    "\7\0\27\117\2\0\1\117\22\0\1\117\2\0\1\117"+
    "\7\0\27\117\2\0\1\117\22\0\1\117\2\0\1\117"+
    "\7\0\1\251\26\117\2\0\1\117\22\0\1\117\2\0"+
    "\1\117\7\0\1\125\26\117\2\0\1\117\22\0\1\117"+
    "\2\0\1\117\7\0\4\117\1\252\22\117\2\0\1\117"+
    "\22\0\1\117\2\0\1\117\7\0\20\117\1\253\6\117"+
    "\2\0\1\117\22\0\1\117\2\0\1\117\7\0\1\254"+
    "\26\117\2\0\1\117\3\0\2\127\1\0\1\127\1\0"+
    "\63\127\1\130\1\0\1\127\1\0\62\127\2\131\1\255"+
    "\1\131\1\255\1\256\61\131\17\0\2\134\1\0\1\134"+
    "\7\0\27\134\2\0\1\134\3\0\1\137\2\0\1\137"+
    "\1\0\11\137\1\0\43\137\1\0\4\137\1\140\2\200"+
    "\1\140\1\200\1\257\10\140\1\200\43\140\1\200\4\140"+
    "\1\137\2\0\1\137\1\0\11\137\1\0\1\260\2\137"+
    "\1\260\7\137\2\260\1\261\24\260\1\137\1\0\1\260"+
    "\3\137\1\262\1\216\1\0\1\262\1\0\5\262\1\263"+
    "\3\262\1\216\43\262\1\216\4\262\1\137\2\0\1\137"+
    "\1\0\11\137\1\0\3\137\1\145\37\137\1\0\5\137"+
    "\2\0\1\137\1\0\11\137\1\0\1\137\1\264\1\137"+
    "\1\145\37\137\1\0\5\137\2\0\1\137\1\0\11\137"+
    "\1\0\13\137\1\265\27\137\1\0\5\137\2\0\1\137"+
    "\1\0\11\137\1\0\13\137\1\153\27\137\1\0\5\137"+
    "\2\0\1\137\1\0\11\137\1\0\17\137\1\266\23\137"+
    "\1\0\5\137\2\0\1\137\1\0\11\137\1\0\33\137"+
    "\1\267\7\137\1\0\5\137\2\0\1\137\1\0\11\137"+
    "\1\0\13\137\1\270\27\137\1\0\4\137\17\0\1\271"+
    "\2\0\1\271\7\0\2\271\1\272\24\271\2\0\1\271"+
    "\37\0\1\273\34\0\1\157\66\0\1\161\64\0\2\163"+
    "\1\0\1\163\1\0\62\163\36\0\1\274\47\0\1\165"+
    "\2\0\1\165\7\0\27\165\2\0\1\165\22\0\1\165"+
    "\2\0\1\165\7\0\4\165\1\275\22\165\2\0\1\165"+
    "\22\0\1\165\2\0\1\165\7\0\1\276\26\165\2\0"+
    "\1\165\22\0\1\165\2\0\1\165\7\0\1\277\25\165"+
    "\1\300\2\0\1\165\22\0\1\165\2\0\1\165\7\0"+
    "\10\165\1\301\16\165\2\0\1\165\1\0\1\302\3\0"+
    "\1\173\122\0\1\303\35\0\1\200\74\0\2\203\2\0"+
    "\2\203\1\0\1\203\7\0\27\203\2\0\1\203\4\0"+
    "\1\304\11\0\2\203\2\0\1\204\1\203\1\0\1\204"+
    "\3\0\1\305\3\0\2\204\1\306\24\204\2\0\1\204"+
    "\4\0\1\304\11\0\2\203\2\0\1\204\1\203\1\0"+
    "\1\204\3\0\1\305\3\0\2\204\1\306\13\204\1\307"+
    "\10\204\2\0\1\204\4\0\1\304\11\0\2\203\2\0"+
    "\1\204\1\203\1\0\1\204\3\0\1\305\3\0\2\204"+
    "\1\306\17\204\1\310\4\204\2\0\1\204\57\0\1\311"+
    "\31\0\1\31\2\0\1\31\7\0\21\31\1\312\5\31"+
    "\2\0\1\31\2\0\1\313\17\0\1\31\2\0\1\31"+
    "\7\0\14\31\1\314\12\31\2\0\1\31\22\0\1\31"+
    "\2\0\1\31\7\0\3\31\1\315\23\31\2\0\1\31"+
    "\56\0\1\313\12\0\1\313\17\0\1\214\1\316\1\0"+
    "\1\214\7\0\27\214\2\0\1\214\22\0\1\214\1\316"+
    "\1\0\1\214\7\0\16\214\1\317\10\214\2\0\1\214"+
    "\3\0\2\216\1\0\1\216\1\0\5\216\1\320\54\216"+
    "\12\0\1\321\74\0\1\250\1\0\1\220\63\0\1\54"+
    "\2\0\1\54\7\0\27\54\2\0\1\54\22\0\1\54"+
    "\2\0\1\322\7\0\27\54\2\0\1\54\43\0\1\323"+
    "\103\0\1\324\30\0\1\54\1\221\1\0\1\54\7\0"+
    "\13\54\1\325\13\54\2\0\1\54\22\0\1\54\1\221"+
    "\1\0\1\54\7\0\21\54\1\326\5\54\2\0\1\54"+
    "\2\0\1\327\17\0\1\54\1\221\1\0\1\54\7\0"+
    "\10\54\1\330\16\54\2\0\1\54\1\0\1\331\20\0"+
    "\1\54\1\221\1\0\1\54\7\0\14\54\1\332\12\54"+
    "\2\0\1\54\22\0\1\54\1\221\1\0\1\54\7\0"+
    "\23\54\1\333\3\54\2\0\1\54\22\0\1\54\1\221"+
    "\1\0\1\54\7\0\3\54\1\334\23\54\2\0\1\54"+
    "\22\0\1\54\1\221\1\0\1\54\7\0\7\54\1\335"+
    "\17\54\2\0\1\54\56\0\1\327\12\0\1\327\17\0"+
    "\1\236\1\336\1\0\1\236\7\0\27\236\2\0\1\236"+
    "\22\0\1\236\1\336\1\0\1\236\7\0\16\236\1\337"+
    "\10\236\2\0\1\236\4\0\1\241\11\0\1\242\72\0"+
    "\1\75\2\0\1\75\7\0\27\75\2\0\1\75\17\0"+
    "\1\340\13\0\1\341\52\0\1\342\71\0\1\247\1\343"+
    "\1\344\1\247\7\0\27\247\2\0\1\247\25\0\1\345"+
    "\63\0\1\117\2\0\1\117\7\0\13\117\1\346\13\117"+
    "\2\0\1\117\22\0\1\117\2\0\1\117\7\0\10\117"+
    "\1\347\16\117\2\0\1\117\1\0\1\331\20\0\1\117"+
    "\2\0\1\117\7\0\23\117\1\350\3\117\2\0\1\117"+
    "\22\0\1\117\2\0\1\117\7\0\7\117\1\351\17\117"+
    "\2\0\1\117\3\0\5\255\1\352\61\255\2\127\1\0"+
    "\1\127\1\0\1\131\61\127\1\137\2\0\1\137\1\0"+
    "\1\140\10\137\1\0\43\137\1\0\5\137\2\0\1\137"+
    "\1\0\11\137\1\0\1\260\1\353\1\137\1\260\7\137"+
    "\27\260\1\137\1\0\1\260\4\137\2\0\1\137\1\0"+
    "\11\137\1\0\1\260\1\353\1\137\1\260\7\137\16\260"+
    "\1\354\10\260\1\137\1\0\1\260\3\137\1\262\1\216"+
    "\1\0\1\262\1\0\5\262\1\355\3\262\1\216\43\262"+
    "\1\216\4\262\1\137\2\0\1\137\1\0\5\137\1\356"+
    "\3\137\1\0\43\137\1\0\5\137\2\0\1\137\1\0"+
    "\11\137\1\0\3\137\1\357\37\137\1\0\5\137\2\0"+
    "\1\137\1\0\11\137\1\0\26\137\1\360\14\137\1\0"+
    "\5\137\2\0\1\137\1\0\11\137\1\0\23\137\1\361"+
    "\17\137\1\0\2\137\1\361\2\137\2\0\1\137\1\0"+
    "\11\137\1\0\36\137\1\362\4\137\1\0\5\137\2\0"+
    "\1\137\1\0\11\137\1\0\22\137\1\363\20\137\1\0"+
    "\4\137\17\0\1\271\1\364\1\0\1\271\7\0\27\271"+
    "\2\0\1\271\22\0\1\271\1\364\1\0\1\271\7\0"+
    "\16\271\1\365\10\271\2\0\1\271\53\0\1\366\65\0"+
    "\1\367\36\0\1\165\2\0\1\165\7\0\14\165\1\370"+
    "\12\165\2\0\1\165\22\0\1\165\2\0\1\165\7\0"+
    "\21\165\1\371\5\165\2\0\1\165\2\0\1\372\17\0"+
    "\1\165\2\0\1\165\7\0\20\165\1\373\6\165\2\0"+
    "\1\165\22\0\1\165\2\0\1\165\7\0\17\165\1\374"+
    "\7\165\2\0\1\165\22\0\1\165\2\0\1\165\7\0"+
    "\3\165\1\375\23\165\2\0\1\165\40\0\1\376\100\0"+
    "\1\377\20\0\1\304\24\0\1\305\41\0\1\304\11\0"+
    "\2\203\2\0\1\204\1\203\1\0\1\204\3\0\1\305"+
    "\3\0\2\204\1\306\13\204\1\u0100\10\204\2\0\1\204"+
    "\4\0\1\304\11\0\2\203\2\0\1\204\1\203\1\0"+
    "\1\204\3\0\1\305\3\0\2\204\1\306\12\204\1\u0101"+
    "\11\204\2\0\1\204\4\0\1\304\11\0\2\203\2\0"+
    "\1\204\1\203\1\0\1\204\3\0\1\305\3\0\1\u0102"+
    "\1\204\1\306\24\204\2\0\1\204\35\0\1\u0103\53\0"+
    "\1\31\2\0\1\31\7\0\4\31\1\u0104\22\31\2\0"+
    "\1\31\41\0\1\u0105\47\0\1\31\2\0\1\31\7\0"+
    "\16\31\1\u0106\10\31\2\0\1\31\22\0\1\31\2\0"+
    "\1\31\7\0\1\u0107\26\31\2\0\1\31\22\0\1\214"+
    "\2\0\1\214\7\0\27\214\2\0\1\214\22\0\1\214"+
    "\1\316\1\0\1\214\7\0\15\214\1\u0108\11\214\2\0"+
    "\1\214\15\0\1\320\73\0\1\54\1\221\1\0\1\322"+
    "\7\0\27\54\2\0\1\54\52\0\1\u0109\64\0\1\u010a"+
    "\40\0\1\54\1\221\1\0\1\54\7\0\21\54\1\u010b"+
    "\5\54\2\0\1\54\2\0\1\u010c\17\0\1\54\1\221"+
    "\1\0\1\54\7\0\4\54\1\u010d\22\54\2\0\1\54"+
    "\41\0\1\u010e\47\0\1\54\1\221\1\0\1\54\7\0"+
    "\15\54\1\65\11\54\2\0\1\54\52\0\1\u010f\36\0"+
    "\1\54\1\221\1\0\1\54\7\0\16\54\1\u0110\10\54"+
    "\2\0\1\54\22\0\1\54\1\221\1\0\1\54\7\0"+
    "\4\54\1\65\22\54\2\0\1\54\22\0\1\54\1\221"+
    "\1\0\1\54\7\0\1\u0111\26\54\2\0\1\54\22\0"+
    "\1\54\1\221\1\0\1\54\7\0\20\54\1\65\6\54"+
    "\2\0\1\54\22\0\1\236\2\0\1\236\7\0\27\236"+
    "\2\0\1\236\22\0\1\236\1\336\1\0\1\236\7\0"+
    "\15\236\1\u0112\11\236\2\0\1\236\17\0\1\u0113\71\0"+
    "\1\u0114\2\0\1\u0114\7\0\27\u0114\2\0\1\u0114\22\0"+
    "\1\117\2\0\1\117\7\0\21\117\1\u0115\5\117\2\0"+
    "\1\117\2\0\1\u010c\17\0\1\117\2\0\1\117\7\0"+
    "\15\117\1\125\11\117\2\0\1\117\22\0\1\117\2\0"+
    "\1\117\7\0\4\117\1\125\22\117\2\0\1\117\22\0"+
    "\1\117\2\0\1\117\7\0\20\117\1\125\6\117\2\0"+
    "\1\117\10\0\1\255\61\0\1\137\2\0\1\137\1\0"+
    "\11\137\1\0\1\260\2\137\1\260\7\137\27\260\1\137"+
    "\1\0\1\260\4\137\2\0\1\137\1\0\11\137\1\0"+
    "\1\260\1\353\1\137\1\260\7\137\15\260\1\u0116\11\260"+
    "\1\137\1\0\1\260\4\137\2\0\1\137\1\0\5\137"+
    "\1\355\3\137\1\0\43\137\1\0\5\137\2\0\1\137"+
    "\1\0\11\137\1\0\34\137\1\u0117\6\137\1\0\3\137"+
    "\1\u0117\1\137\2\0\1\137\1\0\11\137\1\0\30\137"+
    "\1\153\12\137\1\0\5\137\2\0\1\137\1\0\11\137"+
    "\1\0\17\137\1\153\23\137\1\0\5\137\2\0\1\137"+
    "\1\0\11\137\1\0\33\137\1\153\7\137\1\0\4\137"+
    "\17\0\1\271\2\0\1\271\7\0\27\271\2\0\1\271"+
    "\22\0\1\271\1\364\1\0\1\271\7\0\15\271\1\u0118"+
    "\11\271\2\0\1\271\52\0\1\u0119\54\0\1\u011a\50\0"+
    "\1\165\2\0\1\165\7\0\1\165\1\u011b\25\165\2\0"+
    "\1\165\22\0\1\165\2\0\1\165\7\0\21\165\1\u011c"+
    "\5\165\2\0\1\165\2\0\1\u011d\53\0\1\u011d\12\0"+
    "\1\u011d\17\0\1\165\2\0\1\165\7\0\6\165\1\u011e"+
    "\20\165\2\0\1\165\22\0\1\165\2\0\1\165\7\0"+
    "\4\165\1\u011f\22\165\2\0\1\165\40\0\1\u0120\32\0"+
    "\1\304\11\0\2\203\2\0\1\204\1\203\1\0\1\204"+
    "\3\0\1\305\3\0\2\204\1\306\12\204\1\u0121\11\204"+
    "\2\0\1\204\4\0\1\304\11\0\2\203\2\0\1\204"+
    "\1\203\1\0\1\204\3\0\1\305\3\0\2\204\1\306"+
    "\2\204\1\u0122\21\204\2\0\1\204\4\0\1\304\11\0"+
    "\2\203\2\0\1\204\1\203\1\0\1\204\3\0\1\305"+
    "\3\0\2\204\1\306\15\204\1\u0123\6\204\2\0\1\204"+
    "\55\0\1\u0124\33\0\1\31\2\0\1\31\7\0\20\31"+
    "\1\u0125\6\31\2\0\1\31\55\0\1\u0126\33\0\1\31"+
    "\2\0\1\31\7\0\24\31\1\u0127\2\31\2\0\1\31"+
    "\22\0\1\31\2\0\1\31\7\0\22\31\1\u0128\4\31"+
    "\2\0\1\31\22\0\1\214\1\316\1\0\1\214\7\0"+
    "\5\214\1\u0129\21\214\2\0\1\214\53\0\1\u012a\63\0"+
    "\1\u012b\40\0\1\54\1\221\1\0\1\54\7\0\2\54"+
    "\1\u012c\1\54\1\65\22\54\2\0\1\54\37\0\1\u012d"+
    "\1\0\1\u010f\47\0\1\54\1\221\1\0\1\54\7\0"+
    "\20\54\1\u012e\6\54\2\0\1\54\55\0\1\u012f\33\0"+
    "\1\54\1\221\1\0\1\54\7\0\24\54\1\u0130\2\54"+
    "\2\0\1\54\22\0\1\54\1\221\1\0\1\54\7\0"+
    "\22\54\1\u0131\4\54\2\0\1\54\22\0\1\236\1\336"+
    "\1\0\1\236\7\0\5\236\1\u0132\21\236\2\0\1\236"+
    "\22\0\1\117\2\0\1\117\7\0\2\117\1\u0133\1\117"+
    "\1\125\22\117\2\0\1\117\3\0\1\137\2\0\1\137"+
    "\1\0\11\137\1\0\1\260\1\353\1\137\1\260\7\137"+
    "\5\260\1\u0134\21\260\1\137\1\0\1\260\4\137\2\0"+
    "\1\137\1\0\11\137\1\0\15\137\1\u0135\1\137\1\153"+
    "\23\137\1\0\4\137\17\0\1\271\1\364\1\0\1\271"+
    "\7\0\5\271\1\u0136\21\271\2\0\1\271\42\0\1\u0137"+
    "\112\0\1\u0138\22\0\1\165\2\0\1\165\7\0\4\165"+
    "\1\u0139\22\165\2\0\1\165\22\0\1\165\2\0\1\165"+
    "\7\0\25\165\1\u013a\1\165\2\0\1\165\62\0\1\u013b"+
    "\26\0\1\165\2\0\1\165\7\0\4\165\1\u013c\22\165"+
    "\2\0\1\165\66\0\1\u013d\4\0\1\304\11\0\2\203"+
    "\2\0\1\204\1\203\1\0\1\204\3\0\1\305\3\0"+
    "\2\204\1\306\2\204\1\u013e\21\204\2\0\1\204\4\0"+
    "\1\304\11\0\2\203\2\0\1\204\1\203\1\0\1\204"+
    "\3\0\1\305\3\0\2\204\1\306\24\204\2\0\1\204"+
    "\1\0\1\u013f\2\0\1\304\11\0\2\203\2\0\1\204"+
    "\1\203\1\0\1\204\3\0\1\305\3\0\2\204\1\306"+
    "\17\204\1\u0140\4\204\2\0\1\204\57\0\1\u0141\31\0"+
    "\1\31\2\0\1\31\7\0\22\31\1\u0142\4\31\2\0"+
    "\1\31\57\0\1\u0143\31\0\1\31\2\0\1\31\7\0"+
    "\4\31\1\u0144\22\31\2\0\1\31\22\0\1\31\2\0"+
    "\1\31\7\0\4\31\1\u0145\22\31\2\0\1\31\22\0"+
    "\1\214\1\316\1\0\1\214\7\0\27\214\2\0\1\214"+
    "\1\0\1\u0146\53\0\1\u0147\43\0\1\u0148\56\0\1\54"+
    "\1\221\1\0\1\54\7\0\7\54\1\65\17\54\2\0"+
    "\1\54\44\0\1\u010f\44\0\1\54\1\221\1\0\1\54"+
    "\7\0\22\54\1\u0149\4\54\2\0\1\54\57\0\1\u014a"+
    "\31\0\1\54\1\221\1\0\1\54\7\0\4\54\1\u014b"+
    "\22\54\2\0\1\54\22\0\1\54\1\221\1\0\1\54"+
    "\7\0\4\54\1\u014c\22\54\2\0\1\54\22\0\1\236"+
    "\1\336\1\0\1\236\7\0\27\236\2\0\1\236\1\0"+
    "\1\u014d\20\0\1\117\2\0\1\117\7\0\7\117\1\125"+
    "\17\117\2\0\1\117\3\0\1\137\2\0\1\137\1\0"+
    "\11\137\1\0\1\260\1\353\1\137\1\260\7\137\27\260"+
    "\1\137\1\0\1\260\1\137\1\u014e\2\137\2\0\1\137"+
    "\1\0\11\137\1\0\22\137\1\153\20\137\1\0\4\137"+
    "\17\0\1\271\1\364\1\0\1\271\7\0\27\271\2\0"+
    "\1\271\1\0\1\u014f\43\0\1\u014f\22\0\1\u014f\56\0"+
    "\1\u0150\30\0\1\165\2\0\1\165\7\0\20\165\1\u0151"+
    "\6\165\2\0\1\165\22\0\1\165\2\0\1\165\7\0"+
    "\16\165\1\u0152\10\165\2\0\1\165\53\0\1\u0153\35\0"+
    "\1\165\2\0\1\165\7\0\22\165\1\u0154\4\165\2\0"+
    "\1\165\60\0\1\u0155\12\0\1\304\11\0\2\203\2\0"+
    "\1\204\1\203\1\0\1\204\3\0\1\305\3\0\2\204"+
    "\1\306\24\204\2\0\1\204\1\0\1\u0156\41\0\1\u0157"+
    "\27\0\1\304\11\0\2\203\2\0\1\204\1\203\1\0"+
    "\1\204\3\0\1\305\3\0\2\204\1\306\24\204\2\0"+
    "\1\u0158\66\0\1\u0159\22\0\1\31\2\0\1\31\7\0"+
    "\27\31\2\0\1\u015a\66\0\1\u015b\43\0\1\u015c\64\0"+
    "\1\u015d\47\0\1\54\1\221\1\0\1\54\7\0\27\54"+
    "\2\0\1\u015e\66\0\1\u015f\43\0\1\u0160\26\0\1\137"+
    "\2\0\1\137\1\0\11\137\1\0\21\137\1\u0161\21\137"+
    "\1\0\4\137\40\0\1\u0162\101\0\1\u0163\12\0\1\u0163"+
    "\17\0\1\165\2\0\1\165\7\0\16\165\1\u0164\10\165"+
    "\2\0\1\165\22\0\1\165\2\0\1\165\7\0\20\165"+
    "\1\u0165\6\165\2\0\1\165\55\0\1\u0166\67\0\1\u0167"+
    "\12\0\1\u0167\40\0\1\u0168\45\0\1\u0169\50\0\1\304"+
    "\11\0\2\203\2\0\1\204\1\203\1\0\1\204\3\0"+
    "\1\305\3\0\2\204\1\306\20\204\1\u016a\3\204\2\0"+
    "\1\204\60\0\1\u016b\30\0\1\31\2\0\1\31\7\0"+
    "\23\31\1\u016c\3\31\2\0\1\31\60\0\1\u016d\30\0"+
    "\1\u016e\76\0\1\u016f\56\0\1\54\1\221\1\0\1\54"+
    "\7\0\23\54\1\u0170\3\54\2\0\1\54\60\0\1\u0171"+
    "\30\0\1\u0172\47\0\1\137\2\0\1\137\1\0\11\137"+
    "\1\0\1\u0173\42\137\1\0\4\137\17\0\1\u0174\105\0"+
    "\1\u0175\47\0\1\165\2\0\1\165\7\0\5\165\1\u0176"+
    "\21\165\2\0\1\165\22\0\1\165\2\0\1\165\7\0"+
    "\3\165\1\u0177\23\165\2\0\1\165\40\0\1\u0178\67\0"+
    "\1\u0179\47\0\1\u017a\50\0\1\304\15\0\1\u017b\2\0"+
    "\1\u017b\3\0\1\305\3\0\2\u017b\1\u017c\24\u017b\2\0"+
    "\1\u017b\4\0\1\304\11\0\2\203\2\0\1\204\1\203"+
    "\1\0\1\204\3\0\1\305\3\0\2\204\1\306\16\204"+
    "\1\u017d\5\204\2\0\1\204\2\0\1\u017e\53\0\1\u017e"+
    "\12\0\1\u017e\17\0\1\31\2\0\1\31\7\0\17\31"+
    "\1\u017f\7\31\2\0\1\31\54\0\1\u0180\34\0\1\54"+
    "\1\221\1\0\1\54\7\0\17\54\1\u0181\7\54\2\0"+
    "\1\54\54\0\1\u0182\67\0\1\u0183\33\0\1\165\2\0"+
    "\1\165\7\0\6\165\1\u0184\20\165\2\0\1\165\55\0"+
    "\1\u0185\15\0\1\304\15\0\1\u017a\2\0\1\u017a\3\0"+
    "\1\305\3\0\2\u017a\1\u0186\24\u017a\2\0\1\u017a\4\0"+
    "\1\304\15\0\1\u017b\1\336\1\0\1\u017b\3\0\1\305"+
    "\3\0\2\u017b\1\u017c\24\u017b\2\0\1\u017b\4\0\1\304"+
    "\15\0\1\u017b\1\336\1\0\1\u017b\3\0\1\305\3\0"+
    "\2\u017b\1\u017c\13\u017b\1\u0187\10\u017b\2\0\1\u017b\4\0"+
    "\1\304\11\0\2\203\2\0\1\204\1\203\1\0\1\204"+
    "\3\0\1\305\3\0\2\204\1\306\1\204\1\u0188\22\204"+
    "\2\0\1\204\41\0\1\u0189\47\0\1\31\2\0\1\31"+
    "\7\0\3\31\1\u018a\23\31\2\0\1\31\40\0\1\u018b"+
    "\50\0\1\54\1\221\1\0\1\54\7\0\3\54\1\u018c"+
    "\23\54\2\0\1\54\40\0\1\u018d\103\0\1\u018e\33\0"+
    "\1\165\2\0\1\165\7\0\20\165\1\u018f\6\165\2\0"+
    "\1\165\55\0\1\u0190\15\0\1\304\15\0\1\u017a\2\0"+
    "\1\u017a\3\0\1\305\3\0\2\u017a\1\u0186\13\u017a\1\u0191"+
    "\10\u017a\2\0\1\u017a\4\0\1\304\15\0\1\u017b\1\336"+
    "\1\0\1\u017b\3\0\1\305\3\0\2\u017b\1\u017c\12\u017b"+
    "\1\u0192\11\u017b\2\0\1\u017b\4\0\1\304\11\0\2\203"+
    "\2\0\1\204\1\203\1\0\1\204\3\0\1\305\3\0"+
    "\2\204\1\306\15\204\1\u0193\6\204\2\0\1\204\55\0"+
    "\1\u0194\33\0\1\31\2\0\1\31\7\0\1\u0195\26\31"+
    "\2\0\1\31\35\0\1\u0196\53\0\1\54\1\221\1\0"+
    "\1\54\7\0\1\u0197\26\54\2\0\1\54\35\0\1\u0198"+
    "\76\0\1\u0199\22\0\1\u0199\20\0\1\165\2\0\1\165"+
    "\7\0\16\165\1\u019a\10\165\2\0\1\165\45\0\1\u019b"+
    "\22\0\1\u019b\2\0\1\304\15\0\1\u017a\2\0\1\u017a"+
    "\3\0\1\305\3\0\2\u017a\1\u0186\12\u017a\1\u019c\11\u017a"+
    "\2\0\1\u017a\4\0\1\304\15\0\1\u017b\1\336\1\0"+
    "\1\u017b\3\0\1\305\3\0\2\u017b\1\u017c\2\u017b\1\u019d"+
    "\21\u017b\2\0\1\u017b\4\0\1\304\11\0\2\203\2\0"+
    "\1\204\1\203\1\0\1\204\3\0\1\305\3\0\2\204"+
    "\1\306\15\204\1\u019e\6\204\2\0\1\204\55\0\1\u019f"+
    "\33\0\1\31\2\0\1\31\7\0\22\31\1\u01a0\4\31"+
    "\2\0\1\31\57\0\1\u01a1\31\0\1\54\1\221\1\0"+
    "\1\54\7\0\22\54\1\u01a2\4\54\2\0\1\54\57\0"+
    "\1\u01a3\52\0\1\u01a4\45\0\1\165\2\0\1\165\7\0"+
    "\23\165\1\u01a5\3\165\2\0\1\165\43\0\1\u01a6\27\0"+
    "\1\304\15\0\1\u017a\2\0\1\u017a\3\0\1\305\3\0"+
    "\2\u017a\1\u0186\2\u017a\1\u01a7\21\u017a\2\0\1\u017a\4\0"+
    "\1\304\15\0\1\u017b\1\336\1\0\1\u017b\3\0\1\305"+
    "\3\0\2\u017b\1\u017c\24\u017b\2\0\1\u017b\1\0\1\u0156"+
    "\2\0\1\304\11\0\2\203\2\0\1\204\1\203\1\0"+
    "\1\204\3\0\1\305\3\0\2\204\1\306\5\204\1\u01a8"+
    "\16\204\2\0\1\204\1\0\1\u01a9\43\0\1\u01a9\22\0"+
    "\1\u01a9\20\0\1\31\2\0\1\31\7\0\4\31\1\u01aa"+
    "\22\31\2\0\1\31\41\0\1\u01ab\47\0\1\54\1\221"+
    "\1\0\1\54\7\0\4\54\1\u01ac\22\54\2\0\1\54"+
    "\41\0\1\u01ad\71\0\1\u01ae\44\0\1\165\2\0\1\165"+
    "\7\0\17\165\1\u01af\7\165\2\0\1\165\44\0\1\u01b0"+
    "\26\0\1\304\15\0\1\u017a\2\0\1\u017a\3\0\1\305"+
    "\3\0\2\u017a\1\u0186\24\u017a\2\0\1\u017a\1\0\1\u0156"+
    "\2\0\1\304\11\0\2\203\2\0\1\204\1\203\1\0"+
    "\1\204\3\0\1\305\3\0\2\204\1\306\3\204\1\u01b1"+
    "\20\204\2\0\1\204\43\0\1\u01b2\102\0\1\u01b3\31\0"+
    "\1\165\2\0\1\165\7\0\21\165\1\u01b4\5\165\2\0"+
    "\1\165\2\0\1\u01b5\54\0\1\u01b6\13\0\1\304\11\0"+
    "\2\203\2\0\1\204\1\203\1\0\1\204\3\0\1\305"+
    "\3\0\2\204\1\306\4\204\1\u01b7\17\204\2\0\1\204"+
    "\44\0\1\u01b8\100\0\1\u01b9\12\0\1\u01b9\53\0\1\u01ba"+
    "\12\0\1\u01ba\1\0\1\304\11\0\2\203\2\0\1\204"+
    "\1\203\1\0\1\204\3\0\1\305\3\0\2\204\1\306"+
    "\17\204\1\u01bb\4\204\2\0\1\204\57\0\1\u01bc\13\0"+
    "\1\304\11\0\2\203\2\0\1\204\1\203\1\0\1\204"+
    "\3\0\1\305\3\0\2\204\1\306\16\204\1\u01bd\5\204"+
    "\2\0\1\204\2\0\1\u01be\53\0\1\u01be\12\0\1\u01be";

  private static int [] zzUnpacktrans() {
    int [] result = new int[19965];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\1\12\0\1\11\1\1\1\11\5\1\1\11"+
    "\4\1\1\11\3\1\2\11\1\1\1\11\3\1\1\11"+
    "\13\1\2\11\1\1\1\11\4\1\3\11\1\1\3\11"+
    "\3\1\1\11\3\1\2\11\10\1\1\11\4\1\1\11"+
    "\1\1\2\11\5\1\1\11\10\1\1\11\1\1\1\11"+
    "\1\1\1\11\4\1\1\11\4\1\1\11\2\1\1\11"+
    "\1\1\1\0\6\1\1\0\3\1\1\0\2\1\1\0"+
    "\4\1\2\0\10\1\1\0\3\1\1\0\1\11\3\0"+
    "\1\11\2\0\4\1\1\0\15\1\2\0\5\1\3\0"+
    "\1\11\3\1\1\0\1\1\1\0\4\1\1\11\1\0"+
    "\1\1\2\0\2\1\1\0\1\1\1\0\6\1\1\11"+
    "\1\0\1\11\2\0\21\1\2\0\2\1\1\0\3\1"+
    "\1\11\1\0\3\1\1\0\1\1\1\0\3\1\2\0"+
    "\1\1\1\0\1\1\1\0\1\11\3\1\1\11\5\1"+
    "\2\0\2\1\1\0\2\1\1\0\3\1\1\0\1\1"+
    "\1\0\3\1\2\0\1\1\1\0\1\1\1\0\7\1"+
    "\2\0\2\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\4\1\2\0\1\11\4\1\1\0\1\1\2\0"+
    "\2\1\1\0\1\1\3\0\1\1\1\0\1\1\3\0"+
    "\1\1\2\0\1\1\2\0\2\1\4\0\1\1\1\0"+
    "\1\1\2\0\1\11\1\1\2\0\1\1\2\0\2\1"+
    "\1\11\2\0\3\1\1\0\1\1\1\0\1\1\2\0"+
    "\1\1\2\0\2\1\1\0\1\1\1\0\1\1\2\0"+
    "\1\1\2\0\2\1\1\0\1\1\1\0\1\1\2\0"+
    "\1\1\2\0\2\1\1\0\1\1\1\0\1\1\2\0"+
    "\1\1\2\0\1\1\1\0\1\1\1\11\1\1\1\11"+
    "\1\0\1\1\1\0\1\1\2\0\1\1\1\11\1\0"+
    "\1\1\1\0\2\11\1\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[446];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ImpexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ImpexTypes.BEAN_SHELL_BODY;
            }
          // fall through
          case 77: break;
          case 2:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 78: break;
          case 3:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 79: break;
          case 4:
            { yybegin(YYINITIAL); return ImpexTypes.CRLF;
            }
          // fall through
          case 80: break;
          case 5:
            { return ImpexTypes.LINE_COMMENT;
            }
          // fall through
          case 81: break;
          case 6:
            { yybegin(FIELD_VALUE); return ImpexTypes.VALUE_SUBTYPE;
            }
          // fall through
          case 82: break;
          case 7:
            { yybegin(FIELD_VALUE); return ImpexTypes.FIELD_VALUE_SEPARATOR;
            }
          // fall through
          case 83: break;
          case 8:
            { return ImpexTypes.MACRO_VALUE;
            }
          // fall through
          case 84: break;
          case 9:
            { return ImpexTypes.LEFT_ROUND_BRACKET;
            }
          // fall through
          case 85: break;
          case 10:
            { return ImpexTypes.RIGHT_ROUND_BRACKET;
            }
          // fall through
          case 86: break;
          case 11:
            { return ImpexTypes.BOOLEAN;
            }
          // fall through
          case 87: break;
          case 12:
            { return ImpexTypes.COMMA;
            }
          // fall through
          case 88: break;
          case 13:
            { return ImpexTypes.DIGIT;
            }
          // fall through
          case 89: break;
          case 14:
            { return ImpexTypes.ASSIGN_VALUE;
            }
          // fall through
          case 90: break;
          case 15:
            { return ImpexTypes.LEFT_SQUARE_BRACKET;
            }
          // fall through
          case 91: break;
          case 16:
            { return ImpexTypes.RIGHT_SQUARE_BRACKET;
            }
          // fall through
          case 92: break;
          case 17:
            { yybegin(WAITING_MACRO_VALUE); return ImpexTypes.ASSIGN_VALUE;
            }
          // fall through
          case 93: break;
          case 18:
            { yybegin(HEADER_LINE); return ImpexTypes.HEADER_TYPE;
            }
          // fall through
          case 94: break;
          case 19:
            { return ImpexTypes.HEADER_PARAMETER_NAME;
            }
          // fall through
          case 95: break;
          case 20:
            { return ImpexTypes.DOT;
            }
          // fall through
          case 96: break;
          case 21:
            { return ImpexTypes.PARAMETERS_SEPARATOR;
            }
          // fall through
          case 97: break;
          case 22:
            { yybegin(WAITING_ATTR_OR_PARAM_VALUE); return ImpexTypes.ASSIGN_VALUE;
            }
          // fall through
          case 98: break;
          case 23:
            { yybegin(MODIFIERS_BLOCK); return ImpexTypes.LEFT_SQUARE_BRACKET;
            }
          // fall through
          case 99: break;
          case 24:
            { return ImpexTypes.ALTERNATIVE_PATTERN;
            }
          // fall through
          case 100: break;
          case 25:
            { return ImpexTypes.FIELD_VALUE;
            }
          // fall through
          case 101: break;
          case 26:
            { return ImpexTypes.FIELD_LIST_ITEM_SEPARATOR;
            }
          // fall through
          case 102: break;
          case 27:
            { return ImpexTypes.DEFAULT_PATH_DELIMITER;
            }
          // fall through
          case 103: break;
          case 28:
            { return ImpexTypes.FIELD_VALUE_SEPARATOR;
            }
          // fall through
          case 104: break;
          case 29:
            { return ImpexTypes.ALTERNATIVE_MAP_DELIMITER;
            }
          // fall through
          case 105: break;
          case 30:
            { return ImpexTypes.ATTRIBUTE_SEPARATOR;
            }
          // fall through
          case 106: break;
          case 31:
            { return ImpexTypes.ATTRIBUTE_NAME;
            }
          // fall through
          case 107: break;
          case 32:
            { yybegin(HEADER_LINE); return ImpexTypes.RIGHT_SQUARE_BRACKET;
            }
          // fall through
          case 108: break;
          case 33:
            { yybegin(MODIFIERS_BLOCK); return ImpexTypes.ALTERNATIVE_MAP_DELIMITER;
            }
          // fall through
          case 109: break;
          case 34:
            { return ImpexTypes.ATTRIBUTE_VALUE;
            }
          // fall through
          case 110: break;
          case 35:
            { yybegin(MODIFIERS_BLOCK); return ImpexTypes.ATTRIBUTE_SEPARATOR;
            }
          // fall through
          case 111: break;
          case 36:
            { yypushback(yylength()); yybegin(MACRO_USAGE);
            }
          // fall through
          case 112: break;
          case 37:
            { yybegin(USER_RIGHTS_HEADER_LINE); return ImpexTypes.CRLF;
            }
          // fall through
          case 113: break;
          case 38:
            { return ImpexTypes.CRLF;
            }
          // fall through
          case 114: break;
          case 39:
            { return ImpexTypes.PERMISSION;
            }
          // fall through
          case 115: break;
          case 40:
            { yybegin(USER_RIGHTS_WAIT_FOR_VALUE_LINE); return ImpexTypes.PARAMETERS_SEPARATOR;
            }
          // fall through
          case 116: break;
          case 41:
            { yybegin(USER_RIGHTS_VALUE_LINE); return ImpexTypes.CRLF;
            }
          // fall through
          case 117: break;
          case 42:
            { return ImpexTypes.PERMISSION_ALLOWED;
            }
          // fall through
          case 118: break;
          case 43:
            { return ImpexTypes.PERMISSION_DENIED;
            }
          // fall through
          case 119: break;
          case 44:
            { return ImpexTypes.DOUBLE_STRING;
            }
          // fall through
          case 120: break;
          case 45:
            { yybegin(BEAN_SHELL); return ImpexTypes.BEAN_SHELL_MARKER;
            }
          // fall through
          case 121: break;
          case 46:
            { return ImpexTypes.MACRO_USAGE;
            }
          // fall through
          case 122: break;
          case 47:
            { yypushback(yylength()); yybegin(WAITING_MACRO_CONFIG_USAGE);
            }
          // fall through
          case 123: break;
          case 48:
            { return ImpexTypes.SINGLE_STRING;
            }
          // fall through
          case 124: break;
          case 49:
            { return ImpexTypes.HEADER_SPECIAL_PARAMETER_NAME;
            }
          // fall through
          case 125: break;
          case 50:
            { return ImpexTypes.DOCUMENT_ID;
            }
          // fall through
          case 126: break;
          case 51:
            { yybegin(HEADER_LINE);
                                                              yypushback(1);
                                                              return ImpexTypes.FUNCTION;
            }
          // fall through
          case 127: break;
          case 52:
            { return ImpexTypes.DEFAULT_KEY_VALUE_DELIMITER;
            }
          // fall through
          case 128: break;
          case 53:
            { yybegin(WAITING_MACRO_VALUE); return ImpexTypes.MACRO_USAGE;
            }
          // fall through
          case 129: break;
          case 54:
            { yybegin(MACRO_DECLARATION);
                                                              /* Push back '='. */
                                                              yypushback(1);
                                                              /* Push back spaces. */
                                                              yypushback(yylength() - yytext().toString().trim().length());
                                                              return ImpexTypes.MACRO_NAME_DECLARATION;
            }
          // fall through
          case 130: break;
          case 55:
            { return ImpexTypes.COLLECTION_APPEND_PREFIX;
            }
          // fall through
          case 131: break;
          case 56:
            { return ImpexTypes.COLLECTION_REMOVE_PREFIX;
            }
          // fall through
          case 132: break;
          case 57:
            { return ImpexTypes.UID;
            }
          // fall through
          case 133: break;
          case 58:
            { return ImpexTypes.COLLECTION_MERGE_PREFIX;
            }
          // fall through
          case 134: break;
          case 59:
            { return ImpexTypes.FIELD_VALUE_URL;
            }
          // fall through
          case 135: break;
          case 60:
            { return ImpexTypes.TYPE;
            }
          // fall through
          case 136: break;
          case 61:
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_INSERT;
            }
          // fall through
          case 137: break;
          case 62:
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_REMOVE;
            }
          // fall through
          case 138: break;
          case 63:
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_UPDATE;
            }
          // fall through
          case 139: break;
          case 64:
            { return ImpexTypes.FIELD_VALUE_NULL;
            }
          // fall through
          case 140: break;
          case 65:
            { return ImpexTypes.HEADER_MODE_INSERT;
            }
          // fall through
          case 141: break;
          case 66:
            { return ImpexTypes.HEADER_MODE_REMOVE;
            }
          // fall through
          case 142: break;
          case 67:
            { return ImpexTypes.HEADER_MODE_UPDATE;
            }
          // fall through
          case 143: break;
          case 68:
            { return ImpexTypes.TARGET;
            }
          // fall through
          case 144: break;
          case 69:
            { return ImpexTypes.FIELD_VALUE_IGNORE;
            }
          // fall through
          case 145: break;
          case 70:
            { return ImpexTypes.PASSWORD;
            }
          // fall through
          case 146: break;
          case 71:
            { yybegin(HEADER_TYPE); return ImpexTypes.HEADER_MODE_INSERT_UPDATE;
            }
          // fall through
          case 147: break;
          case 72:
            { return ImpexTypes.HEADER_MODE_INSERT_UPDATE;
            }
          // fall through
          case 148: break;
          case 73:
            { return ImpexTypes.MEMBEROFGROUPS;
            }
          // fall through
          case 149: break;
          case 74:
            { yybegin(YYINITIAL); return ImpexTypes.END_USERRIGHTS;
            }
          // fall through
          case 150: break;
          case 75:
            { yybegin(USER_RIGHTS_END); return ImpexTypes.END_USERRIGHTS;
            }
          // fall through
          case 151: break;
          case 76:
            { yybegin(USER_RIGHTS_START); return ImpexTypes.START_USERRIGHTS;
            }
          // fall through
          case 152: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
