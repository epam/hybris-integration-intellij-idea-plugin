// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _FlexibleSearchLexer.flex

package com.intellij.idea.plugin.hybris.flexibleSearch;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.*;


public class _FlexibleSearchLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000"+
    "\1\u5100\3\u0100\1\u5200\1\u5300\1\u5400\12\u1f00\4\u0100\1\u5500"+
    "\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100\1\u5700\1\u5800\2\u1f00"+
    "\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100\1\u5c00\1\u5d00\1\u5e00"+
    "\1\u5f00\42\u1f00\1\u0100\1\u6000\1\u6100\11\u1f00\1\u6200\24\u1f00"+
    "\1\u6300\1\u6400\1\u1f00\1\u6500\1\u6600\1\u6700\1\u6800\2\u1f00"+
    "\1\u6900\5\u1f00\1\u6a00\1\u6b00\1\u6c00\5\u1f00\1\u6d00\1\u6e00"+
    "\2\u1f00\1\u6f00\1\u1f00\1\u7000\14\u1f00\1\u7100\4\u1f00\246\u0100"+
    "\1\u7200\20\u0100\1\u7300\1\u7400\25\u0100\1\u7500\34\u0100\1\u7600"+
    "\14\u1f00\2\u0100\1\u7700\5\u1f00\23\u5d00\1\u7800\u0aec\u1f00\1\u7900"+
    "\1\u7a00\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\1\16\0\4\3\1\1\1\4"+
    "\1\5\1\3\1\0\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\11\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\3\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\51\1\62\1\3\1\63\1\3\1\64\1\65\6\66"+
    "\13\51\1\67\5\51\1\70\2\51\1\3\1\71\1\3"+
    "\1\72\6\0\1\73\32\0\1\1\1\3\4\0\4\3"+
    "\1\51\2\3\1\0\7\3\1\51\4\3\1\51\5\3"+
    "\27\51\1\3\37\51\1\3\u01ca\51\4\3\14\51\16\3"+
    "\5\51\7\3\1\51\1\3\1\51\21\3\160\0\5\51"+
    "\1\3\2\51\2\3\4\51\1\3\1\51\6\3\1\51"+
    "\1\3\3\51\1\3\1\51\1\3\24\51\1\3\123\51"+
    "\1\3\213\51\1\3\5\0\2\3\246\51\1\3\46\51"+
    "\2\3\1\51\6\3\51\51\6\3\1\0\1\3\55\0"+
    "\1\3\1\0\1\3\2\0\1\3\2\0\1\3\1\0"+
    "\10\3\33\51\4\3\4\51\15\3\6\0\5\3\1\0"+
    "\4\3\13\0\1\3\1\0\3\3\53\51\25\0\12\74"+
    "\4\3\2\51\1\0\143\51\1\3\1\51\10\0\1\3"+
    "\6\0\2\51\2\0\1\3\4\0\2\51\12\74\3\51"+
    "\2\3\1\51\17\3\1\0\1\51\1\0\36\51\33\0"+
    "\2\3\131\51\13\0\1\51\16\3\12\74\41\51\11\0"+
    "\2\51\4\3\1\51\2\3\3\0\26\51\4\0\1\51"+
    "\11\0\1\51\3\0\1\51\5\0\22\3\31\51\3\0"+
    "\4\3\13\51\65\3\25\51\1\3\10\51\12\0\13\3"+
    "\61\0\66\51\3\0\1\51\22\0\1\51\7\0\12\51"+
    "\2\0\2\3\12\74\1\3\20\51\3\0\1\3\10\51"+
    "\2\3\2\51\2\3\26\51\1\3\7\51\1\3\1\51"+
    "\3\3\4\51\2\3\1\0\1\51\7\0\2\3\2\0"+
    "\2\3\3\0\1\51\10\3\1\0\4\3\2\51\1\3"+
    "\3\51\2\0\2\3\12\74\2\51\2\0\7\3\1\0"+
    "\1\51\1\3\1\0\2\3\3\0\1\3\6\51\4\3"+
    "\2\51\2\3\26\51\1\3\7\51\1\3\2\51\1\3"+
    "\2\51\1\3\2\51\2\3\1\0\1\3\5\0\4\3"+
    "\2\0\2\3\3\0\3\3\1\0\7\3\4\51\1\3"+
    "\1\51\7\3\12\74\2\0\3\51\1\0\13\3\3\0"+
    "\1\3\11\51\1\3\3\51\1\3\26\51\1\3\7\51"+
    "\1\3\2\51\1\3\5\51\2\3\1\0\1\51\10\0"+
    "\1\3\3\0\1\3\3\0\2\3\1\51\17\3\2\51"+
    "\2\0\2\3\12\74\1\3\1\0\7\3\1\51\6\0"+
    "\1\3\3\0\1\3\10\51\2\3\2\51\2\3\26\51"+
    "\1\3\7\51\1\3\2\51\1\3\5\51\2\3\1\0"+
    "\1\51\7\0\2\3\2\0\2\3\3\0\7\3\3\0"+
    "\4\3\2\51\1\3\3\51\2\0\2\3\12\74\1\3"+
    "\1\51\20\3\1\0\1\51\1\3\6\51\3\3\3\51"+
    "\1\3\4\51\3\3\2\51\1\3\1\51\1\3\2\51"+
    "\3\3\2\51\3\3\3\51\3\3\14\51\4\3\5\0"+
    "\3\3\3\0\1\3\4\0\2\3\1\51\6\3\1\0"+
    "\16\3\12\74\11\3\1\0\6\3\5\0\10\51\1\3"+
    "\3\51\1\3\27\51\1\3\20\51\3\3\1\51\7\0"+
    "\1\3\3\0\1\3\4\0\7\3\2\0\1\3\3\51"+
    "\5\3\2\51\2\0\2\3\12\74\20\3\1\51\3\0"+
    "\1\3\10\51\1\3\3\51\1\3\27\51\1\3\12\51"+
    "\1\3\5\51\2\3\1\0\1\51\7\0\1\3\3\0"+
    "\1\3\4\0\7\3\2\0\7\3\1\51\1\3\2\51"+
    "\2\0\2\3\12\74\1\3\2\51\15\3\5\0\10\51"+
    "\1\3\3\51\1\3\51\51\2\0\1\51\7\0\1\3"+
    "\3\0\1\3\4\0\1\51\5\3\3\51\1\0\7\3"+
    "\3\51\2\0\2\3\12\74\12\3\6\51\1\3\3\0"+
    "\1\3\22\51\3\3\30\51\1\3\11\51\1\3\1\51"+
    "\2\3\7\51\3\3\1\0\4\3\6\0\1\3\1\0"+
    "\1\3\10\0\6\3\12\74\2\3\2\0\15\3\60\51"+
    "\1\0\2\51\7\0\4\3\1\0\7\51\10\0\1\3"+
    "\12\74\47\3\2\51\1\3\1\51\1\3\5\51\1\3"+
    "\30\51\1\3\1\51\1\3\12\51\1\0\2\51\11\0"+
    "\1\51\2\3\5\51\1\3\1\51\1\3\6\0\2\3"+
    "\12\74\2\3\4\51\40\3\1\51\27\3\2\0\6\3"+
    "\12\74\13\3\1\0\1\3\1\0\1\3\1\0\4\3"+
    "\2\0\10\51\1\3\44\51\4\3\24\0\1\3\2\0"+
    "\5\51\13\0\1\3\44\0\11\3\1\0\71\3\53\51"+
    "\24\0\1\51\12\74\6\3\6\51\4\0\4\51\3\0"+
    "\1\51\3\0\2\51\7\0\3\51\4\0\15\51\14\0"+
    "\1\51\1\0\12\74\4\0\2\3\46\51\1\3\1\51"+
    "\5\3\1\51\2\3\53\51\1\3\115\51\1\3\4\51"+
    "\2\3\7\51\1\3\1\51\1\3\4\51\2\3\51\51"+
    "\1\3\4\51\2\3\41\51\1\3\4\51\2\3\7\51"+
    "\1\3\1\51\1\3\4\51\2\3\17\51\1\3\71\51"+
    "\1\3\4\51\2\3\103\51\2\3\3\0\40\3\20\51"+
    "\20\3\126\51\2\3\6\51\3\3\u016c\51\2\3\21\51"+
    "\1\1\32\51\5\3\113\51\3\3\3\0\10\51\7\3"+
    "\15\51\1\3\4\51\3\0\13\3\22\51\3\0\13\3"+
    "\22\51\2\0\14\3\15\51\1\3\3\51\1\3\2\0"+
    "\14\3\64\51\40\0\3\3\1\51\3\3\1\0\1\51"+
    "\1\0\2\3\12\74\41\3\4\0\1\3\12\74\6\3"+
    "\131\51\7\3\5\51\2\0\42\51\1\0\1\51\5\3"+
    "\106\51\12\3\37\51\1\3\14\0\4\3\14\0\12\3"+
    "\12\74\36\51\2\3\5\51\13\3\54\51\4\3\32\51"+
    "\6\3\12\74\46\3\27\51\5\0\4\3\65\51\12\0"+
    "\1\3\35\0\2\3\1\0\12\74\6\3\12\74\15\3"+
    "\1\51\10\3\16\0\1\3\2\0\77\3\5\0\57\51"+
    "\21\0\7\51\4\3\12\74\21\3\11\0\14\3\3\0"+
    "\36\51\15\0\2\51\12\74\54\51\16\0\14\3\44\51"+
    "\24\0\10\3\12\74\3\3\3\51\12\74\44\51\2\3"+
    "\11\51\7\3\53\51\2\3\3\51\20\3\3\0\1\3"+
    "\25\0\4\51\1\0\6\51\1\0\2\51\3\0\1\51"+
    "\5\3\300\51\72\0\1\3\5\0\26\51\2\3\6\51"+
    "\2\3\46\51\2\3\6\51\2\3\10\51\1\3\1\51"+
    "\1\3\1\51\1\3\1\51\1\3\37\51\2\3\65\51"+
    "\1\3\7\51\1\3\1\51\3\3\3\51\1\3\7\51"+
    "\3\3\4\51\2\3\6\51\4\3\15\51\5\3\3\51"+
    "\1\3\7\51\3\3\13\1\5\0\30\3\2\1\5\0"+
    "\1\1\17\3\2\0\23\3\1\0\12\3\1\1\5\0"+
    "\1\3\12\0\1\3\1\51\15\3\1\51\20\3\15\51"+
    "\3\3\40\0\20\3\15\0\4\3\1\0\3\3\14\0"+
    "\21\3\1\51\4\3\1\51\2\3\12\51\1\3\1\51"+
    "\3\3\5\51\6\3\1\51\1\3\1\51\1\3\1\51"+
    "\1\3\4\51\1\3\13\51\2\3\4\51\5\3\5\51"+
    "\4\3\1\51\21\3\43\0\2\51\4\0\u0177\3\57\51"+
    "\1\3\57\51\1\3\205\51\6\3\4\51\3\0\2\51"+
    "\14\3\46\51\1\3\1\51\5\3\1\51\2\3\70\51"+
    "\7\3\1\51\17\3\1\0\27\51\11\3\7\51\1\3"+
    "\7\51\1\3\7\51\1\3\7\51\1\3\7\51\1\3"+
    "\7\51\1\3\7\51\1\3\7\51\1\3\40\0\57\3"+
    "\1\51\320\3\1\1\4\3\2\51\1\0\31\3\17\0"+
    "\1\3\5\51\2\3\3\0\2\51\4\3\126\51\2\3"+
    "\2\0\2\3\3\51\1\3\132\51\1\3\4\51\5\3"+
    "\53\51\1\3\136\51\21\3\33\51\5\0\60\3\306\51"+
    "\12\0\100\3\360\51\15\0\3\3\215\51\103\3\56\51"+
    "\2\3\15\51\3\3\20\51\12\74\2\51\24\3\57\51"+
    "\1\0\4\3\12\0\1\3\37\51\2\0\106\51\14\0"+
    "\45\3\11\51\2\3\147\51\2\3\65\51\2\3\5\51"+
    "\4\0\52\3\2\0\13\51\1\0\3\51\1\0\4\51"+
    "\1\0\27\51\5\0\4\3\1\0\13\3\1\0\7\3"+
    "\64\51\14\3\2\0\62\51\22\0\12\3\12\74\6\3"+
    "\22\0\6\51\3\3\1\51\1\3\2\51\1\0\12\74"+
    "\34\51\10\0\2\3\27\51\15\0\14\3\35\51\3\3"+
    "\4\0\57\51\16\0\16\3\1\51\12\74\6\3\5\51"+
    "\1\0\12\51\12\74\5\51\1\3\51\51\16\0\11\3"+
    "\3\51\1\0\10\51\2\0\2\3\12\74\6\3\27\51"+
    "\3\3\1\51\3\0\62\51\1\0\1\51\3\0\2\51"+
    "\2\0\5\51\2\0\1\51\1\0\1\51\30\3\3\51"+
    "\2\3\13\51\5\0\2\3\3\51\2\0\12\3\6\51"+
    "\2\3\6\51\2\3\6\51\11\3\7\51\1\3\7\51"+
    "\1\3\53\51\1\3\14\51\2\0\6\3\163\51\10\0"+
    "\1\3\2\0\2\3\12\74\6\3\244\51\14\3\27\51"+
    "\4\3\61\51\4\3\156\51\2\3\152\51\46\3\7\51"+
    "\14\3\5\51\5\3\1\51\1\0\12\51\1\3\15\51"+
    "\1\3\5\51\1\3\1\51\1\3\2\51\1\3\2\51"+
    "\1\3\154\51\41\3\153\51\22\3\100\51\2\3\66\51"+
    "\50\3\14\51\1\0\3\3\20\0\20\3\20\0\3\3"+
    "\2\0\30\3\3\0\31\3\1\0\6\3\5\51\1\3"+
    "\207\51\2\3\1\0\4\3\1\0\13\3\12\74\7\3"+
    "\32\51\4\3\1\0\1\3\32\51\13\3\131\51\3\3"+
    "\6\51\2\3\6\51\2\3\6\51\2\3\3\51\3\3"+
    "\2\0\3\3\2\0\22\3\3\0\4\3\14\51\1\3"+
    "\32\51\1\3\23\51\1\3\2\51\1\3\17\51\2\3"+
    "\16\51\42\3\173\51\105\3\65\0\210\3\1\0\202\3"+
    "\35\51\3\3\61\51\17\3\1\0\37\3\40\51\15\3"+
    "\24\51\1\0\10\51\1\0\5\3\46\51\5\0\5\3"+
    "\36\51\2\3\44\51\4\3\10\51\1\3\5\0\52\3"+
    "\236\51\2\3\12\74\6\3\44\51\4\3\44\51\4\3"+
    "\50\51\10\3\64\51\234\3\67\51\11\3\26\51\12\3"+
    "\10\51\230\3\6\51\2\3\1\51\1\3\54\51\1\3"+
    "\2\51\3\3\1\51\2\3\27\51\12\3\27\51\11\3"+
    "\37\51\101\3\23\51\1\3\2\51\12\3\26\51\12\3"+
    "\32\51\106\3\70\51\6\3\2\51\100\3\1\51\3\0"+
    "\1\3\2\0\5\3\4\0\4\51\1\3\3\51\1\3"+
    "\35\51\2\3\3\0\4\3\1\0\40\3\35\51\3\3"+
    "\35\51\43\3\10\51\1\3\34\51\2\0\31\3\66\51"+
    "\12\3\26\51\12\3\23\51\15\3\22\51\156\3\111\51"+
    "\67\3\63\51\15\3\63\51\15\3\44\51\4\0\10\3"+
    "\12\74\u0146\3\52\0\1\3\2\0\3\3\2\0\116\3"+
    "\35\51\12\3\1\51\10\3\26\51\13\0\137\3\25\0"+
    "\33\3\27\51\11\3\3\0\65\51\17\0\37\3\12\74"+
    "\17\3\4\0\55\51\13\0\2\3\1\0\17\3\1\0"+
    "\2\3\31\51\7\3\12\74\6\3\3\0\44\51\16\0"+
    "\1\3\12\74\4\3\1\51\3\0\10\3\43\51\1\0"+
    "\2\3\1\51\11\3\3\0\60\51\16\0\4\51\4\3"+
    "\4\0\1\3\2\0\12\74\1\51\1\3\1\51\43\3"+
    "\22\51\1\3\31\51\14\0\6\3\1\0\101\3\7\51"+
    "\1\3\1\51\1\3\4\51\1\3\17\51\1\3\12\51"+
    "\7\3\57\51\14\0\5\3\12\74\6\3\4\0\1\3"+
    "\10\51\2\3\2\51\2\3\26\51\1\3\7\51\1\3"+
    "\2\51\1\3\5\51\1\3\2\0\1\51\7\0\2\3"+
    "\2\0\2\3\3\0\2\3\1\51\6\3\1\0\5\3"+
    "\5\51\2\0\2\3\7\0\3\3\5\0\213\3\65\51"+
    "\22\0\4\51\5\3\12\74\4\3\1\0\1\51\2\0"+
    "\36\3\60\51\24\0\2\51\1\3\1\51\10\3\12\74"+
    "\246\3\57\51\7\0\2\3\11\0\27\3\4\51\2\0"+
    "\42\3\60\51\21\0\3\3\1\51\13\3\12\74\46\3"+
    "\53\51\15\0\1\51\7\3\12\74\66\3\33\51\2\3"+
    "\17\0\4\3\12\74\306\3\54\51\17\0\145\3\100\51"+
    "\12\74\25\3\1\51\7\0\2\3\1\0\2\3\10\0"+
    "\1\3\2\0\1\3\36\0\1\3\2\0\2\3\11\0"+
    "\14\3\12\0\106\3\10\51\2\3\47\51\7\0\2\3"+
    "\7\0\1\51\1\3\1\51\1\0\33\3\1\51\12\0"+
    "\50\51\7\0\1\51\4\0\10\3\1\0\10\3\1\51"+
    "\13\0\56\51\20\0\3\3\1\51\42\3\71\51\7\3"+
    "\11\51\1\3\45\51\10\0\1\3\10\0\1\51\17\3"+
    "\12\74\30\3\36\51\2\3\26\0\1\3\16\0\111\3"+
    "\7\51\1\3\2\51\1\3\46\51\6\0\3\3\1\0"+
    "\1\3\2\0\1\3\7\0\1\51\1\0\10\3\12\74"+
    "\6\3\6\51\1\3\2\51\1\3\40\51\5\0\1\3"+
    "\2\0\1\3\5\0\1\51\7\3\12\74\u0136\3\23\51"+
    "\4\0\271\3\1\0\54\3\4\0\37\3\232\51\146\3"+
    "\157\0\21\3\304\51\274\3\57\51\1\3\11\0\307\3"+
    "\107\51\271\3\71\51\7\3\37\51\1\3\12\74\146\3"+
    "\36\51\2\3\5\0\13\3\60\51\7\0\11\3\4\51"+
    "\14\3\12\74\11\3\25\51\5\3\23\51\260\3\100\51"+
    "\200\3\113\51\4\3\1\0\1\51\67\0\7\3\4\0"+
    "\15\51\100\3\2\51\1\3\1\51\1\0\13\3\2\0"+
    "\16\3\370\51\10\3\363\51\u01e3\0\52\3\11\0\367\3"+
    "\37\51\61\3\3\51\21\3\4\51\10\3\u018c\51\4\3"+
    "\153\51\5\3\15\51\3\3\11\51\7\3\12\51\3\3"+
    "\2\0\1\3\4\0\301\3\5\0\3\3\26\0\2\3"+
    "\7\0\36\3\4\0\224\3\3\0\273\3\125\51\1\3"+
    "\107\51\1\3\2\51\2\3\1\51\2\3\2\51\2\3"+
    "\4\51\1\3\14\51\1\3\1\51\1\3\7\51\1\3"+
    "\101\51\1\3\4\51\2\3\10\51\1\3\7\51\1\3"+
    "\34\51\1\3\4\51\1\3\5\51\1\3\1\51\3\3"+
    "\7\51\1\3\u0154\51\2\3\31\51\1\3\31\51\1\3"+
    "\37\51\1\3\31\51\1\3\37\51\1\3\31\51\1\3"+
    "\37\51\1\3\31\51\1\3\37\51\1\3\31\51\1\3"+
    "\10\51\2\3\62\74\67\0\4\3\62\0\10\3\1\0"+
    "\16\3\1\0\26\3\5\0\1\3\17\0\120\3\7\0"+
    "\1\3\21\0\2\3\7\0\1\3\2\0\1\3\5\0"+
    "\325\3\55\51\3\3\7\0\7\51\2\3\12\74\4\3"+
    "\1\51\u0171\3\54\51\4\0\12\74\5\3\1\0\305\51"+
    "\13\3\7\0\51\3\104\51\7\0\1\51\4\3\12\74"+
    "\u0156\3\1\0\117\3\4\51\1\3\33\51\1\3\2\51"+
    "\1\3\1\51\2\3\1\51\1\3\12\51\1\3\4\51"+
    "\1\3\1\51\1\3\1\51\6\3\1\51\4\3\1\51"+
    "\1\3\1\51\1\3\1\51\1\3\3\51\1\3\2\51"+
    "\1\3\1\51\2\3\1\51\1\3\1\51\1\3\1\51"+
    "\1\3\1\51\1\3\1\51\1\3\2\51\1\3\1\51"+
    "\2\3\4\51\1\3\7\51\1\3\4\51\1\3\4\51"+
    "\1\3\1\51\1\3\12\51\1\3\21\51\5\3\3\51"+
    "\1\3\5\51\1\3\21\51\u0134\3\12\0\6\3\327\51"+
    "\7\0\42\3\65\51\13\3\336\51\2\3\u0182\51\16\3"+
    "\u0131\51\37\3\36\51\342\3\113\0\266\3\1\0\36\3"+
    "\140\0\200\3\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31488];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\2\16\1\17\1\20\1\21\1\22\1\23\1\24\25\25"+
    "\2\1\1\26\1\27\1\30\1\0\1\31\1\0\1\32"+
    "\1\33\1\16\1\34\2\0\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\2\25\1\44\1\25\1\45\16\25"+
    "\1\46\1\47\7\25\1\50\1\51\10\25\1\0\1\52"+
    "\1\0\1\53\1\54\1\34\1\0\2\16\1\55\1\56"+
    "\1\57\7\25\1\60\15\25\1\61\14\25\1\0\1\34"+
    "\1\25\1\62\1\63\2\25\1\64\1\25\1\65\2\25"+
    "\1\66\1\67\1\70\3\25\1\71\1\72\1\73\2\25"+
    "\1\74\7\25\1\75\2\25\1\76\2\25\1\77\4\25"+
    "\1\100\1\25\1\101\1\102\1\103\2\25\1\104\1\105"+
    "\1\25\1\106\1\25\1\107\1\110\1\111\3\25\1\112"+
    "\1\113\1\114\1\25\1\115\1\116\1\117\1\120\4\25"+
    "\1\121\12\25\1\122\1\123\11\25\1\124\1\25\1\125";

  private static int [] zzUnpackAction() {
    int [] result = new int[247];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\75\0\75\0\u0131"+
    "\0\75\0\75\0\75\0\75\0\75\0\u016e\0\u01ab\0\u01e8"+
    "\0\u0225\0\u0262\0\75\0\75\0\u029f\0\u02dc\0\u0319\0\u0356"+
    "\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e"+
    "\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u0726"+
    "\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857\0\u0894\0\u08d1\0\u090e"+
    "\0\75\0\75\0\364\0\u094b\0\u0131\0\u0988\0\u09c5\0\u0a02"+
    "\0\u0a3f\0\u0a7c\0\u0ab9\0\75\0\75\0\75\0\75\0\75"+
    "\0\75\0\u0356\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u05f5\0\u0bea"+
    "\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2"+
    "\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u05f5\0\u0f7d"+
    "\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u05f5\0\u1128"+
    "\0\u1165\0\u11a2\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310"+
    "\0\u0894\0\75\0\u08d1\0\u134d\0\75\0\u138a\0\u13c7\0\u13c7"+
    "\0\u0ab9\0\u05f5\0\u05f5\0\u05f5\0\u1404\0\u1441\0\u147e\0\u14bb"+
    "\0\u14f8\0\u1535\0\u1572\0\u05f5\0\u15af\0\u15ec\0\u1629\0\u1666"+
    "\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4\0\u1811\0\u184e"+
    "\0\u188b\0\u05f5\0\u18c8\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9"+
    "\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u138a\0\75"+
    "\0\u1ba4\0\u05f5\0\u05f5\0\u1be1\0\u1c1e\0\u05f5\0\u1c5b\0\u05f5"+
    "\0\u1c98\0\u1cd5\0\u05f5\0\u05f5\0\u05f5\0\u1d12\0\u1d4f\0\u1d8c"+
    "\0\u05f5\0\u05f5\0\u05f5\0\u1dc9\0\u1e06\0\u05f5\0\u1e43\0\u1e80"+
    "\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u1fb1\0\u05f5\0\u1fee\0\u202b"+
    "\0\u05f5\0\u2068\0\u20a5\0\u05f5\0\u20e2\0\u211f\0\u215c\0\u2199"+
    "\0\u05f5\0\u21d6\0\u05f5\0\u05f5\0\u05f5\0\u2213\0\u2250\0\u05f5"+
    "\0\u05f5\0\u228d\0\u05f5\0\u22ca\0\u05f5\0\u05f5\0\u05f5\0\u2307"+
    "\0\u2344\0\u2381\0\u05f5\0\u05f5\0\u05f5\0\u23be\0\u05f5\0\u05f5"+
    "\0\u05f5\0\u05f5\0\u23fb\0\u2438\0\u2475\0\u24b2\0\u05f5\0\u24ef"+
    "\0\u252c\0\u2569\0\u25a6\0\u25e3\0\u2620\0\u265d\0\u269a\0\u26d7"+
    "\0\u2714\0\u05f5\0\u2751\0\u278e\0\u27cb\0\u2808\0\u2845\0\u2882"+
    "\0\u28bf\0\u28fc\0\u2939\0\u2976\0\u05f5\0\u29b3\0\u05f5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[247];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\2\43"+
    "\1\50\1\51\1\52\1\53\1\43\1\54\1\55\1\43"+
    "\1\56\1\2\1\43\1\57\3\43\1\60\1\61\1\3"+
    "\1\2\76\0\2\3\70\0\1\3\27\0\1\62\46\0"+
    "\5\63\1\64\67\63\10\65\1\66\64\65\16\0\1\67"+
    "\77\0\2\70\65\0\1\71\100\0\1\70\1\0\2\22"+
    "\12\0\1\72\32\0\1\73\23\0\1\70\1\0\2\22"+
    "\12\0\1\72\64\0\1\74\1\75\1\76\73\0\1\77"+
    "\74\0\1\100\1\101\45\0\1\102\20\0\2\102\6\0"+
    "\31\102\2\0\1\102\1\0\3\102\2\0\2\102\21\0"+
    "\2\43\6\0\13\43\1\103\1\43\1\104\4\43\1\105"+
    "\6\43\2\0\1\43\1\0\3\43\3\0\1\43\21\0"+
    "\2\43\6\0\4\43\1\106\23\43\1\107\2\0\1\43"+
    "\1\0\3\43\3\0\1\43\21\0\2\43\6\0\1\110"+
    "\20\43\1\111\2\43\1\112\4\43\2\0\1\43\1\0"+
    "\3\43\3\0\1\43\21\0\2\43\6\0\4\43\1\113"+
    "\3\43\1\114\20\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\13\43\1\115\1\43\1\116"+
    "\4\43\1\117\4\43\1\120\1\43\2\0\1\43\1\0"+
    "\3\43\3\0\1\43\21\0\2\43\6\0\21\43\1\121"+
    "\2\43\1\122\4\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\13\43\1\123\5\43\1\124"+
    "\7\43\2\0\1\43\1\0\3\43\3\0\1\43\21\0"+
    "\2\43\6\0\1\125\30\43\2\0\1\43\1\0\3\43"+
    "\3\0\1\43\21\0\2\43\6\0\15\43\1\126\4\43"+
    "\1\127\6\43\2\0\1\43\1\0\3\43\3\0\1\43"+
    "\21\0\2\43\6\0\16\43\1\130\12\43\2\0\1\43"+
    "\1\0\3\43\3\0\1\43\21\0\2\43\6\0\31\43"+
    "\2\0\1\43\1\0\3\43\3\0\1\43\21\0\2\43"+
    "\6\0\4\43\1\131\3\43\1\132\20\43\2\0\1\43"+
    "\1\0\3\43\3\0\1\43\21\0\2\43\6\0\1\133"+
    "\30\43\2\0\1\43\1\0\3\43\3\0\1\43\21\0"+
    "\2\43\6\0\16\43\1\134\5\43\1\135\4\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\5\43\1\136\7\43\1\137\3\43\1\140\2\43\1\141"+
    "\4\43\2\0\1\43\1\0\3\43\3\0\1\43\21\0"+
    "\2\43\6\0\4\43\1\142\3\43\1\143\20\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\4\43\1\144\24\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\7\43\1\145\21\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\15\43\1\146\4\43\1\147\6\43\2\0\1\43\1\0"+
    "\3\43\3\0\1\43\21\0\2\43\6\0\7\43\1\150"+
    "\21\43\2\0\1\43\1\0\3\43\3\0\1\43\5\0"+
    "\1\63\2\0\1\65\10\0\2\43\6\0\31\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\63\151\1\152\11\151"+
    "\65\153\1\154\7\153\71\0\1\155\10\0\1\63\77\0"+
    "\1\65\64\0\2\67\1\0\64\67\1\0\5\67\21\0"+
    "\2\70\12\0\1\72\37\0\13\71\1\156\61\71\14\0"+
    "\1\157\1\0\1\157\2\0\2\160\73\0\2\161\43\0"+
    "\1\161\27\0\2\43\6\0\13\43\1\162\15\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\3\43\1\163\25\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\2\43\1\164\26\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\23\43\1\165\5\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\22\43\1\166\6\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\16\43\1\167\12\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\21\43\1\170\7\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\22\43\1\171\6\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\22\43\1\172\6\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\22\43\1\173\6\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\3\43\1\174\25\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\2\43\1\175\26\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\10\43\1\176\20\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\16\43\1\177\12\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\13\43\1\200\15\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\16\43\1\201\12\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\16\43\1\202\12\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\25\43\1\203\3\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\15\43\1\204\13\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\10\43\1\205\20\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\5\43\1\206\23\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\12\43\1\207\1\43\1\210\14\43\2\0\1\43\1\0"+
    "\3\43\3\0\1\43\21\0\2\43\6\0\23\43\1\211"+
    "\5\43\2\0\1\43\1\0\3\43\3\0\1\43\21\0"+
    "\2\43\6\0\23\43\1\212\5\43\2\0\1\43\1\0"+
    "\3\43\3\0\1\43\21\0\2\43\6\0\13\43\1\213"+
    "\1\214\14\43\2\0\1\43\1\0\3\43\3\0\1\43"+
    "\21\0\2\43\6\0\5\43\1\215\23\43\2\0\1\43"+
    "\1\0\3\43\3\0\1\43\21\0\2\43\6\0\3\43"+
    "\1\216\25\43\2\0\1\43\1\0\3\43\3\0\1\43"+
    "\21\0\2\43\6\0\23\43\1\217\5\43\2\0\1\43"+
    "\1\0\3\43\3\0\1\43\21\0\2\43\6\0\6\43"+
    "\1\220\22\43\2\0\1\43\1\0\3\43\3\0\1\43"+
    "\21\0\2\43\6\0\6\43\1\221\22\43\2\0\1\43"+
    "\1\0\3\43\3\0\1\43\21\0\2\43\6\0\13\43"+
    "\1\222\15\43\2\0\1\43\1\0\3\43\3\0\1\43"+
    "\21\0\2\43\6\0\4\43\1\223\24\43\2\0\1\43"+
    "\1\0\3\43\3\0\1\43\21\0\2\43\6\0\10\43"+
    "\1\224\20\43\2\0\1\43\1\0\3\43\3\0\1\43"+
    "\21\0\2\43\6\0\10\43\1\225\20\43\2\0\1\43"+
    "\1\0\3\43\3\0\1\43\21\0\2\43\6\0\4\43"+
    "\1\226\24\43\2\0\1\43\1\0\3\43\3\0\1\43"+
    "\65\0\1\153\7\0\13\71\1\227\4\71\1\230\54\71"+
    "\21\0\2\160\73\0\2\43\6\0\26\43\1\231\2\43"+
    "\2\0\1\43\1\0\3\43\3\0\1\43\21\0\2\43"+
    "\6\0\4\43\1\232\16\43\1\233\5\43\2\0\1\43"+
    "\1\0\3\43\3\0\1\43\21\0\2\43\6\0\22\43"+
    "\1\234\6\43\2\0\1\43\1\0\3\43\3\0\1\43"+
    "\21\0\2\43\6\0\21\43\1\235\7\43\2\0\1\43"+
    "\1\0\3\43\3\0\1\43\21\0\2\43\6\0\2\43"+
    "\1\236\26\43\2\0\1\43\1\0\3\43\3\0\1\43"+
    "\21\0\2\43\6\0\23\43\1\237\5\43\2\0\1\43"+
    "\1\0\3\43\3\0\1\43\21\0\2\43\6\0\4\43"+
    "\1\240\24\43\2\0\1\43\1\0\3\43\3\0\1\43"+
    "\21\0\2\43\6\0\1\241\30\43\2\0\1\43\1\0"+
    "\3\43\3\0\1\43\21\0\2\43\6\0\22\43\1\242"+
    "\6\43\2\0\1\43\1\0\3\43\3\0\1\43\21\0"+
    "\2\43\6\0\14\43\1\243\14\43\2\0\1\43\1\0"+
    "\3\43\3\0\1\43\21\0\2\43\6\0\13\43\1\244"+
    "\15\43\2\0\1\43\1\0\3\43\3\0\1\43\21\0"+
    "\2\43\6\0\1\43\1\245\27\43\2\0\1\43\1\0"+
    "\3\43\3\0\1\43\21\0\2\43\6\0\24\43\1\246"+
    "\4\43\2\0\1\43\1\0\3\43\3\0\1\43\21\0"+
    "\2\43\6\0\10\43\1\247\20\43\2\0\1\43\1\0"+
    "\3\43\3\0\1\43\21\0\2\43\6\0\4\43\1\250"+
    "\24\43\2\0\1\43\1\0\3\43\3\0\1\43\21\0"+
    "\2\43\6\0\15\43\1\251\13\43\2\0\1\43\1\0"+
    "\3\43\3\0\1\43\21\0\2\43\6\0\23\43\1\252"+
    "\5\43\2\0\1\43\1\0\3\43\3\0\1\43\21\0"+
    "\2\43\6\0\4\43\1\253\24\43\2\0\1\43\1\0"+
    "\3\43\3\0\1\43\21\0\2\43\6\0\10\43\1\254"+
    "\20\43\2\0\1\43\1\0\3\43\3\0\1\43\21\0"+
    "\2\43\6\0\2\43\1\255\26\43\2\0\1\43\1\0"+
    "\3\43\3\0\1\43\21\0\2\43\6\0\13\43\1\256"+
    "\15\43\2\0\1\43\1\0\3\43\3\0\1\43\21\0"+
    "\2\43\6\0\1\43\1\257\27\43\2\0\1\43\1\0"+
    "\3\43\3\0\1\43\21\0\2\43\6\0\22\43\1\260"+
    "\6\43\2\0\1\43\1\0\3\43\3\0\1\43\21\0"+
    "\2\43\6\0\4\43\1\261\24\43\2\0\1\43\1\0"+
    "\3\43\3\0\1\43\21\0\2\43\6\0\4\43\1\262"+
    "\24\43\2\0\1\43\1\0\3\43\3\0\1\43\21\0"+
    "\2\43\6\0\4\43\1\263\24\43\2\0\1\43\1\0"+
    "\3\43\3\0\1\43\21\0\2\43\6\0\7\43\1\264"+
    "\21\43\2\0\1\43\1\0\3\43\3\0\1\43\21\0"+
    "\2\43\6\0\4\43\1\265\24\43\2\0\1\43\1\0"+
    "\3\43\3\0\1\43\21\0\2\43\6\0\15\43\1\266"+
    "\13\43\2\0\1\43\1\0\3\43\3\0\1\43\21\0"+
    "\2\43\6\0\16\43\1\267\12\43\2\0\1\43\1\0"+
    "\3\43\3\0\1\43\21\0\2\43\6\0\15\43\1\270"+
    "\13\43\2\0\1\43\1\0\3\43\3\0\1\43\21\0"+
    "\2\43\6\0\15\43\1\271\3\43\1\272\7\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\4\43\1\273\24\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\22\43\1\274\6\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\4\43\1\275\24\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\10\43\1\276\20\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\17\43\1\277\11\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\23\43\1\300\5\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\17\43\1\301\11\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\15\43\1\302\13\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\21\43\1\303\7\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\23\43\1\304\5\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\7\43\1\305\21\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\4\43\1\306\24\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\4\43\1\307\24\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\21\43\1\310\7\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\21\43\1\311\7\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\27\43\1\312\1\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\23\43\1\313\5\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\2\43\1\314\26\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\15\43\1\315\13\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\6\43\1\316\22\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\4\43\1\317\24\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\4\43\1\320\24\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\15\43\1\321\13\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\15\43\1\322\13\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\4\43\1\323\24\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\22\43\1\324\6\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\6\43\1\325\22\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\21\43\1\326\7\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\23\43\1\327\5\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\17\43\1\330\11\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\23\43\1\331\5\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\15\43\1\332\13\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\23\43\1\333\5\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\2\43\1\334\26\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\4\43\1\335\24\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\31\43\2\0\1\336\1\0"+
    "\3\43\3\0\1\43\21\0\2\43\6\0\23\43\1\337"+
    "\5\43\2\0\1\43\1\0\3\43\3\0\1\43\21\0"+
    "\2\43\6\0\3\43\1\340\25\43\2\0\1\43\1\0"+
    "\3\43\3\0\1\43\21\0\2\43\6\0\3\43\1\341"+
    "\17\43\1\342\5\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\31\43\2\0\1\343\1\0"+
    "\3\43\3\0\1\43\21\0\2\43\6\0\1\344\30\43"+
    "\2\0\1\43\1\0\3\43\3\0\1\43\21\0\2\43"+
    "\6\0\10\43\1\345\20\43\2\0\1\43\1\0\3\43"+
    "\3\0\1\43\21\0\2\43\6\0\17\43\1\346\11\43"+
    "\2\0\1\43\1\0\3\43\3\0\1\43\21\0\2\43"+
    "\6\0\23\43\1\347\5\43\2\0\1\43\1\0\3\43"+
    "\3\0\1\43\21\0\2\43\6\0\14\43\1\350\14\43"+
    "\2\0\1\43\1\0\3\43\3\0\1\43\21\0\2\43"+
    "\6\0\1\351\30\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\4\43\1\352\24\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\4\43\1\353\24\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\21\43\1\354\7\43\2\0"+
    "\1\43\1\0\3\43\3\0\1\43\21\0\2\43\6\0"+
    "\22\43\1\355\6\43\2\0\1\43\1\0\3\43\3\0"+
    "\1\43\21\0\2\43\6\0\1\356\30\43\2\0\1\43"+
    "\1\0\3\43\3\0\1\43\21\0\2\43\6\0\23\43"+
    "\1\357\5\43\2\0\1\43\1\0\3\43\3\0\1\43"+
    "\21\0\2\43\6\0\14\43\1\360\14\43\2\0\1\43"+
    "\1\0\3\43\3\0\1\43\21\0\2\43\6\0\1\361"+
    "\30\43\2\0\1\43\1\0\3\43\3\0\1\43\21\0"+
    "\2\43\6\0\4\43\1\362\24\43\2\0\1\43\1\0"+
    "\3\43\3\0\1\43\21\0\2\43\6\0\14\43\1\363"+
    "\14\43\2\0\1\43\1\0\3\43\3\0\1\43\21\0"+
    "\2\43\6\0\23\43\1\364\5\43\2\0\1\43\1\0"+
    "\3\43\3\0\1\43\21\0\2\43\6\0\17\43\1\365"+
    "\11\43\2\0\1\43\1\0\3\43\3\0\1\43\21\0"+
    "\2\43\6\0\4\43\1\366\24\43\2\0\1\43\1\0"+
    "\3\43\3\0\1\43\21\0\2\43\6\0\21\43\1\367"+
    "\7\43\2\0\1\43\1\0\3\43\3\0\1\43";

  private static int [] zzUnpacktrans() {
    int [] result = new int[10736];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\2\11\1\1\5\11\5\1\2\11"+
    "\34\1\2\11\1\0\1\1\1\0\4\1\2\0\6\11"+
    "\47\1\1\0\1\11\1\0\1\1\1\11\1\1\1\0"+
    "\47\1\1\0\1\11\137\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[247];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /* user code: */
  public _FlexibleSearchLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _FlexibleSearchLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 86: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 87: break;
          case 3:
            { return EXCLAMATION_MARK;
            }
          // fall through
          case 88: break;
          case 4:
            { return MOD;
            }
          // fall through
          case 89: break;
          case 5:
            { return AMP;
            }
          // fall through
          case 90: break;
          case 6:
            { return LPAREN;
            }
          // fall through
          case 91: break;
          case 7:
            { return RPAREN;
            }
          // fall through
          case 92: break;
          case 8:
            { return ASTERISK;
            }
          // fall through
          case 93: break;
          case 9:
            { return PLUS;
            }
          // fall through
          case 94: break;
          case 10:
            { return COMMA;
            }
          // fall through
          case 95: break;
          case 11:
            { return MINUS;
            }
          // fall through
          case 96: break;
          case 12:
            { return DOT;
            }
          // fall through
          case 97: break;
          case 13:
            { return DIV;
            }
          // fall through
          case 98: break;
          case 14:
            { return NUMERIC_LITERAL;
            }
          // fall through
          case 99: break;
          case 15:
            { return COLON;
            }
          // fall through
          case 100: break;
          case 16:
            { return SEMICOLON;
            }
          // fall through
          case 101: break;
          case 17:
            { return LT;
            }
          // fall through
          case 102: break;
          case 18:
            { return EQ;
            }
          // fall through
          case 103: break;
          case 19:
            { return GT;
            }
          // fall through
          case 104: break;
          case 20:
            { return QUESTION_MARK;
            }
          // fall through
          case 105: break;
          case 21:
            { return IDENTIFIER;
            }
          // fall through
          case 106: break;
          case 22:
            { return BAR;
            }
          // fall through
          case 107: break;
          case 23:
            { return TILDE;
            }
          // fall through
          case 108: break;
          case 24:
            { return NOT_EQ;
            }
          // fall through
          case 109: break;
          case 25:
            { return DOUBLE_QUOTE_STRING_LITERAL;
            }
          // fall through
          case 110: break;
          case 26:
            { return SINGLE_QUOTE_STRING_LITERAL;
            }
          // fall through
          case 111: break;
          case 27:
            { return LINE_COMMENT;
            }
          // fall through
          case 112: break;
          case 28:
            { return COMMENT;
            }
          // fall through
          case 113: break;
          case 29:
            { return SHL;
            }
          // fall through
          case 114: break;
          case 30:
            { return LTE;
            }
          // fall through
          case 115: break;
          case 31:
            { return UNEQ;
            }
          // fall through
          case 116: break;
          case 32:
            { return EQEQ;
            }
          // fall through
          case 117: break;
          case 33:
            { return GTE;
            }
          // fall through
          case 118: break;
          case 34:
            { return SHR;
            }
          // fall through
          case 119: break;
          case 35:
            { return NAMED_PARAMETER;
            }
          // fall through
          case 120: break;
          case 36:
            { return AS;
            }
          // fall through
          case 121: break;
          case 37:
            { return BY;
            }
          // fall through
          case 122: break;
          case 38:
            { return IN;
            }
          // fall through
          case 123: break;
          case 39:
            { return IS;
            }
          // fall through
          case 124: break;
          case 40:
            { return ON;
            }
          // fall through
          case 125: break;
          case 41:
            { return OR;
            }
          // fall through
          case 126: break;
          case 42:
            { return BRACKET_LITERAL;
            }
          // fall through
          case 127: break;
          case 43:
            { return BACKTICK_LITERAL;
            }
          // fall through
          case 128: break;
          case 44:
            { return CONCAT;
            }
          // fall through
          case 129: break;
          case 45:
            { return ALL;
            }
          // fall through
          case 130: break;
          case 46:
            { return AND;
            }
          // fall through
          case 131: break;
          case 47:
            { return ASC;
            }
          // fall through
          case 132: break;
          case 48:
            { return END;
            }
          // fall through
          case 133: break;
          case 49:
            { return NOT;
            }
          // fall through
          case 134: break;
          case 50:
            { return CASE;
            }
          // fall through
          case 135: break;
          case 51:
            { return CAST;
            }
          // fall through
          case 136: break;
          case 52:
            { return DESC;
            }
          // fall through
          case 137: break;
          case 53:
            { return ELSE;
            }
          // fall through
          case 138: break;
          case 54:
            { return FROM;
            }
          // fall through
          case 139: break;
          case 55:
            { return FULL;
            }
          // fall through
          case 140: break;
          case 56:
            { return GLOB;
            }
          // fall through
          case 141: break;
          case 57:
            { return JOIN;
            }
          // fall through
          case 142: break;
          case 58:
            { return LEFT;
            }
          // fall through
          case 143: break;
          case 59:
            { return LIKE;
            }
          // fall through
          case 144: break;
          case 60:
            { return NULL;
            }
          // fall through
          case 145: break;
          case 61:
            { return THEN;
            }
          // fall through
          case 146: break;
          case 62:
            { return WHEN;
            }
          // fall through
          case 147: break;
          case 63:
            { return CROSS;
            }
          // fall through
          case 148: break;
          case 64:
            { return GROUP;
            }
          // fall through
          case 149: break;
          case 65:
            { return INNER;
            }
          // fall through
          case 150: break;
          case 66:
            { return LIMIT;
            }
          // fall through
          case 151: break;
          case 67:
            { return MATCH;
            }
          // fall through
          case 152: break;
          case 68:
            { return ORDER;
            }
          // fall through
          case 153: break;
          case 69:
            { return OUTER;
            }
          // fall through
          case 154: break;
          case 70:
            { return RIGHT;
            }
          // fall through
          case 155: break;
          case 71:
            { return UNION;
            }
          // fall through
          case 156: break;
          case 72:
            { return USING;
            }
          // fall through
          case 157: break;
          case 73:
            { return WHERE;
            }
          // fall through
          case 158: break;
          case 74:
            { return ESCAPE;
            }
          // fall through
          case 159: break;
          case 75:
            { return EXISTS;
            }
          // fall through
          case 160: break;
          case 76:
            { return HAVING;
            }
          // fall through
          case 161: break;
          case 77:
            { return OFFSET;
            }
          // fall through
          case 162: break;
          case 78:
            { return REGEXP;
            }
          // fall through
          case 163: break;
          case 79:
            { return SELECT;
            }
          // fall through
          case 164: break;
          case 80:
            { return BETWEEN;
            }
          // fall through
          case 165: break;
          case 81:
            { return DISTINCT;
            }
          // fall through
          case 166: break;
          case 82:
            { return CURRENT_DATE;
            }
          // fall through
          case 167: break;
          case 83:
            { return CURRENT_TIME;
            }
          // fall through
          case 168: break;
          case 84:
            { return CURRENT_TIMESTAMP;
            }
          // fall through
          case 169: break;
          case 85:
            { return NUMBERED_PARAMETER;
            }
          // fall through
          case 170: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
