// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _PolyglotQueryLexer.flex

package com.intellij.idea.plugin.hybris.polyglotQuery;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.intellij.idea.plugin.hybris.polyglotQuery.psi.PolyglotQueryTypes.*;


public class _PolyglotQueryLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\12\u2000\1\u2100\1\u2200\1\u2300\1\u2000\1\u2400"+
    "\1\u2500\2\u2000\31\u1100\1\u2600\121\u1100\1\u2700\4\u1100\1\u2800"+
    "\1\u1100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00\53\u1100"+
    "\1\u2f00\41\u2000\1\u1100\1\u3000\1\u3100\1\u1100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u2000\1\u3600\1\u3700\1\u3800\1\u3900\1\u1100"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u2000"+
    "\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u2000\1\u4d00\1\u4e00\1\u4f00"+
    "\1\u2000\3\u1100\1\u5000\1\u5100\1\u5200\12\u2000\4\u1100\1\u5300"+
    "\17\u2000\2\u1100\1\u5400\41\u2000\2\u1100\1\u5500\1\u5600\2\u2000"+
    "\1\u5700\1\u5800\27\u1100\1\u5900\2\u1100\1\u5a00\45\u2000\1\u1100"+
    "\1\u5b00\1\u5c00\11\u2000\1\u5d00\27\u2000\1\u5e00\1\u5f00\1\u6000"+
    "\1\u6100\11\u2000\1\u6200\1\u6300\5\u2000\1\u6400\1\u6500\4\u2000"+
    "\1\u6600\21\u2000\246\u1100\1\u6700\20\u1100\1\u6800\1\u6900\25\u1100"+
    "\1\u6a00\34\u1100\1\u6b00\14\u2000\2\u1100\1\u6c00\u0e05\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\1\22\0\1\1\5\0\1\3"+
    "\1\0\1\4\1\5\1\6\2\0\1\7\1\10\1\11"+
    "\12\12\2\0\1\13\1\14\1\15\1\16\1\0\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\2\24\1\30\1\24\1\31\1\32\2\24\1\33\1\34"+
    "\1\35\1\36\1\24\1\37\1\24\1\40\1\24\1\41"+
    "\1\0\1\42\1\0\1\12\1\0\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\2\24\1\30"+
    "\1\24\1\31\1\32\2\24\1\43\1\34\1\35\1\36"+
    "\1\24\1\37\1\24\1\40\1\24\1\44\1\0\1\45"+
    "\7\0\1\1\32\0\1\1\11\0\1\24\12\0\1\24"+
    "\4\0\1\24\5\0\27\24\1\0\37\24\1\0\70\24"+
    "\2\27\115\24\1\34\u0142\24\4\0\14\24\16\0\5\24"+
    "\7\0\1\24\1\0\1\24\201\0\5\24\1\0\2\24"+
    "\2\0\4\24\1\0\1\24\6\0\1\24\1\0\3\24"+
    "\1\0\1\24\1\0\24\24\1\0\123\24\1\0\213\24"+
    "\10\0\246\24\1\0\46\24\2\0\1\24\6\0\51\24"+
    "\107\0\33\24\4\0\4\24\55\0\53\24\25\0\12\12"+
    "\4\0\2\24\1\0\143\24\1\0\1\24\17\0\2\24"+
    "\7\0\2\24\12\12\3\24\2\0\1\24\20\0\1\24"+
    "\1\0\36\24\35\0\131\24\13\0\1\24\16\0\12\12"+
    "\41\24\11\0\2\24\4\0\1\24\5\0\26\24\4\0"+
    "\1\24\11\0\1\24\3\0\1\24\27\0\31\24\7\0"+
    "\13\24\65\0\25\24\1\0\10\24\106\0\66\24\3\0"+
    "\1\24\22\0\1\24\7\0\12\24\4\0\12\12\1\0"+
    "\20\24\4\0\10\24\2\0\2\24\2\0\26\24\1\0"+
    "\7\24\1\0\1\24\3\0\4\24\3\0\1\24\20\0"+
    "\1\24\15\0\2\24\1\0\3\24\4\0\12\12\2\24"+
    "\12\0\1\24\10\0\6\24\4\0\2\24\2\0\26\24"+
    "\1\0\7\24\1\0\2\24\1\0\2\24\1\0\2\24"+
    "\37\0\4\24\1\0\1\24\7\0\12\12\2\0\3\24"+
    "\20\0\11\24\1\0\3\24\1\0\26\24\1\0\7\24"+
    "\1\0\2\24\1\0\5\24\3\0\1\24\22\0\1\24"+
    "\17\0\2\24\4\0\12\12\11\0\1\24\13\0\10\24"+
    "\2\0\2\24\2\0\26\24\1\0\7\24\1\0\2\24"+
    "\1\0\5\24\3\0\1\24\36\0\2\24\1\0\3\24"+
    "\4\0\12\12\1\0\1\24\21\0\1\24\1\0\6\24"+
    "\3\0\3\24\1\0\4\24\3\0\2\24\1\0\1\24"+
    "\1\0\2\24\3\0\2\24\3\0\3\24\3\0\14\24"+
    "\26\0\1\24\25\0\12\12\25\0\10\24\1\0\3\24"+
    "\1\0\27\24\1\0\20\24\3\0\1\24\32\0\3\24"+
    "\5\0\2\24\4\0\12\12\20\0\1\24\4\0\10\24"+
    "\1\0\3\24\1\0\27\24\1\0\12\24\1\0\5\24"+
    "\3\0\1\24\40\0\1\24\1\0\2\24\4\0\12\12"+
    "\1\0\2\24\22\0\10\24\1\0\3\24\1\0\51\24"+
    "\2\0\1\24\20\0\1\24\5\0\3\24\10\0\3\24"+
    "\4\0\12\12\12\0\6\24\5\0\22\24\3\0\30\24"+
    "\1\0\11\24\1\0\1\24\2\0\7\24\37\0\12\12"+
    "\21\0\60\24\1\0\2\24\14\0\7\24\11\0\12\12"+
    "\47\0\2\24\1\0\1\24\1\0\5\24\1\0\30\24"+
    "\1\0\1\24\1\0\12\24\1\0\2\24\11\0\1\24"+
    "\2\0\5\24\1\0\1\24\11\0\12\12\2\0\4\24"+
    "\40\0\1\24\37\0\12\12\26\0\10\24\1\0\44\24"+
    "\33\0\5\24\163\0\53\24\24\0\1\24\12\12\6\0"+
    "\6\24\4\0\4\24\3\0\1\24\3\0\2\24\7\0"+
    "\3\24\4\0\15\24\14\0\1\24\1\0\12\12\6\0"+
    "\46\24\1\0\1\24\5\0\1\24\2\0\53\24\1\0"+
    "\u014d\24\1\0\4\24\2\0\7\24\1\0\1\24\1\0"+
    "\4\24\2\0\51\24\1\0\4\24\2\0\41\24\1\0"+
    "\4\24\2\0\7\24\1\0\1\24\1\0\4\24\2\0"+
    "\17\24\1\0\71\24\1\0\4\24\2\0\103\24\45\0"+
    "\20\24\20\0\126\24\2\0\6\24\3\0\u016c\24\2\0"+
    "\21\24\1\1\32\24\5\0\113\24\6\0\10\24\7\0"+
    "\15\24\1\0\4\24\16\0\22\24\16\0\22\24\16\0"+
    "\15\24\1\0\3\24\17\0\64\24\43\0\1\24\4\0"+
    "\1\24\3\0\12\12\46\0\12\12\6\0\131\24\7\0"+
    "\5\24\2\0\42\24\1\0\1\24\5\0\106\24\12\0"+
    "\37\24\47\0\12\12\36\24\2\0\5\24\13\0\54\24"+
    "\4\0\32\24\6\0\12\12\46\0\27\24\11\0\65\24"+
    "\53\0\12\12\6\0\12\12\15\0\1\24\135\0\57\24"+
    "\21\0\7\24\4\0\12\12\51\0\36\24\15\0\2\24"+
    "\12\12\54\24\32\0\44\24\34\0\12\12\3\0\3\24"+
    "\12\12\44\24\2\0\11\24\7\0\53\24\2\0\3\24"+
    "\51\0\4\24\1\0\6\24\1\0\2\24\3\0\1\24"+
    "\5\0\300\24\100\0\26\24\2\0\6\24\2\0\46\24"+
    "\2\0\6\24\2\0\10\24\1\0\1\24\1\0\1\24"+
    "\1\0\1\24\1\0\37\24\2\0\65\24\1\0\7\24"+
    "\1\0\1\24\3\0\3\24\1\0\7\24\3\0\4\24"+
    "\2\0\6\24\4\0\15\24\5\0\3\24\1\0\7\24"+
    "\3\0\13\1\35\0\2\1\5\0\1\1\57\0\1\1"+
    "\21\0\1\24\15\0\1\24\20\0\15\24\145\0\1\24"+
    "\4\0\1\24\2\0\12\24\1\0\1\24\3\0\5\24"+
    "\6\0\1\24\1\0\1\24\1\0\1\24\1\0\4\24"+
    "\1\0\13\24\2\0\4\24\5\0\5\24\4\0\1\24"+
    "\64\0\2\24\u017b\0\57\24\1\0\57\24\1\0\205\24"+
    "\6\0\4\24\3\0\2\24\14\0\46\24\1\0\1\24"+
    "\5\0\1\24\2\0\70\24\7\0\1\24\20\0\27\24"+
    "\11\0\7\24\1\0\7\24\1\0\7\24\1\0\7\24"+
    "\1\0\7\24\1\0\7\24\1\0\7\24\1\0\7\24"+
    "\120\0\1\24\320\0\1\1\4\0\2\24\52\0\5\24"+
    "\5\0\2\24\4\0\126\24\6\0\3\24\1\0\132\24"+
    "\1\0\4\24\5\0\53\24\1\0\136\24\21\0\33\24"+
    "\65\0\306\24\112\0\360\24\20\0\215\24\103\0\56\24"+
    "\2\0\15\24\3\0\20\24\12\12\2\24\24\0\57\24"+
    "\20\0\37\24\2\0\106\24\61\0\11\24\2\0\147\24"+
    "\2\0\65\24\2\0\5\24\60\0\13\24\1\0\3\24"+
    "\1\0\4\24\1\0\27\24\35\0\64\24\16\0\62\24"+
    "\34\0\12\12\30\0\6\24\3\0\1\24\1\0\2\24"+
    "\1\0\12\12\34\24\12\0\27\24\31\0\35\24\7\0"+
    "\57\24\34\0\1\24\12\12\6\0\5\24\1\0\12\24"+
    "\12\12\5\24\1\0\51\24\27\0\3\24\1\0\10\24"+
    "\4\0\12\12\6\0\27\24\3\0\1\24\3\0\62\24"+
    "\1\0\1\24\3\0\2\24\2\0\5\24\2\0\1\24"+
    "\1\0\1\24\30\0\3\24\2\0\13\24\7\0\3\24"+
    "\14\0\6\24\2\0\6\24\2\0\6\24\11\0\7\24"+
    "\1\0\7\24\1\0\53\24\1\0\14\24\10\0\163\24"+
    "\15\0\12\12\6\0\244\24\14\0\27\24\4\0\61\24"+
    "\4\0\156\24\2\0\152\24\46\0\7\24\14\0\5\24"+
    "\5\0\1\24\1\0\12\24\1\0\15\24\1\0\5\24"+
    "\1\0\1\24\1\0\2\24\1\0\2\24\1\0\154\24"+
    "\41\0\153\24\22\0\100\24\2\0\66\24\50\0\14\24"+
    "\164\0\5\24\1\0\207\24\23\0\12\12\7\0\32\24"+
    "\6\0\32\24\13\0\131\24\3\0\6\24\2\0\6\24"+
    "\2\0\6\24\2\0\3\24\43\0\14\24\1\0\32\24"+
    "\1\0\23\24\1\0\2\24\1\0\17\24\2\0\16\24"+
    "\42\0\173\24\205\0\35\24\3\0\61\24\57\0\40\24"+
    "\15\0\24\24\1\0\10\24\6\0\46\24\12\0\36\24"+
    "\2\0\44\24\4\0\10\24\60\0\236\24\2\0\12\12"+
    "\6\0\44\24\4\0\44\24\4\0\50\24\10\0\64\24"+
    "\234\0\67\24\11\0\26\24\12\0\10\24\230\0\6\24"+
    "\2\0\1\24\1\0\54\24\1\0\2\24\3\0\1\24"+
    "\2\0\27\24\12\0\27\24\11\0\37\24\101\0\23\24"+
    "\1\0\2\24\12\0\26\24\12\0\32\24\106\0\70\24"+
    "\6\0\2\24\100\0\1\24\17\0\4\24\1\0\3\24"+
    "\1\0\35\24\52\0\35\24\3\0\35\24\43\0\10\24"+
    "\1\0\34\24\33\0\66\24\12\0\26\24\12\0\23\24"+
    "\15\0\22\24\156\0\111\24\67\0\63\24\15\0\63\24"+
    "\15\0\44\24\14\0\12\12\306\0\35\24\12\0\1\24"+
    "\10\0\26\24\232\0\27\24\14\0\65\24\56\0\12\12"+
    "\23\0\55\24\40\0\31\24\7\0\12\12\11\0\44\24"+
    "\17\0\12\12\4\0\1\24\13\0\43\24\3\0\1\24"+
    "\14\0\60\24\16\0\4\24\13\0\12\12\1\24\1\0"+
    "\1\24\43\0\22\24\1\0\31\24\124\0\7\24\1\0"+
    "\1\24\1\0\4\24\1\0\17\24\1\0\12\24\7\0"+
    "\57\24\21\0\12\12\13\0\10\24\2\0\2\24\2\0"+
    "\26\24\1\0\7\24\1\0\2\24\1\0\5\24\3\0"+
    "\1\24\22\0\1\24\14\0\5\24\236\0\65\24\22\0"+
    "\4\24\5\0\12\12\5\0\1\24\40\0\60\24\24\0"+
    "\2\24\1\0\1\24\10\0\12\12\246\0\57\24\51\0"+
    "\4\24\44\0\60\24\24\0\1\24\13\0\12\12\46\0"+
    "\53\24\15\0\1\24\7\0\12\12\66\0\33\24\25\0"+
    "\12\12\306\0\54\24\164\0\100\24\12\12\25\0\1\24"+
    "\240\0\10\24\2\0\47\24\20\0\1\24\1\0\1\24"+
    "\34\0\1\24\12\0\50\24\7\0\1\24\25\0\1\24"+
    "\13\0\56\24\23\0\1\24\42\0\71\24\7\0\11\24"+
    "\1\0\45\24\21\0\1\24\17\0\12\12\30\0\36\24"+
    "\160\0\7\24\1\0\2\24\1\0\46\24\25\0\1\24"+
    "\11\0\12\12\6\0\6\24\1\0\2\24\1\0\40\24"+
    "\16\0\1\24\7\0\12\12\u0136\0\23\24\15\0\232\24"+
    "\346\0\304\24\274\0\57\24\321\0\107\24\271\0\71\24"+
    "\7\0\37\24\1\0\12\12\146\0\36\24\22\0\60\24"+
    "\20\0\4\24\14\0\12\12\11\0\25\24\5\0\23\24"+
    "\260\0\100\24\200\0\113\24\5\0\1\24\102\0\15\24"+
    "\100\0\2\24\1\0\1\24\34\0\370\24\10\0\363\24"+
    "\15\0\37\24\61\0\3\24\21\0\4\24\10\0\u018c\24"+
    "\4\0\153\24\5\0\15\24\3\0\11\24\7\0\12\24"+
    "\146\0\125\24\1\0\107\24\1\0\2\24\2\0\1\24"+
    "\2\0\2\24\2\0\4\24\1\0\14\24\1\0\1\24"+
    "\1\0\7\24\1\0\101\24\1\0\4\24\2\0\10\24"+
    "\1\0\7\24\1\0\34\24\1\0\4\24\1\0\5\24"+
    "\1\0\1\24\3\0\7\24\1\0\u0154\24\2\0\31\24"+
    "\1\0\31\24\1\0\37\24\1\0\31\24\1\0\37\24"+
    "\1\0\31\24\1\0\37\24\1\0\31\24\1\0\37\24"+
    "\1\0\31\24\1\0\10\24\2\0\62\12\55\24\12\0"+
    "\7\24\2\0\12\12\4\0\1\24\u0171\0\54\24\4\0"+
    "\12\12\6\0\305\24\73\0\104\24\7\0\1\24\4\0"+
    "\12\12\246\0\4\24\1\0\33\24\1\0\2\24\1\0"+
    "\1\24\2\0\1\24\1\0\12\24\1\0\4\24\1\0"+
    "\1\24\1\0\1\24\6\0\1\24\4\0\1\24\1\0"+
    "\1\24\1\0\1\24\1\0\3\24\1\0\2\24\1\0"+
    "\1\24\2\0\1\24\1\0\1\24\1\0\1\24\1\0"+
    "\1\24\1\0\1\24\1\0\2\24\1\0\1\24\2\0"+
    "\4\24\1\0\7\24\1\0\4\24\1\0\4\24\1\0"+
    "\1\24\1\0\12\24\1\0\21\24\5\0\3\24\1\0"+
    "\5\24\1\0\21\24\104\0\327\24\51\0\65\24\13\0"+
    "\336\24\2\0\u0182\24\16\0\u0131\24\37\0\36\24\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27904];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\11\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\2\13"+
    "\1\25\2\13\1\26\2\13\1\27\1\13\1\21\1\30"+
    "\1\31\1\13\1\32\1\33\3\13\1\0\1\21\1\34"+
    "\1\35\2\13\1\36\1\37";

  private static int [] zzUnpackAction() {
    int [] result = new int[58];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\46\0\46\0\46\0\162\0\46"+
    "\0\230\0\276\0\46\0\344\0\46\0\u010a\0\u0130\0\u0156"+
    "\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214\0\u023a\0\46\0\46"+
    "\0\46\0\46\0\u0260\0\u0286\0\46\0\46\0\46\0\u02ac"+
    "\0\u02d2\0\u0156\0\u02f8\0\u031e\0\u0156\0\u0344\0\u036a\0\u0390"+
    "\0\u03b6\0\u03dc\0\u0156\0\u0156\0\u0402\0\u0156\0\u0156\0\u0428"+
    "\0\u044e\0\u0474\0\u03dc\0\46\0\u0156\0\u0156\0\u049a\0\u04c0"+
    "\0\u0156\0\u0156";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[58];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\2\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\2\20\1\22\1\20\1\23\1\20\1\24"+
    "\1\25\4\20\1\26\1\20\1\27\1\30\1\20\1\31"+
    "\1\32\47\0\2\3\52\0\1\33\44\0\1\34\53\0"+
    "\1\35\1\36\44\0\1\37\43\0\1\20\4\0\12\20"+
    "\1\40\2\20\1\41\4\20\2\0\1\20\14\0\1\20"+
    "\4\0\21\20\1\42\2\0\1\20\14\0\1\20\4\0"+
    "\22\20\2\0\1\20\14\0\1\20\4\0\4\20\1\43"+
    "\15\20\2\0\1\20\14\0\1\20\4\0\4\20\1\44"+
    "\15\20\2\0\1\20\14\0\1\20\4\0\15\20\1\45"+
    "\4\20\2\0\1\20\14\0\1\20\4\0\13\20\1\46"+
    "\3\20\1\47\2\20\2\0\1\20\14\0\1\20\4\0"+
    "\14\20\1\50\5\20\2\0\1\50\14\0\1\20\4\0"+
    "\7\20\1\51\12\20\2\0\1\20\2\0\2\33\1\0"+
    "\40\33\1\0\2\33\6\34\1\52\37\34\12\0\1\20"+
    "\4\0\3\20\1\53\16\20\2\0\1\20\14\0\1\20"+
    "\4\0\2\20\1\54\17\20\2\0\1\20\14\0\1\20"+
    "\4\0\15\20\1\55\4\20\2\0\1\20\14\0\1\20"+
    "\4\0\16\20\1\56\3\20\2\0\1\20\14\0\1\20"+
    "\4\0\16\20\1\57\3\20\2\0\1\20\14\0\1\20"+
    "\4\0\11\20\1\60\10\20\2\0\1\20\14\0\1\20"+
    "\4\0\3\20\1\61\16\20\2\0\1\20\14\0\1\20"+
    "\4\0\4\20\1\62\15\20\2\0\1\20\2\0\6\34"+
    "\1\63\2\34\1\64\34\34\12\0\1\20\4\0\2\20"+
    "\1\65\17\20\2\0\1\20\14\0\1\20\4\0\11\20"+
    "\1\66\10\20\2\0\1\20\14\0\1\20\4\0\4\20"+
    "\1\67\15\20\2\0\1\20\14\0\1\20\4\0\14\20"+
    "\1\70\5\20\2\0\1\70\14\0\1\20\4\0\14\20"+
    "\1\71\5\20\2\0\1\71\14\0\1\20\4\0\4\20"+
    "\1\72\15\20\2\0\1\20\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[1254];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\3\11\1\1\1\11\2\1\1\11"+
    "\1\1\1\11\11\1\4\11\2\1\3\11\23\1\1\0"+
    "\1\11\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[58];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _PolyglotQueryLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _PolyglotQueryLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 32: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 33: break;
          case 3:
            { return AMP;
            }
          // fall through
          case 34: break;
          case 4:
            { return LPAREN;
            }
          // fall through
          case 35: break;
          case 5:
            { return RPAREN;
            }
          // fall through
          case 36: break;
          case 6:
            { return DOT;
            }
          // fall through
          case 37: break;
          case 7:
            { return LT;
            }
          // fall through
          case 38: break;
          case 8:
            { return EQ;
            }
          // fall through
          case 39: break;
          case 9:
            { return GT;
            }
          // fall through
          case 40: break;
          case 10:
            { return QUESTION_MARK;
            }
          // fall through
          case 41: break;
          case 11:
            { return IDENTIFIER;
            }
          // fall through
          case 42: break;
          case 12:
            { return LBRACKET;
            }
          // fall through
          case 43: break;
          case 13:
            { return RBRACKET;
            }
          // fall through
          case 44: break;
          case 14:
            { return LBRACE;
            }
          // fall through
          case 45: break;
          case 15:
            { return RBRACE;
            }
          // fall through
          case 46: break;
          case 16:
            { return LINE_COMMENT;
            }
          // fall through
          case 47: break;
          case 17:
            { return COMMENT;
            }
          // fall through
          case 48: break;
          case 18:
            { return LTE;
            }
          // fall through
          case 49: break;
          case 19:
            { return UNEQ;
            }
          // fall through
          case 50: break;
          case 20:
            { return GTE;
            }
          // fall through
          case 51: break;
          case 21:
            { return BY;
            }
          // fall through
          case 52: break;
          case 22:
            { return IS;
            }
          // fall through
          case 53: break;
          case 23:
            { return OR;
            }
          // fall through
          case 54: break;
          case 24:
            { return AND;
            }
          // fall through
          case 55: break;
          case 25:
            { return ASC;
            }
          // fall through
          case 56: break;
          case 26:
            { return GET;
            }
          // fall through
          case 57: break;
          case 27:
            { return NOT;
            }
          // fall through
          case 58: break;
          case 28:
            { return DESC;
            }
          // fall through
          case 59: break;
          case 29:
            { return NULL;
            }
          // fall through
          case 60: break;
          case 30:
            { return ORDER;
            }
          // fall through
          case 61: break;
          case 31:
            { return WHERE;
            }
          // fall through
          case 62: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
